# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pyift
else:
    import _pyift

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


IFT_INTERIOR = _pyift.IFT_INTERIOR
IFT_EXTERIOR = _pyift.IFT_EXTERIOR
IFT_BOTH = _pyift.IFT_BOTH
IFT_AXIS_X = _pyift.IFT_AXIS_X
IFT_AXIS_Y = _pyift.IFT_AXIS_Y
IFT_AXIS_Z = _pyift.IFT_AXIS_Z

def FormattedTime(runtime: "float") -> "char *":
    r"""
    FormattedTime(runtime) -> char *

    Parameters
    ----------
    runtime: float

    """
    return _pyift.FormattedTime(runtime)

def RandomSeed(arg1: "unsigned int") -> "void":
    r"""
    RandomSeed(arg1)

    Parameters
    ----------
    arg1: unsigned int

    """
    return _pyift.RandomSeed(arg1)

def NormalizationValue(maxval: "long") -> "long":
    r"""
    NormalizationValue(maxval) -> long

    Parameters
    ----------
    maxval: long

    """
    return _pyift.NormalizationValue(maxval)
class AdjRel(object):
    r"""Proxy of C iftAdjRel struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dx = property(_pyift.AdjRel_dx_get, _pyift.AdjRel_dx_set, doc=r"""dx""")
    dy = property(_pyift.AdjRel_dy_get, _pyift.AdjRel_dy_set, doc=r"""dy""")
    dz = property(_pyift.AdjRel_dz_get, _pyift.AdjRel_dz_set, doc=r"""dz""")
    dt = property(_pyift.AdjRel_dt_get, _pyift.AdjRel_dt_set, doc=r"""dt""")
    n = property(_pyift.AdjRel_n_get, _pyift.AdjRel_n_set, doc=r"""n""")

    def __getitem__(self, i: "int") -> "PyObject *":
        r"""
        __getitem__(self, i) -> PyObject *

        Parameters
        ----------
        i: int

        """
        return _pyift.AdjRel___getitem__(self, i)
    __swig_destroy__ = _pyift.delete_AdjRel

    def __init__(self):
        r"""__init__(self) -> AdjRel"""
        _pyift.AdjRel_swiginit(self, _pyift.new_AdjRel())

# Register AdjRel in _pyift:
_pyift.AdjRel_swigregister(AdjRel)


def CreateAdjRel(n: "int") -> "iftAdjRel *":
    r"""
    CreateAdjRel(n) -> AdjRel

    Parameters
    ----------
    n: int

    """
    return _pyift.CreateAdjRel(n)

def Spheric(r: "float") -> "iftAdjRel *":
    r"""
    Spheric(r) -> AdjRel

    Parameters
    ----------
    r: float

    """
    return _pyift.Spheric(r)

def HyperSpheric(r: "float") -> "iftAdjRel *":
    r"""
    HyperSpheric(r) -> AdjRel

    Parameters
    ----------
    r: float

    """
    return _pyift.HyperSpheric(r)

def SemiHyperSpheric(r: "float", positive: "bool") -> "iftAdjRel *":
    r"""
    SemiHyperSpheric(r, positive) -> AdjRel

    Parameters
    ----------
    r: float
    positive: bool

    """
    return _pyift.SemiHyperSpheric(r, positive)

def Hemispheric(r: "float", axis: "char", direction: "int") -> "iftAdjRel *":
    r"""
    Hemispheric(r, axis, direction) -> AdjRel

    Parameters
    ----------
    r: float
    axis: char
    direction: int

    """
    return _pyift.Hemispheric(r, axis, direction)

def SphericEdges(r: "float") -> "iftAdjRel *":
    r"""
    SphericEdges(r) -> AdjRel

    Parameters
    ----------
    r: float

    """
    return _pyift.SphericEdges(r)

def Circular(r: "float") -> "iftAdjRel *":
    r"""
    Circular(r) -> AdjRel

    Parameters
    ----------
    r: float

    """
    return _pyift.Circular(r)

def CircularEdges(r: "float") -> "iftAdjRel *":
    r"""
    CircularEdges(r) -> AdjRel

    Parameters
    ----------
    r: float

    """
    return _pyift.CircularEdges(r)

def ClockCircular(r: "float") -> "iftAdjRel *":
    r"""
    ClockCircular(r) -> AdjRel

    Parameters
    ----------
    r: float

    """
    return _pyift.ClockCircular(r)

def RightSide(A: "AdjRel", r: "float") -> "iftAdjRel *":
    r"""
    RightSide(A, r) -> AdjRel

    Parameters
    ----------
    A: iftAdjRel *
    r: float

    """
    return _pyift.RightSide(A, r)

def LeftSide(A: "AdjRel", r: "float") -> "iftAdjRel *":
    r"""
    LeftSide(A, r) -> AdjRel

    Parameters
    ----------
    A: iftAdjRel *
    r: float

    """
    return _pyift.LeftSide(A, r)

def Rectangular(xsize: "int", ysize: "int") -> "iftAdjRel *":
    r"""
    Rectangular(xsize, ysize) -> AdjRel

    Parameters
    ----------
    xsize: int
    ysize: int

    """
    return _pyift.Rectangular(xsize, ysize)

def RectangularWithDilation(xsize: "int", ysize: "int", sx: "int", sy: "int") -> "iftAdjRel *":
    r"""
    RectangularWithDilation(xsize, ysize, sx, sy) -> AdjRel

    Parameters
    ----------
    xsize: int
    ysize: int
    sx: int
    sy: int

    """
    return _pyift.RectangularWithDilation(xsize, ysize, sx, sy)

def Cross(xsize: "int", ysize: "int") -> "iftAdjRel *":
    r"""
    Cross(xsize, ysize) -> AdjRel

    Parameters
    ----------
    xsize: int
    ysize: int

    """
    return _pyift.Cross(xsize, ysize)

def Cuboid(xsize: "int", ysize: "int", zsize: "int") -> "iftAdjRel *":
    r"""
    Cuboid(xsize, ysize, zsize) -> AdjRel

    Parameters
    ----------
    xsize: int
    ysize: int
    zsize: int

    """
    return _pyift.Cuboid(xsize, ysize, zsize)

def HyperCuboid(xsize: "int", ysize: "int", zsize: "int", tsize: "int") -> "iftAdjRel *":
    r"""
    HyperCuboid(xsize, ysize, zsize, tsize) -> AdjRel

    Parameters
    ----------
    xsize: int
    ysize: int
    zsize: int
    tsize: int

    """
    return _pyift.HyperCuboid(xsize, ysize, zsize, tsize)

def CuboidWithDilation(xsize: "int", ysize: "int", zsize: "int", sx: "int", sy: "int", sz: "int") -> "iftAdjRel *":
    r"""
    CuboidWithDilation(xsize, ysize, zsize, sx, sy, sz) -> AdjRel

    Parameters
    ----------
    xsize: int
    ysize: int
    zsize: int
    sx: int
    sy: int
    sz: int

    """
    return _pyift.CuboidWithDilation(xsize, ysize, zsize, sx, sy, sz)

def CopyAdjacency(A: "AdjRel") -> "iftAdjRel *":
    r"""
    CopyAdjacency(A) -> AdjRel

    Parameters
    ----------
    A: iftAdjRel const *

    """
    return _pyift.CopyAdjacency(A)

def MaxAdjShifts(A: "AdjRel", dx: "int *", dy: "int *", dz: "int *") -> "void":
    r"""
    MaxAdjShifts(A, dx, dy, dz)

    Parameters
    ----------
    A: iftAdjRel const *
    dx: int *
    dy: int *
    dz: int *

    """
    return _pyift.MaxAdjShifts(A, dx, dy, dz)

def GetAdjacentVoxel(A: "AdjRel", u: "Voxel", adj: "int") -> "iftVoxel":
    r"""
    GetAdjacentVoxel(A, u, adj) -> Voxel

    Parameters
    ----------
    A: iftAdjRel const *
    u: iftVoxel
    adj: int

    """
    return _pyift.GetAdjacentVoxel(A, u, adj)
class Image(object):
    r"""Proxy of C iftImage struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    val = property(_pyift.Image_val_get, _pyift.Image_val_set, doc=r"""val""")
    Cb = property(_pyift.Image_Cb_get, _pyift.Image_Cb_set, doc=r"""Cb""")
    Cr = property(_pyift.Image_Cr_get, _pyift.Image_Cr_set, doc=r"""Cr""")
    alpha = property(_pyift.Image_alpha_get, _pyift.Image_alpha_set, doc=r"""alpha""")
    xsize = property(_pyift.Image_xsize_get, _pyift.Image_xsize_set, doc=r"""xsize""")
    ysize = property(_pyift.Image_ysize_get, _pyift.Image_ysize_set, doc=r"""ysize""")
    zsize = property(_pyift.Image_zsize_get, _pyift.Image_zsize_set, doc=r"""zsize""")
    dx = property(_pyift.Image_dx_get, _pyift.Image_dx_set, doc=r"""dx""")
    dy = property(_pyift.Image_dy_get, _pyift.Image_dy_set, doc=r"""dy""")
    dz = property(_pyift.Image_dz_get, _pyift.Image_dz_set, doc=r"""dz""")
    tby = property(_pyift.Image_tby_get, _pyift.Image_tby_set, doc=r"""tby""")
    tbz = property(_pyift.Image_tbz_get, _pyift.Image_tbz_set, doc=r"""tbz""")
    n = property(_pyift.Image_n_get, _pyift.Image_n_set, doc=r"""n""")

    def __getitem__(self, pixel: "int") -> "PyObject *":
        r"""
        __getitem__(self, pixel) -> PyObject *

        Parameters
        ----------
        pixel: int

        """
        return _pyift.Image___getitem__(self, pixel)

    def __setitem__(self, pixel: "int", color: "PyObject *") -> "void":
        r"""
        __setitem__(self, pixel, color)

        Parameters
        ----------
        pixel: int
        color: PyObject *

        """
        return _pyift.Image___setitem__(self, pixel, color)

    def GetVoxelIndex(self, voxel: "Voxel") -> "int":
        r"""
        GetVoxelIndex(self, voxel) -> int

        Parameters
        ----------
        voxel: iftVoxel *

        """
        return _pyift.Image_GetVoxelIndex(self, voxel)

    def GetCoordIndex(self, x: "int", y: "int", z: "int") -> "int":
        r"""
        GetCoordIndex(self, x, y, z) -> int

        Parameters
        ----------
        x: int
        y: int
        z: int

        """
        return _pyift.Image_GetCoordIndex(self, x, y, z)

    def GetVoxel(self, p: "int") -> "iftVoxel":
        r"""
        GetVoxel(self, p) -> Voxel

        Parameters
        ----------
        p: int

        """
        return _pyift.Image_GetVoxel(self, p)

    def GetVoxelSizes(self) -> "PyObject *":
        r"""GetVoxelSizes(self) -> PyObject *"""
        return _pyift.Image_GetVoxelSizes(self)

    def SetVoxelSizes(self, input: "PyObject *") -> "void":
        r"""
        SetVoxelSizes(self, input)

        Parameters
        ----------
        input: PyObject *

        """
        return _pyift.Image_SetVoxelSizes(self, input)

    def AsNumPy(self) -> "PyObject *":
        r"""AsNumPy(self) -> PyObject *"""
        return _pyift.Image_AsNumPy(self)

    def FromNumPy(self, input: "PyObject *", is3D: "bool"=False) -> "void":
        r"""
        FromNumPy(self, input, is3D=False)

        Parameters
        ----------
        input: PyObject *
        is3D: bool

        """
        return _pyift.Image_FromNumPy(self, input, is3D)

    def ToPlot(self) -> "PyObject *":
        r"""ToPlot(self) -> PyObject *"""
        return _pyift.Image_ToPlot(self)

    def Write(self, filename: "char *") -> "void":
        r"""
        Write(self, filename)

        Parameters
        ----------
        filename: char *

        """
        return _pyift.Image_Write(self, filename)

    def ImgVal(self, x: "long", y: "long", z: "long") -> "int":
        r"""
        ImgVal(self, x, y, z) -> int

        Parameters
        ----------
        x: long
        y: long
        z: long

        """
        return _pyift.Image_ImgVal(self, x, y, z)

    def ImgVoxelVal(self, v: "Voxel") -> "int":
        r"""
        ImgVoxelVal(self, v) -> int

        Parameters
        ----------
        v: iftVoxel

        """
        return _pyift.Image_ImgVoxelVal(self, v)

    def SetList(self, list: "PyObject *", value: "int") -> "void":
        r"""
        SetList(self, list, value)

        Parameters
        ----------
        list: PyObject *
        value: int

        """
        return _pyift.Image_SetList(self, list, value)

    def SetValue(self, value: "int") -> "void":
        r"""
        SetValue(self, value)

        Parameters
        ----------
        value: int

        """
        return _pyift.Image_SetValue(self, value)

    def Sum(self) -> "long":
        r"""Sum(self) -> long"""
        return _pyift.Image_Sum(self)
    __swig_destroy__ = _pyift.delete_Image

    def __init__(self):
        r"""__init__(self) -> Image"""
        _pyift.Image_swiginit(self, _pyift.new_Image())

# Register Image in _pyift:
_pyift.Image_swigregister(Image)


def GetImageDomain(img: "Image") -> "iftImageDomain":
    r"""
    GetImageDomain(img) -> ImageDomain

    Parameters
    ----------
    img: iftImage const *

    """
    return _pyift.GetImageDomain(img)

def IsColorImage(img: "Image") -> "bool":
    r"""
    IsColorImage(img) -> bool

    Parameters
    ----------
    img: iftImage const *

    """
    return _pyift.IsColorImage(img)

def Is3DImage(img: "Image") -> "bool":
    r"""
    Is3DImage(img) -> bool

    Parameters
    ----------
    img: iftImage const *

    """
    return _pyift.Is3DImage(img)

def CreateImage(xsize: "int", ysize: "int", zsize: "int") -> "iftImage *":
    r"""
    CreateImage(xsize, ysize, zsize) -> Image

    Parameters
    ----------
    xsize: int
    ysize: int
    zsize: int

    """
    return _pyift.CreateImage(xsize, ysize, zsize)

def CreateImageFromImage(src: "Image") -> "iftImage *":
    r"""
    CreateImageFromImage(src) -> Image

    Parameters
    ----------
    src: iftImage const *

    """
    return _pyift.CreateImageFromImage(src)

def ReadGrayImageSetAsIntMatrix(img_set: "FileSet") -> "iftIntMatrix *":
    r"""
    ReadGrayImageSetAsIntMatrix(img_set) -> IntMatrix

    Parameters
    ----------
    img_set: iftFileSet const *

    """
    return _pyift.ReadGrayImageSetAsIntMatrix(img_set)

def SetCbCr(img: "Image", value: "ushort") -> "void":
    r"""
    SetCbCr(img, value)

    Parameters
    ----------
    img: iftImage *
    value: ushort

    """
    return _pyift.SetCbCr(img, value)

def MaximumValueInRegion(img: "Image", bb: "BoundingBox") -> "int":
    r"""
    MaximumValueInRegion(img, bb) -> int

    Parameters
    ----------
    img: iftImage const *
    bb: iftBoundingBox

    """
    return _pyift.MaximumValueInRegion(img, bb)

def MaximumValueInMask(img: "Image", mask: "Image") -> "int":
    r"""
    MaximumValueInMask(img, mask) -> int

    Parameters
    ----------
    img: iftImage const *
    mask: iftImage const *

    """
    return _pyift.MaximumValueInMask(img, mask)

def MinimumValueInMask(img: "Image", mask: "Image") -> "int":
    r"""
    MinimumValueInMask(img, mask) -> int

    Parameters
    ----------
    img: iftImage const *
    mask: iftImage *

    """
    return _pyift.MinimumValueInMask(img, mask)

def MinimumValuesForLabels(img: "Image", label_img: "Image", min_vals_out: "iftIntArray **", max_vals_out: "iftIntArray **") -> "void":
    r"""
    MinimumValuesForLabels(img, label_img, min_vals_out, max_vals_out)

    Parameters
    ----------
    img: iftImage const *
    label_img: iftImage const *
    min_vals_out: iftIntArray **
    max_vals_out: iftIntArray **

    """
    return _pyift.MinimumValuesForLabels(img, label_img, min_vals_out, max_vals_out)

def MaximumValue(img: "Image") -> "int":
    r"""
    MaximumValue(img) -> int

    Parameters
    ----------
    img: iftImage const *

    """
    return _pyift.MaximumValue(img)

def ReadImageByExt(*args) -> "iftImage *":
    r"""
    ReadImageByExt(filename) -> Image

    Parameters
    ----------
    filename: char const *

    """
    return _pyift.ReadImageByExt(*args)

def WriteImageByExt(*args) -> "void":
    r"""
    WriteImageByExt(img, filename)

    Parameters
    ----------
    img: iftImage const *
    filename: char const *

    """
    return _pyift.WriteImageByExt(*args)

def CopyImage(img: "Image") -> "iftImage *":
    r"""
    CopyImage(img) -> Image

    Parameters
    ----------
    img: iftImage const *

    """
    return _pyift.CopyImage(img)

def CopyImageInsideRegion(src: "Image", mask: "Image", dst: "Image") -> "void":
    r"""
    CopyImageInsideRegion(src, mask, dst)

    Parameters
    ----------
    src: iftImage const *
    mask: iftImage const *
    dst: iftImage *

    """
    return _pyift.CopyImageInsideRegion(src, mask, dst)

def ImageGradientMagnitude(img: "Image", Ain: "AdjRel") -> "iftImage *":
    r"""
    ImageGradientMagnitude(img, Ain) -> Image

    Parameters
    ----------
    img: iftImage const *
    Ain: iftAdjRel *

    """
    return _pyift.ImageGradientMagnitude(img, Ain)

def SetImage(img: "Image", value: "int") -> "void":
    r"""
    SetImage(img, value)

    Parameters
    ----------
    img: iftImage *
    value: int

    """
    return _pyift.SetImage(img, value)

def GetXYSlice(img: "Image", zcoord: "int") -> "iftImage *":
    r"""
    GetXYSlice(img, zcoord) -> Image

    Parameters
    ----------
    img: iftImage const *
    zcoord: int

    """
    return _pyift.GetXYSlice(img, zcoord)

def GetZXSlice(img: "Image", ycoord: "int") -> "iftImage *":
    r"""
    GetZXSlice(img, ycoord) -> Image

    Parameters
    ----------
    img: iftImage const *
    ycoord: int

    """
    return _pyift.GetZXSlice(img, ycoord)

def GetYZSlice(img: "Image", xcoord: "int") -> "iftImage *":
    r"""
    GetYZSlice(img, xcoord) -> Image

    Parameters
    ----------
    img: iftImage const *
    xcoord: int

    """
    return _pyift.GetYZSlice(img, xcoord)

def PutXYSlice(img: "Image", slice: "Image", zcoord: "int") -> "void":
    r"""
    PutXYSlice(img, slice, zcoord)

    Parameters
    ----------
    img: iftImage *
    slice: iftImage const *
    zcoord: int

    """
    return _pyift.PutXYSlice(img, slice, zcoord)

def ImageCb(img: "Image") -> "iftImage *":
    r"""
    ImageCb(img) -> Image

    Parameters
    ----------
    img: iftImage const *

    """
    return _pyift.ImageCb(img)

def ImageCr(img: "Image") -> "iftImage *":
    r"""
    ImageCr(img) -> Image

    Parameters
    ----------
    img: iftImage const *

    """
    return _pyift.ImageCr(img)

def ImageGray(img: "Image") -> "iftImage *":
    r"""
    ImageGray(img) -> Image

    Parameters
    ----------
    img: iftImage *

    """
    return _pyift.ImageGray(img)

def RegionBorders(label_img: "Image") -> "iftImage *":
    r"""
    RegionBorders(label_img) -> Image

    Parameters
    ----------
    label_img: iftImage const *

    """
    return _pyift.RegionBorders(label_img)

def NumberOfElements(mask: "Image") -> "int":
    r"""
    NumberOfElements(mask) -> int

    Parameters
    ----------
    mask: iftImage const *

    """
    return _pyift.NumberOfElements(mask)

def SelectImageDomain(xsize: "int", ysize: "int", zsize: "int") -> "iftImage *":
    r"""
    SelectImageDomain(xsize, ysize, zsize) -> Image

    Parameters
    ----------
    xsize: int
    ysize: int
    zsize: int

    """
    return _pyift.SelectImageDomain(xsize, ysize, zsize)

def FillBoundingBoxInImage(img: "Image", bb: "BoundingBox", value: "int") -> "void":
    r"""
    FillBoundingBoxInImage(img, bb, value)

    Parameters
    ----------
    img: iftImage *
    bb: iftBoundingBox
    value: int

    """
    return _pyift.FillBoundingBoxInImage(img, bb, value)

def MinBoundingBox(img: "Image", gc_out: "Voxel") -> "iftBoundingBox":
    r"""
    MinBoundingBox(img, gc_out) -> BoundingBox

    Parameters
    ----------
    img: iftImage const *
    gc_out: iftVoxel *

    """
    return _pyift.MinBoundingBox(img, gc_out)

def MinObjectBoundingBox(img: "Image", obj_label: "int", gc_out: "Voxel") -> "iftBoundingBox":
    r"""
    MinObjectBoundingBox(img, obj_label, gc_out) -> BoundingBox

    Parameters
    ----------
    img: iftImage const *
    obj_label: int
    gc_out: iftVoxel *

    """
    return _pyift.MinObjectBoundingBox(img, obj_label, gc_out)

def ExtractROI(img: "Image", bb: "BoundingBox") -> "iftImage *":
    r"""
    ExtractROI(img, bb) -> Image

    Parameters
    ----------
    img: iftImage const *
    bb: iftBoundingBox

    """
    return _pyift.ExtractROI(img, bb)

def InsertROI(roi: "Image", target: "Image", begin: "Voxel") -> "void":
    r"""
    InsertROI(roi, target, begin)

    Parameters
    ----------
    roi: iftImage const *
    target: iftImage *
    begin: iftVoxel

    """
    return _pyift.InsertROI(roi, target, begin)

def ExtractObject(src: "Image", obj_label: "int") -> "iftImage *":
    r"""
    ExtractObject(src, obj_label) -> Image

    Parameters
    ----------
    src: iftImage const *
    obj_label: int

    """
    return _pyift.ExtractObject(src, obj_label)

def ExtractLabels(src_img: "Image", labels: "IntArray") -> "iftImage *":
    r"""
    ExtractLabels(src_img, labels) -> Image

    Parameters
    ----------
    src_img: iftImage const *
    labels: iftIntArray const *

    """
    return _pyift.ExtractLabels(src_img, labels)

def RelabelImage(label_img: "Image") -> "iftImage *":
    r"""
    RelabelImage(label_img) -> Image

    Parameters
    ----------
    label_img: iftImage const *

    """
    return _pyift.RelabelImage(label_img)

def GetObjectLabels(label_img: "Image") -> "iftIntArray *":
    r"""
    GetObjectLabels(label_img) -> IntArray

    Parameters
    ----------
    label_img: iftImage const *

    """
    return _pyift.GetObjectLabels(label_img)

def FindObjectLabels(label_img: "Image") -> "iftIntArray *":
    r"""
    FindObjectLabels(label_img) -> IntArray

    Parameters
    ----------
    label_img: iftImage const *

    """
    return _pyift.FindObjectLabels(label_img)

def GetObjectVoxels(label_img: "Image") -> "iftIntArray *":
    r"""
    GetObjectVoxels(label_img) -> IntArray

    Parameters
    ----------
    label_img: iftImage const *

    """
    return _pyift.GetObjectVoxels(label_img)

def ImageBasins(img: "Image", Ain: "AdjRel") -> "iftImage *":
    r"""
    ImageBasins(img, Ain) -> Image

    Parameters
    ----------
    img: iftImage const *
    Ain: iftAdjRel *

    """
    return _pyift.ImageBasins(img, Ain)

def GetLabeledPathSides(label: "Image", path: "Set", obj: "iftSet **", bkg: "iftSet **") -> "iftSet **, iftSet **":
    r"""
    GetLabeledPathSides(label, path, obj, bkg)

    Parameters
    ----------
    label: iftImage const *
    path: iftSet const *
    obj: iftSet **
    bkg: iftSet **

    """
    return _pyift.GetLabeledPathSides(label, path, obj, bkg)

def GrayImageToColorImage(img: "Image", ctb: "ColorTable") -> "iftImage *":
    r"""
    GrayImageToColorImage(img, ctb) -> Image

    Parameters
    ----------
    img: iftImage const *
    ctb: iftColorTable *

    """
    return _pyift.GrayImageToColorImage(img, ctb)

def CreateImageFromNumPy(input: "PyObject *", is3D: "bool") -> "iftImage *":
    r"""
    CreateImageFromNumPy(input, is3D) -> Image

    Parameters
    ----------
    input: PyObject *
    is3D: bool

    """
    return _pyift.CreateImageFromNumPy(input, is3D)

def NDArrayToLabelImage(input: "PyObject *") -> "iftImage *":
    r"""
    NDArrayToLabelImage(input) -> Image

    Parameters
    ----------
    input: PyObject *

    """
    return _pyift.NDArrayToLabelImage(input)

def ImageFromNumPyLabelIndex(index: "PyObject *", label: "PyObject *", xsize: "int", ysize: "int", zsize: "int", is_whole_array: "bool") -> "iftImage *":
    r"""
    ImageFromNumPyLabelIndex(index, label, xsize, ysize, zsize, is_whole_array) -> Image

    Parameters
    ----------
    index: PyObject *
    label: PyObject *
    xsize: int
    ysize: int
    zsize: int
    is_whole_array: bool

    """
    return _pyift.ImageFromNumPyLabelIndex(index, label, xsize, ysize, zsize, is_whole_array)

def ImageFromNumPyMapping(components: "Image", reference: "PyObject *", label: "PyObject *") -> "iftImage *":
    r"""
    ImageFromNumPyMapping(components, reference, label) -> Image

    Parameters
    ----------
    components: iftImage const *
    reference: PyObject *
    label: PyObject *

    """
    return _pyift.ImageFromNumPyMapping(components, reference, label)

def PathValue(in_image: "PyObject *", in_markers: "PyObject *", penalization: "float") -> "PyObject *":
    r"""
    PathValue(in_image, in_markers, penalization) -> PyObject *

    Parameters
    ----------
    in_image: PyObject *
    in_markers: PyObject *
    penalization: float

    """
    return _pyift.PathValue(in_image, in_markers, penalization)

def squared(x: "float") -> "float":
    r"""
    squared(x) -> float

    Parameters
    ----------
    x: float

    """
    return _pyift.squared(x)

def Gaussian(in_image: "PyObject *", in_markers: "PyObject *", sigma: "float") -> "PyObject *":
    r"""
    Gaussian(in_image, in_markers, sigma) -> PyObject *

    Parameters
    ----------
    in_image: PyObject *
    in_markers: PyObject *
    sigma: float

    """
    return _pyift.Gaussian(in_image, in_markers, sigma)
class FImage(object):
    r"""Proxy of C iftFImage struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    val = property(_pyift.FImage_val_get, _pyift.FImage_val_set, doc=r"""val""")
    xsize = property(_pyift.FImage_xsize_get, _pyift.FImage_xsize_set, doc=r"""xsize""")
    ysize = property(_pyift.FImage_ysize_get, _pyift.FImage_ysize_set, doc=r"""ysize""")
    zsize = property(_pyift.FImage_zsize_get, _pyift.FImage_zsize_set, doc=r"""zsize""")
    dx = property(_pyift.FImage_dx_get, _pyift.FImage_dx_set, doc=r"""dx""")
    dy = property(_pyift.FImage_dy_get, _pyift.FImage_dy_set, doc=r"""dy""")
    dz = property(_pyift.FImage_dz_get, _pyift.FImage_dz_set, doc=r"""dz""")
    tby = property(_pyift.FImage_tby_get, _pyift.FImage_tby_set, doc=r"""tby""")
    tbz = property(_pyift.FImage_tbz_get, _pyift.FImage_tbz_set, doc=r"""tbz""")
    n = property(_pyift.FImage_n_get, _pyift.FImage_n_set, doc=r"""n""")

    def __getitem__(self, pixel: "int") -> "PyObject *":
        r"""
        __getitem__(self, pixel) -> PyObject *

        Parameters
        ----------
        pixel: int

        """
        return _pyift.FImage___getitem__(self, pixel)

    def __setitem__(self, pixel: "int", color: "PyObject *") -> "void":
        r"""
        __setitem__(self, pixel, color)

        Parameters
        ----------
        pixel: int
        color: PyObject *

        """
        return _pyift.FImage___setitem__(self, pixel, color)

    def Add(self, value: "float") -> "void":
        r"""
        Add(self, value)

        Parameters
        ----------
        value: float

        """
        return _pyift.FImage_Add(self, value)

    def Sub(self, value: "float") -> "void":
        r"""
        Sub(self, value)

        Parameters
        ----------
        value: float

        """
        return _pyift.FImage_Sub(self, value)

    def Mult(self, value: "float") -> "void":
        r"""
        Mult(self, value)

        Parameters
        ----------
        value: float

        """
        return _pyift.FImage_Mult(self, value)

    def Div(self, value: "float") -> "void":
        r"""
        Div(self, value)

        Parameters
        ----------
        value: float

        """
        return _pyift.FImage_Div(self, value)

    def GetVoxelIndex(self, voxel: "Voxel") -> "int":
        r"""
        GetVoxelIndex(self, voxel) -> int

        Parameters
        ----------
        voxel: iftVoxel *

        """
        return _pyift.FImage_GetVoxelIndex(self, voxel)

    def GetVoxel(self, p: "int") -> "iftVoxel":
        r"""
        GetVoxel(self, p) -> Voxel

        Parameters
        ----------
        p: int

        """
        return _pyift.FImage_GetVoxel(self, p)

    def AsNumPy(self) -> "PyObject *":
        r"""AsNumPy(self) -> PyObject *"""
        return _pyift.FImage_AsNumPy(self)

    def FromNumPy(self, input: "PyObject *") -> "void":
        r"""
        FromNumPy(self, input)

        Parameters
        ----------
        input: PyObject *

        """
        return _pyift.FImage_FromNumPy(self, input)

    def ToPlot(self) -> "PyObject *":
        r"""ToPlot(self) -> PyObject *"""
        return _pyift.FImage_ToPlot(self)

    def Write(self, filename: "char *") -> "void":
        r"""
        Write(self, filename)

        Parameters
        ----------
        filename: char *

        """
        return _pyift.FImage_Write(self, filename)

    def SetMask(self, mask: "Image", value: "float") -> "void":
        r"""
        SetMask(self, mask, value)

        Parameters
        ----------
        mask: iftImage const *
        value: float

        """
        return _pyift.FImage_SetMask(self, mask, value)

    def SetInfinity(self, mask: "Image") -> "void":
        r"""
        SetInfinity(self, mask)

        Parameters
        ----------
        mask: iftImage const *

        """
        return _pyift.FImage_SetInfinity(self, mask)

    def SetInfinityNeg(self, mask: "Image") -> "void":
        r"""
        SetInfinityNeg(self, mask)

        Parameters
        ----------
        mask: iftImage const *

        """
        return _pyift.FImage_SetInfinityNeg(self, mask)

    def SetList(self, list: "PyObject *", value: "float") -> "void":
        r"""
        SetList(self, list, value)

        Parameters
        ----------
        list: PyObject *
        value: float

        """
        return _pyift.FImage_SetList(self, list, value)
    __swig_destroy__ = _pyift.delete_FImage

    def __init__(self):
        r"""__init__(self) -> FImage"""
        _pyift.FImage_swiginit(self, _pyift.new_FImage())

# Register FImage in _pyift:
_pyift.FImage_swigregister(FImage)


def FCopyImage(img: "FImage") -> "iftFImage *":
    r"""
    FCopyImage(img) -> FImage

    Parameters
    ----------
    img: iftFImage const *

    """
    return _pyift.FCopyImage(img)

def CreateFImage(xsize: "int", ysize: "int", zsize: "int") -> "iftFImage *":
    r"""
    CreateFImage(xsize, ysize, zsize) -> FImage

    Parameters
    ----------
    xsize: int
    ysize: int
    zsize: int

    """
    return _pyift.CreateFImage(xsize, ysize, zsize)

def CreateConstantFImage(xsize: "int", ysize: "int", zsize: "int", val: "float") -> "iftFImage *":
    r"""
    CreateConstantFImage(xsize, ysize, zsize, val) -> FImage

    Parameters
    ----------
    xsize: int
    ysize: int
    zsize: int
    val: float

    """
    return _pyift.CreateConstantFImage(xsize, ysize, zsize, val)

def FSetImage(img: "FImage", value: "float") -> "void":
    r"""
    FSetImage(img, value)

    Parameters
    ----------
    img: iftFImage *
    value: float

    """
    return _pyift.FSetImage(img, value)

def ImageToFImage(img: "Image") -> "iftFImage *":
    r"""
    ImageToFImage(img) -> FImage

    Parameters
    ----------
    img: iftImage const *

    """
    return _pyift.ImageToFImage(img)

def FImageToImage(img: "FImage", Imax: "int") -> "iftImage *":
    r"""
    FImageToImage(img, Imax) -> Image

    Parameters
    ----------
    img: iftFImage const *
    Imax: int

    """
    return _pyift.FImageToImage(img, Imax)

def ReadFImage(*args) -> "iftFImage *":
    r"""
    ReadFImage(npy_path) -> FImage

    Parameters
    ----------
    npy_path: char const *

    """
    return _pyift.ReadFImage(*args)

def FImageSetValue(fimg: "FImage", S: "Set", value: "float") -> "void":
    r"""
    FImageSetValue(fimg, S, value)

    Parameters
    ----------
    fimg: iftFImage *
    S: iftSet const *
    value: float

    """
    return _pyift.FImageSetValue(fimg, S, value)
class DoubleMatrix(object):
    r"""Proxy of C iftDoubleMatrix struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    val = property(_pyift.DoubleMatrix_val_get, _pyift.DoubleMatrix_val_set, doc=r"""val""")
    ncols = property(_pyift.DoubleMatrix_ncols_get, _pyift.DoubleMatrix_ncols_set, doc=r"""ncols""")
    nrows = property(_pyift.DoubleMatrix_nrows_get, _pyift.DoubleMatrix_nrows_set, doc=r"""nrows""")
    tbrow = property(_pyift.DoubleMatrix_tbrow_get, _pyift.DoubleMatrix_tbrow_set, doc=r"""tbrow""")
    n = property(_pyift.DoubleMatrix_n_get, _pyift.DoubleMatrix_n_set, doc=r"""n""")
    allocated = property(_pyift.DoubleMatrix_allocated_get, _pyift.DoubleMatrix_allocated_set, doc=r"""allocated""")

    def __add__(self, m2: "DoubleMatrix") -> "iftDoubleMatrix *":
        r"""
        __add__(self, m2) -> DoubleMatrix

        Parameters
        ----------
        m2: iftDoubleMatrix *

        """
        return _pyift.DoubleMatrix___add__(self, m2)

    def __sub__(self, m2: "DoubleMatrix") -> "iftDoubleMatrix *":
        r"""
        __sub__(self, m2) -> DoubleMatrix

        Parameters
        ----------
        m2: iftDoubleMatrix *

        """
        return _pyift.DoubleMatrix___sub__(self, m2)

    def __mul__(self, m2: "DoubleMatrix") -> "iftDoubleMatrix *":
        r"""
        __mul__(self, m2) -> DoubleMatrix

        Parameters
        ----------
        m2: iftDoubleMatrix *

        """
        return _pyift.DoubleMatrix___mul__(self, m2)

    def AsNumPy(self) -> "PyObject *":
        r"""AsNumPy(self) -> PyObject *"""
        return _pyift.DoubleMatrix_AsNumPy(self)

    def FromNumPy(self, input: "PyObject *") -> "void":
        r"""
        FromNumPy(self, input)

        Parameters
        ----------
        input: PyObject *

        """
        return _pyift.DoubleMatrix_FromNumPy(self, input)
    __swig_destroy__ = _pyift.delete_DoubleMatrix

    def __init__(self):
        r"""__init__(self) -> DoubleMatrix"""
        _pyift.DoubleMatrix_swiginit(self, _pyift.new_DoubleMatrix())

# Register DoubleMatrix in _pyift:
_pyift.DoubleMatrix_swigregister(DoubleMatrix)


def CreateDoubleMatrix(ncols: "int", nrows: "int") -> "iftDoubleMatrix *":
    r"""
    CreateDoubleMatrix(ncols, nrows) -> DoubleMatrix

    Parameters
    ----------
    ncols: int
    nrows: int

    """
    return _pyift.CreateDoubleMatrix(ncols, nrows)

def ReadRawMatrix(filename: "char const *") -> "iftMatrix *":
    r"""
    ReadRawMatrix(filename) -> Matrix

    Parameters
    ----------
    filename: char const *

    """
    return _pyift.ReadRawMatrix(filename)

def WriteRawMatrix(M: "Matrix", filename: "char *") -> "void":
    r"""
    WriteRawMatrix(M, filename)

    Parameters
    ----------
    M: iftMatrix *
    filename: char *

    """
    return _pyift.WriteRawMatrix(M, filename)
class MImage(object):
    r"""Proxy of C iftMImage struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_pyift.MImage_data_get, _pyift.MImage_data_set, doc=r"""data""")
    val = property(_pyift.MImage_val_get, _pyift.MImage_val_set, doc=r"""val""")
    xsize = property(_pyift.MImage_xsize_get, _pyift.MImage_xsize_set, doc=r"""xsize""")
    ysize = property(_pyift.MImage_ysize_get, _pyift.MImage_ysize_set, doc=r"""ysize""")
    zsize = property(_pyift.MImage_zsize_get, _pyift.MImage_zsize_set, doc=r"""zsize""")
    dx = property(_pyift.MImage_dx_get, _pyift.MImage_dx_set, doc=r"""dx""")
    dy = property(_pyift.MImage_dy_get, _pyift.MImage_dy_set, doc=r"""dy""")
    dz = property(_pyift.MImage_dz_get, _pyift.MImage_dz_set, doc=r"""dz""")
    tby = property(_pyift.MImage_tby_get, _pyift.MImage_tby_set, doc=r"""tby""")
    tbz = property(_pyift.MImage_tbz_get, _pyift.MImage_tbz_set, doc=r"""tbz""")
    n = property(_pyift.MImage_n_get, _pyift.MImage_n_set, doc=r"""n""")
    m = property(_pyift.MImage_m_get, _pyift.MImage_m_set, doc=r"""m""")

    def __getitem__(self, band: "int") -> "iftImage *":
        r"""
        __getitem__(self, band) -> Image

        Parameters
        ----------
        band: int

        """
        return _pyift.MImage___getitem__(self, band)

    def __setitem__(self, band: "int", img: "Image") -> "void":
        r"""
        __setitem__(self, band, img)

        Parameters
        ----------
        band: int
        img: iftImage *

        """
        return _pyift.MImage___setitem__(self, band, img)

    def AsNumPy(self) -> "PyObject *":
        r"""AsNumPy(self) -> PyObject *"""
        return _pyift.MImage_AsNumPy(self)

    def WriteAsNumPy(self, filename: "char const *") -> "void":
        r"""
        WriteAsNumPy(self, filename)

        Parameters
        ----------
        filename: char const *

        """
        return _pyift.MImage_WriteAsNumPy(self, filename)
    __swig_destroy__ = _pyift.delete_MImage

    def __init__(self):
        r"""__init__(self) -> MImage"""
        _pyift.MImage_swiginit(self, _pyift.new_MImage())

# Register MImage in _pyift:
_pyift.MImage_swigregister(MImage)

class MImageArray(object):
    r"""Proxy of C iftMImageArray struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    val = property(_pyift.MImageArray_val_get, _pyift.MImageArray_val_set, doc=r"""val""")
    n = property(_pyift.MImageArray_n_get, _pyift.MImageArray_n_set, doc=r"""n""")

    def __getitem__(self, index: "int") -> "iftMImage *":
        r"""
        __getitem__(self, index) -> MImage

        Parameters
        ----------
        index: int

        """
        return _pyift.MImageArray___getitem__(self, index)
    __swig_destroy__ = _pyift.delete_MImageArray

    def __init__(self):
        r"""__init__(self) -> MImageArray"""
        _pyift.MImageArray_swiginit(self, _pyift.new_MImageArray())

# Register MImageArray in _pyift:
_pyift.MImageArray_swigregister(MImageArray)


def MGetVoxelCoord(img: "MImage", p: "int") -> "iftVoxel":
    r"""
    MGetVoxelCoord(img, p) -> Voxel

    Parameters
    ----------
    img: iftMImage const *
    p: int

    """
    return _pyift.MGetVoxelCoord(img, p)

def CreateMImage(xsize: "int", ysize: "int", zsize: "int", nbands: "int") -> "iftMImage *":
    r"""
    CreateMImage(xsize, ysize, zsize, nbands) -> MImage

    Parameters
    ----------
    xsize: int
    ysize: int
    zsize: int
    nbands: int

    """
    return _pyift.CreateMImage(xsize, ysize, zsize, nbands)

def MValidVoxel(img: "MImage", v: "Voxel") -> "char":
    r"""
    MValidVoxel(img, v) -> char

    Parameters
    ----------
    img: iftMImage const *
    v: iftVoxel

    """
    return _pyift.MValidVoxel(img, v)

def ImageToMImage(img: "Image", color_space: "char") -> "iftMImage *":
    r"""
    ImageToMImage(img, color_space) -> MImage

    Parameters
    ----------
    img: iftImage const *
    color_space: char

    """
    return _pyift.ImageToMImage(img, color_space)

def MImageToImage(img: "MImage", Imax: "int", band: "int") -> "iftImage *":
    r"""
    MImageToImage(img, Imax, band) -> Image

    Parameters
    ----------
    img: iftMImage const *
    Imax: int
    band: int

    """
    return _pyift.MImageToImage(img, Imax, band)

def Is3DMImage(img: "MImage") -> "bool":
    r"""
    Is3DMImage(img) -> bool

    Parameters
    ----------
    img: iftMImage const *

    """
    return _pyift.Is3DMImage(img)

def ReadMImage(filename: "char const *") -> "iftMImage *":
    r"""
    ReadMImage(filename) -> MImage

    Parameters
    ----------
    filename: char const *

    """
    return _pyift.ReadMImage(filename)

def ReadMImageFromNumPy(*args) -> "iftMImage *":
    r"""
    ReadMImageFromNumPy(npy_path) -> MImage

    Parameters
    ----------
    npy_path: char const *

    """
    return _pyift.ReadMImageFromNumPy(*args)

def WriteMImage(mimg: "MImage", filename: "char const *") -> "void":
    r"""
    WriteMImage(mimg, filename)

    Parameters
    ----------
    mimg: iftMImage *
    filename: char const *

    """
    return _pyift.WriteMImage(mimg, filename)

def WriteMImageAsNumPy(*args) -> "void":
    r"""
    WriteMImageAsNumPy(mimg, npy_path)

    Parameters
    ----------
    mimg: iftMImage const *
    npy_path: char const *

    """
    return _pyift.WriteMImageAsNumPy(*args)

def WriteMImageBands(mimg: "MImage", base_filename: "char *") -> "void":
    r"""
    WriteMImageBands(mimg, base_filename)

    Parameters
    ----------
    mimg: iftMImage *
    base_filename: char *

    """
    return _pyift.WriteMImageBands(mimg, base_filename)

def MImageBasins(img: "MImage", A: "AdjRel") -> "iftImage *":
    r"""
    MImageBasins(img, A) -> Image

    Parameters
    ----------
    img: iftMImage const *
    A: iftAdjRel *

    """
    return _pyift.MImageBasins(img, A)

def MImageGradient(img: "MImage", A: "AdjRel", Imax: "int") -> "iftImage *":
    r"""
    MImageGradient(img, A, Imax) -> Image

    Parameters
    ----------
    img: iftMImage const *
    A: iftAdjRel *
    Imax: int

    """
    return _pyift.MImageGradient(img, A, Imax)

def GridSampling(img: "MImage", mask: "Image", nsamples: "int") -> "iftImage *":
    r"""
    GridSampling(img, mask, nsamples) -> Image

    Parameters
    ----------
    img: iftMImage *
    mask: iftImage *
    nsamples: int

    """
    return _pyift.GridSampling(img, mask, nsamples)

def AltMixedSampling(img: "MImage", mask: "Image", nsamples: "int") -> "iftImage *":
    r"""
    AltMixedSampling(img, mask, nsamples) -> Image

    Parameters
    ----------
    img: iftMImage *
    mask: iftImage *
    nsamples: int

    """
    return _pyift.AltMixedSampling(img, mask, nsamples)

def SelectNSamplesFromMask(img: "MImage", mask1: "Image", nsamples: "int") -> "iftImage *":
    r"""
    SelectNSamplesFromMask(img, mask1, nsamples) -> Image

    Parameters
    ----------
    img: iftMImage *
    mask1: iftImage *
    nsamples: int

    """
    return _pyift.SelectNSamplesFromMask(img, mask1, nsamples)

def ExtractImageFeatures(img: "Image", label_img: "Image", A: "AdjRel", voxel_coord: "bool") -> "iftMImage *":
    r"""
    ExtractImageFeatures(img, label_img, A, voxel_coord) -> MImage

    Parameters
    ----------
    img: iftImage const *
    label_img: iftImage const *
    A: iftAdjRel const *
    voxel_coord: bool

    """
    return _pyift.ExtractImageFeatures(img, label_img, A, voxel_coord)

def KernelTransformMImage(input: "MImage", train_data: "DoubleMatrix", omega: "DoubleMatrix", K: "iftKernelFunction *", param1: "double", param2: "double", scale: "double") -> "iftMImage *":
    r"""
    KernelTransformMImage(input, train_data, omega, K, param1, param2, scale) -> MImage

    Parameters
    ----------
    input: iftMImage const *
    train_data: iftDoubleMatrix const *
    omega: iftDoubleMatrix const *
    K: iftKernelFunction *
    param1: double
    param2: double
    scale: double

    """
    return _pyift.KernelTransformMImage(input, train_data, omega, K, param1, param2, scale)

def ColorQuantization(input: "MImage", lower_bound: "float", upper_bound: "float", bins_per_band: "int") -> "iftMImage *":
    r"""
    ColorQuantization(input, lower_bound, upper_bound, bins_per_band) -> MImage

    Parameters
    ----------
    input: iftMImage const *
    lower_bound: float
    upper_bound: float
    bins_per_band: int

    """
    return _pyift.ColorQuantization(input, lower_bound, upper_bound, bins_per_band)

def MImageCentralize(mimg: "MImage") -> "iftMImage *":
    r"""
    MImageCentralize(mimg) -> MImage

    Parameters
    ----------
    mimg: iftMImage const *

    """
    return _pyift.MImageCentralize(mimg)

def MGaussianFilter(mimg: "MImage", radius: "float", stddev: "float") -> "iftMImage *":
    r"""
    MGaussianFilter(mimg, radius, stddev) -> MImage

    Parameters
    ----------
    mimg: iftMImage const *
    radius: float
    stddev: float

    """
    return _pyift.MGaussianFilter(mimg, radius, stddev)

def BinarySetsNCA(mimg: "MImage", obj: "Set", bkg: "Set", d_out: "int", n_iters: "int", learn_rate: "double") -> "iftMImage *":
    r"""
    BinarySetsNCA(mimg, obj, bkg, d_out, n_iters, learn_rate) -> MImage

    Parameters
    ----------
    mimg: iftMImage const *
    obj: iftSet const *
    bkg: iftSet const *
    d_out: int
    n_iters: int
    learn_rate: double

    """
    return _pyift.BinarySetsNCA(mimg, obj, bkg, d_out, n_iters, learn_rate)

def RescaleMImage(mimg: "MImage", single_max: "bool") -> "void":
    r"""
    RescaleMImage(mimg, single_max)

    Parameters
    ----------
    mimg: iftMImage *
    single_max: bool

    """
    return _pyift.RescaleMImage(mimg, single_max)

def StackGrayImages(*args) -> "iftMImage *":
    r"""
    StackGrayImages(n) -> MImage

    Parameters
    ----------
    n: int

    """
    return _pyift.StackGrayImages(*args)

def MGetVoxelIndex_pyift(s: "MImage", v: "Voxel") -> "int":
    r"""
    MGetVoxelIndex_pyift(s, v) -> int

    Parameters
    ----------
    s: iftMImage *
    v: iftVoxel

    """
    return _pyift.MGetVoxelIndex_pyift(s, v)

def CreateMImageFromNumPy(input: "PyObject *") -> "iftMImage *":
    r"""
    CreateMImageFromNumPy(input) -> MImage

    Parameters
    ----------
    input: PyObject *

    """
    return _pyift.CreateMImageFromNumPy(input)

def LinearStretch(img: "Image", f1: "double", f2: "double", g1: "double", g2: "double") -> "iftImage *":
    r"""
    LinearStretch(img, f1, f2, g1, g2) -> Image

    Parameters
    ----------
    img: iftImage *
    f1: double
    f2: double
    g1: double
    g2: double

    """
    return _pyift.LinearStretch(img, f1, f2, g1, g2)

def Normalize(img: "Image", minval: "double", maxval: "double") -> "iftImage *":
    r"""
    Normalize(img, minval, maxval) -> Image

    Parameters
    ----------
    img: iftImage const *
    minval: double
    maxval: double

    """
    return _pyift.Normalize(img, minval, maxval)

def NormalizeWithNoOutliersInRegion(img: "Image", region: "Image", minval: "int", maxval: "int", perc: "float") -> "iftImage *":
    r"""
    NormalizeWithNoOutliersInRegion(img, region, minval, maxval, perc) -> Image

    Parameters
    ----------
    img: iftImage const *
    region: iftImage const *
    minval: int
    maxval: int
    perc: float

    """
    return _pyift.NormalizeWithNoOutliersInRegion(img, region, minval, maxval, perc)

def NormalizeWithNoOutliers(img: "Image", minval: "int", maxval: "int", perc: "float") -> "iftImage *":
    r"""
    NormalizeWithNoOutliers(img, minval, maxval, perc) -> Image

    Parameters
    ----------
    img: iftImage const *
    minval: int
    maxval: int
    perc: float

    """
    return _pyift.NormalizeWithNoOutliers(img, minval, maxval, perc)

def MatchHistogram(img: "Image", img_mask: "Image", ref: "Image", ref_mask: "Image") -> "iftImage *":
    r"""
    MatchHistogram(img, img_mask, ref, ref_mask) -> Image

    Parameters
    ----------
    img: iftImage const *
    img_mask: iftImage const *
    ref: iftImage const *
    ref_mask: iftImage const *

    """
    return _pyift.MatchHistogram(img, img_mask, ref, ref_mask)

def GaborFilter2D(spec: "MImage", u0: "float", v0: "float", P: "float", x0: "float", y0: "float", a: "float", b: "float", theta: "float") -> "iftMImage *":
    r"""
    GaborFilter2D(spec, u0, v0, P, x0, y0, a, b, theta) -> MImage

    Parameters
    ----------
    spec: iftMImage *
    u0: float
    v0: float
    P: float
    x0: float
    y0: float
    a: float
    b: float
    theta: float

    """
    return _pyift.GaborFilter2D(spec, u0, v0, P, x0, y0, a, b, theta)
class Kernel(object):
    r"""Proxy of C iftKernel struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    A = property(_pyift.Kernel_A_get, _pyift.Kernel_A_set, doc=r"""A""")
    weight = property(_pyift.Kernel_weight_get, _pyift.Kernel_weight_set, doc=r"""weight""")
    __swig_destroy__ = _pyift.delete_Kernel

    def __init__(self):
        r"""__init__(self) -> Kernel"""
        _pyift.Kernel_swiginit(self, _pyift.new_Kernel())

# Register Kernel in _pyift:
_pyift.Kernel_swigregister(Kernel)

class MKernel(object):
    r"""Proxy of C iftMKernel struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    A = property(_pyift.MKernel_A_get, _pyift.MKernel_A_set, doc=r"""A""")
    weight = property(_pyift.MKernel_weight_get, _pyift.MKernel_weight_set, doc=r"""weight""")
    nbands = property(_pyift.MKernel_nbands_get, _pyift.MKernel_nbands_set, doc=r"""nbands""")
    __swig_destroy__ = _pyift.delete_MKernel

    def __init__(self):
        r"""__init__(self) -> MKernel"""
        _pyift.MKernel_swiginit(self, _pyift.new_MKernel())

# Register MKernel in _pyift:
_pyift.MKernel_swigregister(MKernel)

class MMKernel(object):
    r"""Proxy of C iftMMKernel struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    A = property(_pyift.MMKernel_A_get, _pyift.MMKernel_A_set, doc=r"""A""")
    weight = property(_pyift.MMKernel_weight_get, _pyift.MMKernel_weight_set, doc=r"""weight""")
    bias = property(_pyift.MMKernel_bias_get, _pyift.MMKernel_bias_set, doc=r"""bias""")
    nkernels = property(_pyift.MMKernel_nkernels_get, _pyift.MMKernel_nkernels_set, doc=r"""nkernels""")
    nbands = property(_pyift.MMKernel_nbands_get, _pyift.MMKernel_nbands_set, doc=r"""nbands""")
    W = property(_pyift.MMKernel_W_get, _pyift.MMKernel_W_set, doc=r"""W""")
    mean = property(_pyift.MMKernel_mean_get, _pyift.MMKernel_mean_set, doc=r"""mean""")
    __swig_destroy__ = _pyift.delete_MMKernel

    def __init__(self):
        r"""__init__(self) -> MMKernel"""
        _pyift.MMKernel_swiginit(self, _pyift.new_MMKernel())

# Register MMKernel in _pyift:
_pyift.MMKernel_swigregister(MMKernel)


def RandomMMKernel(A: "AdjRel", nbands: "int", nkernels: "int") -> "iftMMKernel *":
    r"""
    RandomMMKernel(A, nbands, nkernels) -> MMKernel

    Parameters
    ----------
    A: iftAdjRel *
    nbands: int
    nkernels: int

    """
    return _pyift.RandomMMKernel(A, nbands, nkernels)

def GaussianKernel(radius: "float", stdev: "float") -> "iftKernel *":
    r"""
    GaussianKernel(radius, stdev) -> Kernel

    Parameters
    ----------
    radius: float
    stdev: float

    """
    return _pyift.GaussianKernel(radius, stdev)

def GaussianKernel2D(radius: "float", stdev: "float") -> "iftKernel *":
    r"""
    GaussianKernel2D(radius, stdev) -> Kernel

    Parameters
    ----------
    radius: float
    stdev: float

    """
    return _pyift.GaussianKernel2D(radius, stdev)

def SobelXKernel() -> "iftKernel *":
    r"""SobelXKernel() -> Kernel"""
    return _pyift.SobelXKernel()

def SobelYKernel() -> "iftKernel *":
    r"""SobelYKernel() -> Kernel"""
    return _pyift.SobelYKernel()

def SobelZKernel() -> "iftKernel *":
    r"""SobelZKernel() -> Kernel"""
    return _pyift.SobelZKernel()

def SobelXKernel2D() -> "iftKernel *":
    r"""SobelXKernel2D() -> Kernel"""
    return _pyift.SobelXKernel2D()

def SobelYKernel2D() -> "iftKernel *":
    r"""SobelYKernel2D() -> Kernel"""
    return _pyift.SobelYKernel2D()

def Gabor2D(gw: "float", gh: "float", gx0: "float", gy0: "float", wfreq: "float", worient: "float", wphase: "float", A: "AdjRel") -> "iftKernel *":
    r"""
    Gabor2D(gw, gh, gx0, gy0, wfreq, worient, wphase, A) -> Kernel

    Parameters
    ----------
    gw: float
    gh: float
    gx0: float
    gy0: float
    wfreq: float
    worient: float
    wphase: float
    A: iftAdjRel *

    """
    return _pyift.Gabor2D(gw, gh, gx0, gy0, wfreq, worient, wphase, A)

def Extract3DLBPTOPFeatsForLabels(img: "Image", label_img: "Image", n_bins: "int", normalize_histograms: "bool") -> "iftMatrix *":
    r"""
    Extract3DLBPTOPFeatsForLabels(img, label_img, n_bins, normalize_histograms) -> Matrix

    Parameters
    ----------
    img: iftImage const *
    label_img: iftImage const *
    n_bins: int
    normalize_histograms: bool

    """
    return _pyift.Extract3DLBPTOPFeatsForLabels(img, label_img, n_bins, normalize_histograms)

def ExtractVLBPFeatsForLabels(img: "Image", label_img: "Image", n_bins: "int", normalize_hist: "bool") -> "iftMatrix *":
    r"""
    ExtractVLBPFeatsForLabels(img, label_img, n_bins, normalize_hist) -> Matrix

    Parameters
    ----------
    img: iftImage const *
    label_img: iftImage const *
    n_bins: int
    normalize_hist: bool

    """
    return _pyift.ExtractVLBPFeatsForLabels(img, label_img, n_bins, normalize_hist)

def ExtractBICForLabels(img: "Image", label_img: "Image", n_bins_per_channel: "int") -> "iftMatrix *":
    r"""
    ExtractBICForLabels(img, label_img, n_bins_per_channel) -> Matrix

    Parameters
    ----------
    img: iftImage const *
    label_img: iftImage const *
    n_bins_per_channel: int

    """
    return _pyift.ExtractBICForLabels(img, label_img, n_bins_per_channel)
IFT_UNKNOWN = _pyift.IFT_UNKNOWN

IFT_TEST = _pyift.IFT_TEST

IFT_TRAIN = _pyift.IFT_TRAIN

IFT_OUTLIER = _pyift.IFT_OUTLIER

IFT_ERROR = _pyift.IFT_ERROR

IFT_ARTIFICIAL = _pyift.IFT_ARTIFICIAL

IFT_SUPERVISED = _pyift.IFT_SUPERVISED

IFT_LABELPROPAGATED = _pyift.IFT_LABELPROPAGATED

IFT_PROTOTYPE = _pyift.IFT_PROTOTYPE

IFT_CENTROID = _pyift.IFT_CENTROID

IFT_ALL = _pyift.IFT_ALL

IFT_WEIGHT = _pyift.IFT_WEIGHT

IFT_LABEL = _pyift.IFT_LABEL

IFT_CLASS = _pyift.IFT_CLASS

IFT_GROUP = _pyift.IFT_GROUP

IFT_POINT = _pyift.IFT_POINT

IFT_POSITIVE_CLASS = _pyift.IFT_POSITIVE_CLASS

IFT_NEGATIVE_CLASS = _pyift.IFT_NEGATIVE_CLASS

class Sampler(object):
    r"""Proxy of C iftSampler struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    status = property(_pyift.Sampler_status_get, _pyift.Sampler_status_set, doc=r"""status""")
    niters = property(_pyift.Sampler_niters_get, _pyift.Sampler_niters_set, doc=r"""niters""")
    nsamples = property(_pyift.Sampler_nsamples_get, _pyift.Sampler_nsamples_set, doc=r"""nsamples""")
    __swig_destroy__ = _pyift.delete_Sampler

    def __init__(self):
        r"""__init__(self) -> Sampler"""
        _pyift.Sampler_swiginit(self, _pyift.new_Sampler())

# Register Sampler in _pyift:
_pyift.Sampler_swigregister(Sampler)

class Sample(object):
    r"""Proxy of C iftSample struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    feat = property(_pyift.Sample_feat_get, _pyift.Sample_feat_set, doc=r"""feat""")
    projection = property(_pyift.Sample_projection_get, _pyift.Sample_projection_set, doc=r"""projection""")
    truelabel = property(_pyift.Sample_truelabel_get, _pyift.Sample_truelabel_set, doc=r"""truelabel""")
    label = property(_pyift.Sample_label_get, _pyift.Sample_label_set, doc=r"""label""")
    id = property(_pyift.Sample_id_get, _pyift.Sample_id_set, doc=r"""id""")
    group = property(_pyift.Sample_group_get, _pyift.Sample_group_set, doc=r"""group""")
    isSupervised = property(_pyift.Sample_isSupervised_get, _pyift.Sample_isSupervised_set, doc=r"""isSupervised""")
    isLabelPropagated = property(_pyift.Sample_isLabelPropagated_get, _pyift.Sample_isLabelPropagated_set, doc=r"""isLabelPropagated""")
    numberTimesChecked = property(_pyift.Sample_numberTimesChecked_get, _pyift.Sample_numberTimesChecked_set, doc=r"""numberTimesChecked""")
    weight = property(_pyift.Sample_weight_get, _pyift.Sample_weight_set, doc=r"""weight""")
    status = property(_pyift.Sample_status_get, _pyift.Sample_status_set, doc=r"""status""")

    def __init__(self):
        r"""__init__(self) -> Sample"""
        _pyift.Sample_swiginit(self, _pyift.new_Sample())
    __swig_destroy__ = _pyift.delete_Sample

# Register Sample in _pyift:
_pyift.Sample_swigregister(Sample)

IFT_REF_DATA_NULL = _pyift.IFT_REF_DATA_NULL

IFT_REF_DATA_IMAGE = _pyift.IFT_REF_DATA_IMAGE

IFT_REF_DATA_FIMAGE = _pyift.IFT_REF_DATA_FIMAGE

IFT_REF_DATA_MIMAGE = _pyift.IFT_REF_DATA_MIMAGE

IFT_REF_DATA_FILESET = _pyift.IFT_REF_DATA_FILESET

IFT_REF_DATA_MMKERNEL = _pyift.IFT_REF_DATA_MMKERNEL

IFT_REF_DATA_CSV = _pyift.IFT_REF_DATA_CSV

class DataSet(object):
    r"""Proxy of C iftDataSet struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sample = property(_pyift.DataSet_sample_get, _pyift.DataSet_sample_set, doc=r"""sample""")
    capacity = property(_pyift.DataSet_capacity_get, _pyift.DataSet_capacity_set, doc=r"""capacity""")
    nfeats = property(_pyift.DataSet_nfeats_get, _pyift.DataSet_nfeats_set, doc=r"""nfeats""")
    nsamples = property(_pyift.DataSet_nsamples_get, _pyift.DataSet_nsamples_set, doc=r"""nsamples""")
    ngroups = property(_pyift.DataSet_ngroups_get, _pyift.DataSet_ngroups_set, doc=r"""ngroups""")
    nclasses = property(_pyift.DataSet_nclasses_get, _pyift.DataSet_nclasses_set, doc=r"""nclasses""")
    ntrainsamples = property(_pyift.DataSet_ntrainsamples_get, _pyift.DataSet_ntrainsamples_set, doc=r"""ntrainsamples""")
    ArcWeight = property(_pyift.DataSet_ArcWeight_get, _pyift.DataSet_ArcWeight_set, doc=r"""ArcWeight""")
    function_number = property(_pyift.DataSet_function_number_get, _pyift.DataSet_function_number_set, doc=r"""function_number""")
    alpha = property(_pyift.DataSet_alpha_get, _pyift.DataSet_alpha_set, doc=r"""alpha""")
    ref_data_type = property(_pyift.DataSet_ref_data_type_get, _pyift.DataSet_ref_data_type_set, doc=r"""ref_data_type""")
    ref_data = property(_pyift.DataSet_ref_data_get, _pyift.DataSet_ref_data_set, doc=r"""ref_data""")
    fsp = property(_pyift.DataSet_fsp_get, _pyift.DataSet_fsp_set, doc=r"""fsp""")
    data = property(_pyift.DataSet_data_get, _pyift.DataSet_data_set, doc=r"""data""")
    projection = property(_pyift.DataSet_projection_get, _pyift.DataSet_projection_set, doc=r"""projection""")
    __swig_destroy__ = _pyift.delete_DataSet

    def GetData(self) -> "PyObject *":
        r"""GetData(self) -> PyObject *"""
        return _pyift.DataSet_GetData(self)

    def GetProjection(self) -> "PyObject *":
        r"""GetProjection(self) -> PyObject *"""
        return _pyift.DataSet_GetProjection(self)

    def GetTrueLabels(self) -> "PyObject *":
        r"""GetTrueLabels(self) -> PyObject *"""
        return _pyift.DataSet_GetTrueLabels(self)

    def GetLabels(self) -> "PyObject *":
        r"""GetLabels(self) -> PyObject *"""
        return _pyift.DataSet_GetLabels(self)

    def GetIds(self) -> "PyObject *":
        r"""GetIds(self) -> PyObject *"""
        return _pyift.DataSet_GetIds(self)

    def GetGroups(self) -> "PyObject *":
        r"""GetGroups(self) -> PyObject *"""
        return _pyift.DataSet_GetGroups(self)

    def GetIsSupervised(self) -> "PyObject *":
        r"""GetIsSupervised(self) -> PyObject *"""
        return _pyift.DataSet_GetIsSupervised(self)

    def GetIsLabelPropagated(self) -> "PyObject *":
        r"""GetIsLabelPropagated(self) -> PyObject *"""
        return _pyift.DataSet_GetIsLabelPropagated(self)

    def GetWeights(self) -> "PyObject *":
        r"""GetWeights(self) -> PyObject *"""
        return _pyift.DataSet_GetWeights(self)

    def GetStatus(self) -> "PyObject *":
        r"""GetStatus(self) -> PyObject *"""
        return _pyift.DataSet_GetStatus(self)

    def GetAlphas(self) -> "PyObject *":
        r"""GetAlphas(self) -> PyObject *"""
        return _pyift.DataSet_GetAlphas(self)

    def GetRefData(self) -> "PyObject *":
        r"""GetRefData(self) -> PyObject *"""
        return _pyift.DataSet_GetRefData(self)

    def SetRefData(self, list: "PyObject *") -> "void":
        r"""
        SetRefData(self, list)

        Parameters
        ----------
        list: PyObject *

        """
        return _pyift.DataSet_SetRefData(self, list)

    def SetTrueLabels(self, in_npy: "PyObject *") -> "void":
        r"""
        SetTrueLabels(self, in_npy)

        Parameters
        ----------
        in_npy: PyObject *

        """
        return _pyift.DataSet_SetTrueLabels(self, in_npy)

    def SetId(self, in_npy: "PyObject *") -> "void":
        r"""
        SetId(self, in_npy)

        Parameters
        ----------
        in_npy: PyObject *

        """
        return _pyift.DataSet_SetId(self, in_npy)

    def SetLabels(self, in_npy: "PyObject *") -> "void":
        r"""
        SetLabels(self, in_npy)

        Parameters
        ----------
        in_npy: PyObject *

        """
        return _pyift.DataSet_SetLabels(self, in_npy)

    def SetWeight(self, input: "PyObject *") -> "void":
        r"""
        SetWeight(self, input)

        Parameters
        ----------
        input: PyObject *

        """
        return _pyift.DataSet_SetWeight(self, input)

    def SetGroups(self, in_npy: "PyObject *") -> "void":
        r"""
        SetGroups(self, in_npy)

        Parameters
        ----------
        in_npy: PyObject *

        """
        return _pyift.DataSet_SetGroups(self, in_npy)

    def SetGroupsFromImage(self, img: "Image", increment: "bool") -> "void":
        r"""
        SetGroupsFromImage(self, img, increment)

        Parameters
        ----------
        img: iftImage const *
        increment: bool

        """
        return _pyift.DataSet_SetGroupsFromImage(self, img, increment)

    def SetNClasses(self, n: "int") -> "void":
        r"""
        SetNClasses(self, n)

        Parameters
        ----------
        n: int

        """
        return _pyift.DataSet_SetNClasses(self, n)

    def SetData(self, input: "PyObject *") -> "void":
        r"""
        SetData(self, input)

        Parameters
        ----------
        input: PyObject *

        """
        return _pyift.DataSet_SetData(self, input)

    def SetStatus(self, in_npy: "PyObject *") -> "void":
        r"""
        SetStatus(self, in_npy)

        Parameters
        ----------
        in_npy: PyObject *

        """
        return _pyift.DataSet_SetStatus(self, in_npy)

    def SetNTrainSamples(self, n: "int") -> "void":
        r"""
        SetNTrainSamples(self, n)

        Parameters
        ----------
        n: int

        """
        return _pyift.DataSet_SetNTrainSamples(self, n)

    def __init__(self):
        r"""__init__(self) -> DataSet"""
        _pyift.DataSet_swiginit(self, _pyift.new_DataSet())

# Register DataSet in _pyift:
_pyift.DataSet_swigregister(DataSet)


def KFold(nsamples: "int", k: "int") -> "iftSampler *":
    r"""
    KFold(nsamples, k) -> Sampler

    Parameters
    ----------
    nsamples: int
    k: int

    """
    return _pyift.KFold(nsamples, k)

def InverseKFold(nsamples: "int", k: "int") -> "iftSampler *":
    r"""
    InverseKFold(nsamples, k) -> Sampler

    Parameters
    ----------
    nsamples: int
    k: int

    """
    return _pyift.InverseKFold(nsamples, k)

def RandomSubsampling(nsamples: "int", n: "int", ntrain: "int") -> "iftSampler *":
    r"""
    RandomSubsampling(nsamples, n, ntrain) -> Sampler

    Parameters
    ----------
    nsamples: int
    n: int
    ntrain: int

    """
    return _pyift.RandomSubsampling(nsamples, n, ntrain)

def BalancedRandomSubsampling(labels: "int const *", n_samples: "int", n_iters: "int", n_train: "int") -> "iftSampler *":
    r"""
    BalancedRandomSubsampling(labels, n_samples, n_iters, n_train) -> Sampler

    Parameters
    ----------
    labels: int const *
    n_samples: int
    n_iters: int
    n_train: int

    """
    return _pyift.BalancedRandomSubsampling(labels, n_samples, n_iters, n_train)

def DataSetSampling(Z: "DataSet", sampler: "Sampler", iteration: "int") -> "void":
    r"""
    DataSetSampling(Z, sampler, iteration)

    Parameters
    ----------
    Z: iftDataSet *
    sampler: iftSampler const *
    iteration: int

    """
    return _pyift.DataSetSampling(Z, sampler, iteration)

def GetDataSetTrueLabels(dataset: "DataSet") -> "iftIntArray *":
    r"""
    GetDataSetTrueLabels(dataset) -> IntArray

    Parameters
    ----------
    dataset: iftDataSet const *

    """
    return _pyift.GetDataSetTrueLabels(dataset)

def CreateDataSet(nsamples: "int", nfeats: "int") -> "iftDataSet *":
    r"""
    CreateDataSet(nsamples, nfeats) -> DataSet

    Parameters
    ----------
    nsamples: int
    nfeats: int

    """
    return _pyift.CreateDataSet(nsamples, nfeats)

def CopyDataSet(Z: "DataSet", copy_feats: "bool") -> "iftDataSet *":
    r"""
    CopyDataSet(Z, copy_feats) -> DataSet

    Parameters
    ----------
    Z: iftDataSet const *
    copy_feats: bool

    """
    return _pyift.CopyDataSet(Z, copy_feats)

def DataSetObjectMap(Z: "DataSet", comp: "Image", max_val: "int", label: "int") -> "iftImage *":
    r"""
    DataSetObjectMap(Z, comp, max_val, label) -> Image

    Parameters
    ----------
    Z: iftDataSet const *
    comp: iftImage const *
    max_val: int
    label: int

    """
    return _pyift.DataSetObjectMap(Z, comp, max_val, label)

def SetRefData(Z: "DataSet", ref_data: "void const *", ref_data_type: "iftRefDataType") -> "void":
    r"""
    SetRefData(Z, ref_data, ref_data_type)

    Parameters
    ----------
    Z: iftDataSet *
    ref_data: void const *
    ref_data_type: enum iftRefDataType

    """
    return _pyift.SetRefData(Z, ref_data, ref_data_type)

def ExtractGroup(Z: "DataSet", group: "int") -> "iftDataSet *":
    r"""
    ExtractGroup(Z, group) -> DataSet

    Parameters
    ----------
    Z: iftDataSet *
    group: int

    """
    return _pyift.ExtractGroup(Z, group)

def ExtractSamples(Z: "DataSet", status: "iftSampleStatus") -> "iftDataSet *":
    r"""
    ExtractSamples(Z, status) -> DataSet

    Parameters
    ----------
    Z: iftDataSet const *
    status: enum iftSampleStatus

    """
    return _pyift.ExtractSamples(Z, status)

def DataSetToLabelImage(Z: "DataSet", comp: "Image", decrement_labels: "bool", label_type: "iftFeatureLabel") -> "iftImage *":
    r"""
    DataSetToLabelImage(Z, comp, decrement_labels, label_type) -> Image

    Parameters
    ----------
    Z: iftDataSet const *
    comp: iftImage const *
    decrement_labels: bool
    label_type: enum iftFeatureLabel

    """
    return _pyift.DataSetToLabelImage(Z, comp, decrement_labels, label_type)

def DataSetClusterInformationToLabelImage(Z: "DataSet", comp: "Image", decrement_groups: "bool") -> "iftImage *":
    r"""
    DataSetClusterInformationToLabelImage(Z, comp, decrement_groups) -> Image

    Parameters
    ----------
    Z: iftDataSet const *
    comp: iftImage const *
    decrement_groups: bool

    """
    return _pyift.DataSetClusterInformationToLabelImage(Z, comp, decrement_groups)

def SetStatus(Z: "DataSet", status: "iftSampleStatus") -> "void":
    r"""
    SetStatus(Z, status)

    Parameters
    ----------
    Z: iftDataSet *
    status: enum iftSampleStatus

    """
    return _pyift.SetStatus(Z, status)

def AddStatus(Z: "DataSet", status: "iftSampleStatus") -> "void":
    r"""
    AddStatus(Z, status)

    Parameters
    ----------
    Z: iftDataSet *
    status: enum iftSampleStatus

    """
    return _pyift.AddStatus(Z, status)

def RemoveStatus(Z: "DataSet", status: "iftSampleStatus") -> "void":
    r"""
    RemoveStatus(Z, status)

    Parameters
    ----------
    Z: iftDataSet *
    status: enum iftSampleStatus

    """
    return _pyift.RemoveStatus(Z, status)

def MImageToDataSet(mimg: "MImage", label_img: "Image", coord_scale: "float") -> "iftDataSet *":
    r"""
    MImageToDataSet(mimg, label_img, coord_scale) -> DataSet

    Parameters
    ----------
    mimg: iftMImage const *
    label_img: iftImage const *
    coord_scale: float

    """
    return _pyift.MImageToDataSet(mimg, label_img, coord_scale)

def SplitDataSetAt(Z: "DataSet", sample_idx: "int", Z1: "iftDataSet **", Z2: "iftDataSet **") -> "void":
    r"""
    SplitDataSetAt(Z, sample_idx, Z1, Z2)

    Parameters
    ----------
    Z: iftDataSet const *
    sample_idx: int
    Z1: iftDataSet **
    Z2: iftDataSet **

    """
    return _pyift.SplitDataSetAt(Z, sample_idx, Z1, Z2)

def WriteDataSet(*args) -> "void":
    r"""
    WriteDataSet(Z, pathname)

    Parameters
    ----------
    Z: iftDataSet const *
    pathname: char const *

    """
    return _pyift.WriteDataSet(*args)

def ReadDataSet(*args) -> "iftDataSet *":
    r"""
    ReadDataSet(pathname) -> DataSet

    Parameters
    ----------
    pathname: char const *

    """
    return _pyift.ReadDataSet(*args)

def LabelDataSetFromSeeds(Z: "DataSet", seeds: "LabeledSet", region: "Image") -> "void":
    r"""
    LabelDataSetFromSeeds(Z, seeds, region)

    Parameters
    ----------
    Z: iftDataSet *
    seeds: iftLabeledSet *
    region: iftImage *

    """
    return _pyift.LabelDataSetFromSeeds(Z, seeds, region)

def SelectDataSetClassesByCluster(Z: "DataSet", threshold: "float") -> "void":
    r"""
    SelectDataSetClassesByCluster(Z, threshold)

    Parameters
    ----------
    Z: iftDataSet *
    threshold: float

    """
    return _pyift.SelectDataSetClassesByCluster(Z, threshold)

def BoundingBoxArrayToDataSet(img: "Image", bb_ary: "BoundingBoxArray", n_feats: "int") -> "iftDataSet *":
    r"""
    BoundingBoxArrayToDataSet(img, bb_ary, n_feats) -> DataSet

    Parameters
    ----------
    img: iftImage const *
    bb_ary: iftBoundingBoxArray const *
    n_feats: int

    """
    return _pyift.BoundingBoxArrayToDataSet(img, bb_ary, n_feats)

def PatchesFromSuperpixels(input_dir: "char *", output: "char *", nsuperpixels: "int", patch_size: "int") -> "iftDataSet *":
    r"""
    PatchesFromSuperpixels(input_dir, output, nsuperpixels, patch_size) -> DataSet

    Parameters
    ----------
    input_dir: char *
    output: char *
    nsuperpixels: int
    patch_size: int

    """
    return _pyift.PatchesFromSuperpixels(input_dir, output, nsuperpixels, patch_size)

def DataSetFromAllSeeds(markers_dir: "char *", mimages_dir: "char *", A: "AdjRel") -> "iftDataSet *":
    r"""
    DataSetFromAllSeeds(markers_dir, mimages_dir, A) -> DataSet

    Parameters
    ----------
    markers_dir: char *
    mimages_dir: char *
    A: iftAdjRel *

    """
    return _pyift.DataSetFromAllSeeds(markers_dir, mimages_dir, A)

def CreateDataSetFromNumPy(in_ary: "PyObject *", in_truelabel: "PyObject *") -> "iftDataSet *":
    r"""
    CreateDataSetFromNumPy(in_ary, in_truelabel) -> DataSet

    Parameters
    ----------
    in_ary: PyObject *
    in_truelabel: PyObject *

    """
    return _pyift.CreateDataSetFromNumPy(in_ary, in_truelabel)

def WeightedL2NormPtr() -> "float (*)(float *,float *,float *,int)":
    r"""WeightedL2NormPtr() -> float (*)(float *,float *,float *,int)"""
    return _pyift.WeightedL2NormPtr()

def Add(img1: "Image", img2: "Image") -> "iftImage *":
    r"""
    Add(img1, img2) -> Image

    Parameters
    ----------
    img1: iftImage const *
    img2: iftImage const *

    """
    return _pyift.Add(img1, img2)

def Sub(img1: "Image", img2: "Image") -> "iftImage *":
    r"""
    Sub(img1, img2) -> Image

    Parameters
    ----------
    img1: iftImage const *
    img2: iftImage const *

    """
    return _pyift.Sub(img1, img2)

def SubReLU(img1: "Image", img2: "Image") -> "iftImage *":
    r"""
    SubReLU(img1, img2) -> Image

    Parameters
    ----------
    img1: iftImage const *
    img2: iftImage const *

    """
    return _pyift.SubReLU(img1, img2)

def AbsSub(img1: "Image", img2: "Image") -> "iftImage *":
    r"""
    AbsSub(img1, img2) -> Image

    Parameters
    ----------
    img1: iftImage const *
    img2: iftImage const *

    """
    return _pyift.AbsSub(img1, img2)

def Intersec(label_img1: "Image", label_img2: "Image") -> "iftImage *":
    r"""
    Intersec(label_img1, label_img2) -> Image

    Parameters
    ----------
    label_img1: iftImage const *
    label_img2: iftImage const *

    """
    return _pyift.Intersec(label_img1, label_img2)

def And(img1: "Image", img2: "Image") -> "iftImage *":
    r"""
    And(img1, img2) -> Image

    Parameters
    ----------
    img1: iftImage const *
    img2: iftImage const *

    """
    return _pyift.And(img1, img2)

def Or(img1: "Image", img2: "Image") -> "iftImage *":
    r"""
    Or(img1, img2) -> Image

    Parameters
    ----------
    img1: iftImage const *
    img2: iftImage const *

    """
    return _pyift.Or(img1, img2)

def Mult(img1: "Image", img2: "Image") -> "iftImage *":
    r"""
    Mult(img1, img2) -> Image

    Parameters
    ----------
    img1: iftImage const *
    img2: iftImage const *

    """
    return _pyift.Mult(img1, img2)

def MultByIntScalar(img: "Image", scalar: "int") -> "iftImage *":
    r"""
    MultByIntScalar(img, scalar) -> Image

    Parameters
    ----------
    img: iftImage const *
    scalar: int

    """
    return _pyift.MultByIntScalar(img, scalar)

def Abs(img: "Image") -> "iftImage *":
    r"""
    Abs(img) -> Image

    Parameters
    ----------
    img: iftImage const *

    """
    return _pyift.Abs(img)

def Xor(img1: "Image", img2: "Image") -> "iftImage *":
    r"""
    Xor(img1, img2) -> Image

    Parameters
    ----------
    img1: iftImage const *
    img2: iftImage const *

    """
    return _pyift.Xor(img1, img2)

def Complement(img: "Image") -> "iftImage *":
    r"""
    Complement(img) -> Image

    Parameters
    ----------
    img: iftImage const *

    """
    return _pyift.Complement(img)

def ReLUImage(img: "Image") -> "iftImage *":
    r"""
    ReLUImage(img) -> Image

    Parameters
    ----------
    img: iftImage const *

    """
    return _pyift.ReLUImage(img)

def Mask(img: "Image", mask: "Image") -> "iftImage *":
    r"""
    Mask(img, mask) -> Image

    Parameters
    ----------
    img: iftImage const *
    mask: iftImage const *

    """
    return _pyift.Mask(img, mask)

def Binarize(label_img: "Image") -> "iftImage *":
    r"""
    Binarize(label_img) -> Image

    Parameters
    ----------
    label_img: iftImage const *

    """
    return _pyift.Binarize(label_img)

def AddValue(img: "Image", val: "int") -> "iftImage *":
    r"""
    AddValue(img, val) -> Image

    Parameters
    ----------
    img: iftImage const *
    val: int

    """
    return _pyift.AddValue(img, val)

def BinaryFrom1To255(bin: "Image") -> "iftImage *":
    r"""
    BinaryFrom1To255(bin) -> Image

    Parameters
    ----------
    bin: iftImage const *

    """
    return _pyift.BinaryFrom1To255(bin)

def MeanValue(img: "Image", mask: "Image") -> "float":
    r"""
    MeanValue(img, mask) -> float

    Parameters
    ----------
    img: iftImage const *
    mask: iftImage *

    """
    return _pyift.MeanValue(img, mask)

def RoundFImage(fimg: "FImage") -> "iftImage *":
    r"""
    RoundFImage(fimg) -> Image

    Parameters
    ----------
    fimg: iftFImage const *

    """
    return _pyift.RoundFImage(fimg)

def LinearFilter(img: "Image", K: "Kernel") -> "iftImage *":
    r"""
    LinearFilter(img, K) -> Image

    Parameters
    ----------
    img: iftImage const *
    K: iftKernel *

    """
    return _pyift.LinearFilter(img, K)

def LinearFilterInRegion(img: "Image", mask: "Image", K: "Kernel") -> "iftImage *":
    r"""
    LinearFilterInRegion(img, mask, K) -> Image

    Parameters
    ----------
    img: iftImage *
    mask: iftImage *
    K: iftKernel *

    """
    return _pyift.LinearFilterInRegion(img, mask, K)

def FastLinearFilter(img: "Image", K: "Kernel", crop: "char") -> "iftImage *":
    r"""
    FastLinearFilter(img, K, crop) -> Image

    Parameters
    ----------
    img: iftImage *
    K: iftKernel *
    crop: char

    """
    return _pyift.FastLinearFilter(img, K, crop)

def FLinearFilter(img: "FImage", K: "Kernel") -> "iftFImage *":
    r"""
    FLinearFilter(img, K) -> FImage

    Parameters
    ----------
    img: iftFImage *
    K: iftKernel *

    """
    return _pyift.FLinearFilter(img, K)

def FLinearFilterInRegion(img: "FImage", mask: "Image", K: "Kernel") -> "iftFImage *":
    r"""
    FLinearFilterInRegion(img, mask, K) -> FImage

    Parameters
    ----------
    img: iftFImage *
    mask: iftImage *
    K: iftKernel *

    """
    return _pyift.FLinearFilterInRegion(img, mask, K)

def FastFLinearFilter(img: "FImage", K: "Kernel", crop: "char") -> "iftFImage *":
    r"""
    FastFLinearFilter(img, K, crop) -> FImage

    Parameters
    ----------
    img: iftFImage *
    K: iftKernel *
    crop: char

    """
    return _pyift.FastFLinearFilter(img, K, crop)

def MLinearFilter(img: "MImage", K: "MKernel") -> "iftMImage *":
    r"""
    MLinearFilter(img, K) -> MImage

    Parameters
    ----------
    img: iftMImage *
    K: iftMKernel *

    """
    return _pyift.MLinearFilter(img, K)

def MMLinearFilter(img: "MImage", k_bank: "MMKernel") -> "iftMImage *":
    r"""
    MMLinearFilter(img, k_bank) -> MImage

    Parameters
    ----------
    img: iftMImage *
    k_bank: iftMMKernel *

    """
    return _pyift.MMLinearFilter(img, k_bank)

def MedianFilter(img: "Image", Ain: "AdjRel") -> "iftImage *":
    r"""
    MedianFilter(img, Ain) -> Image

    Parameters
    ----------
    img: iftImage const *
    Ain: iftAdjRel *

    """
    return _pyift.MedianFilter(img, Ain)

def MeanFilter(img: "Image", Ain: "AdjRel") -> "iftImage *":
    r"""
    MeanFilter(img, Ain) -> Image

    Parameters
    ----------
    img: iftImage const *
    Ain: iftAdjRel const *

    """
    return _pyift.MeanFilter(img, Ain)

def MMedianFilter(img: "MImage", A: "AdjRel") -> "iftMImage *":
    r"""
    MMedianFilter(img, A) -> MImage

    Parameters
    ----------
    img: iftMImage *
    A: iftAdjRel *

    """
    return _pyift.MMedianFilter(img, A)

def ModaFilter(img: "Image", A: "AdjRel") -> "iftImage *":
    r"""
    ModaFilter(img, A) -> Image

    Parameters
    ----------
    img: iftImage *
    A: iftAdjRel *

    """
    return _pyift.ModaFilter(img, A)

def SobelGradientMagnitude(img: "Image") -> "iftImage *":
    r"""
    SobelGradientMagnitude(img) -> Image

    Parameters
    ----------
    img: iftImage *

    """
    return _pyift.SobelGradientMagnitude(img)

def ImageToMatrix(img: "Image", F: "iftFastAdjRel *", crop: "char") -> "iftMatrix *":
    r"""
    ImageToMatrix(img, F, crop) -> Matrix

    Parameters
    ----------
    img: iftImage *
    F: iftFastAdjRel *
    crop: char

    """
    return _pyift.ImageToMatrix(img, F, crop)

def ImageAdjToMatrix(img: "Image", A: "AdjRel") -> "iftMatrix *":
    r"""
    ImageAdjToMatrix(img, A) -> Matrix

    Parameters
    ----------
    img: iftImage *
    A: iftAdjRel *

    """
    return _pyift.ImageAdjToMatrix(img, A)

def MatrixToImage(M: "Matrix", xsize: "int", ysize: "int", zsize: "int") -> "iftImage *":
    r"""
    MatrixToImage(M, xsize, ysize, zsize) -> Image

    Parameters
    ----------
    M: iftMatrix *
    xsize: int
    ysize: int
    zsize: int

    """
    return _pyift.MatrixToImage(M, xsize, ysize, zsize)

def FImageToMatrix(img: "FImage", F: "iftFastAdjRel *", crop: "char") -> "iftMatrix *":
    r"""
    FImageToMatrix(img, F, crop) -> Matrix

    Parameters
    ----------
    img: iftFImage *
    F: iftFastAdjRel *
    crop: char

    """
    return _pyift.FImageToMatrix(img, F, crop)

def MatrixToFImage(M: "Matrix", xsize: "int", ysize: "int", zsize: "int") -> "iftFImage *":
    r"""
    MatrixToFImage(M, xsize, ysize, zsize) -> FImage

    Parameters
    ----------
    M: iftMatrix *
    xsize: int
    ysize: int
    zsize: int

    """
    return _pyift.MatrixToFImage(M, xsize, ysize, zsize)

def MImageToMatrix(img: "MImage", F: "iftFastAdjRel *") -> "iftMatrix *":
    r"""
    MImageToMatrix(img, F) -> Matrix

    Parameters
    ----------
    img: iftMImage *
    F: iftFastAdjRel *

    """
    return _pyift.MImageToMatrix(img, F)

def MatrixToMImage(M: "Matrix", xsize: "int", ysize: "int", zsize: "int", nbands: "int", band_orientation: "char") -> "iftMImage *":
    r"""
    MatrixToMImage(M, xsize, ysize, zsize, nbands, band_orientation) -> MImage

    Parameters
    ----------
    M: iftMatrix *
    xsize: int
    ysize: int
    zsize: int
    nbands: int
    band_orientation: char

    """
    return _pyift.MatrixToMImage(M, xsize, ysize, zsize, nbands, band_orientation)

def MatrixToMImageArray(M: "Matrix", nImgs: "int", xsize: "int", ysize: "int", zsize: "int", nbands: "int", band_orientation: "char") -> "iftMImageArray *":
    r"""
    MatrixToMImageArray(M, nImgs, xsize, ysize, zsize, nbands, band_orientation) -> MImageArray

    Parameters
    ----------
    M: iftMatrix *
    nImgs: int
    xsize: int
    ysize: int
    zsize: int
    nbands: int
    band_orientation: char

    """
    return _pyift.MatrixToMImageArray(M, nImgs, xsize, ysize, zsize, nbands, band_orientation)

def MImageToFeatureMatrix(mimg: "MImage", A: "AdjRel", fill_band_with: "float *") -> "iftMatrix *":
    r"""
    MImageToFeatureMatrix(mimg, A, fill_band_with) -> Matrix

    Parameters
    ----------
    mimg: iftMImage *
    A: iftAdjRel *
    fill_band_with: float *

    """
    return _pyift.MImageToFeatureMatrix(mimg, A, fill_band_with)

def MImageArrayToFeatureMatrix(mimgArray: "MImageArray", A: "AdjRel") -> "iftMatrix *":
    r"""
    MImageArrayToFeatureMatrix(mimgArray, A) -> Matrix

    Parameters
    ----------
    mimgArray: iftMImageArray *
    A: iftAdjRel *

    """
    return _pyift.MImageArrayToFeatureMatrix(mimgArray, A)

def KernelToMatrix(K: "Kernel") -> "iftMatrix *":
    r"""
    KernelToMatrix(K) -> Matrix

    Parameters
    ----------
    K: iftKernel *

    """
    return _pyift.KernelToMatrix(K)

def MKernelToMatrix(K: "MKernel") -> "iftMatrix *":
    r"""
    MKernelToMatrix(K) -> Matrix

    Parameters
    ----------
    K: iftMKernel *

    """
    return _pyift.MKernelToMatrix(K)

def MMKernelToMatrix(k_bank: "MMKernel") -> "iftMatrix *":
    r"""
    MMKernelToMatrix(k_bank) -> Matrix

    Parameters
    ----------
    k_bank: iftMMKernel *

    """
    return _pyift.MMKernelToMatrix(k_bank)

def SmoothImage(img: "Image", A: "AdjRel", sigma: "float") -> "iftImage *":
    r"""
    SmoothImage(img, A, sigma) -> Image

    Parameters
    ----------
    img: iftImage *
    A: iftAdjRel *
    sigma: float

    """
    return _pyift.SmoothImage(img, A, sigma)

def SmoothImageInRegion(img: "Image", mask: "Image", A: "AdjRel", sigma: "float") -> "iftImage *":
    r"""
    SmoothImageInRegion(img, mask, A, sigma) -> Image

    Parameters
    ----------
    img: iftImage *
    mask: iftImage *
    A: iftAdjRel *
    sigma: float

    """
    return _pyift.SmoothImageInRegion(img, mask, A, sigma)

def FastBilateralFilter2D(img: "Image", s_sigma: "int", r_sigma: "float") -> "iftImage *":
    r"""
    FastBilateralFilter2D(img, s_sigma, r_sigma) -> Image

    Parameters
    ----------
    img: iftImage *
    s_sigma: int
    r_sigma: float

    """
    return _pyift.FastBilateralFilter2D(img, s_sigma, r_sigma)

def FastMBilateralFilter2D(img: "MImage", s_sigma: "int", r_sigma: "float") -> "iftMImage *":
    r"""
    FastMBilateralFilter2D(img, s_sigma, r_sigma) -> MImage

    Parameters
    ----------
    img: iftMImage *
    s_sigma: int
    r_sigma: float

    """
    return _pyift.FastMBilateralFilter2D(img, s_sigma, r_sigma)

def NormalizeImage(img: "Image", A: "AdjRel", Imax: "int") -> "iftImage *":
    r"""
    NormalizeImage(img, A, Imax) -> Image

    Parameters
    ----------
    img: iftImage *
    A: iftAdjRel *
    Imax: int

    """
    return _pyift.NormalizeImage(img, A, Imax)

def AlphaPooling(img: "Image", A: "AdjRel", stride: "int", alpha: "float") -> "iftImage *":
    r"""
    AlphaPooling(img, A, stride, alpha) -> Image

    Parameters
    ----------
    img: iftImage *
    A: iftAdjRel *
    stride: int
    alpha: float

    """
    return _pyift.AlphaPooling(img, A, stride, alpha)

def RandomKernelBankAsMatrix(size: "int", nbands: "int", nKernels: "int") -> "iftMatrix *":
    r"""
    RandomKernelBankAsMatrix(size, nbands, nKernels) -> Matrix

    Parameters
    ----------
    size: int
    nbands: int
    nKernels: int

    """
    return _pyift.RandomKernelBankAsMatrix(size, nbands, nKernels)

def MConvolution(mimg: "MImage", kernels: "Matrix", stride: "int") -> "iftMImage *":
    r"""
    MConvolution(mimg, kernels, stride) -> MImage

    Parameters
    ----------
    mimg: iftMImage *
    kernels: iftMatrix *
    stride: int

    """
    return _pyift.MConvolution(mimg, kernels, stride)

def MConvolutionArray(mimgArray: "MImageArray", kernels: "Matrix", stride: "int") -> "iftMImageArray *":
    r"""
    MConvolutionArray(mimgArray, kernels, stride) -> MImageArray

    Parameters
    ----------
    mimgArray: iftMImageArray *
    kernels: iftMatrix *
    stride: int

    """
    return _pyift.MConvolutionArray(mimgArray, kernels, stride)

def MMaxPooling(mimg: "MImage", radius: "float", stride: "int") -> "iftMImage *":
    r"""
    MMaxPooling(mimg, radius, stride) -> MImage

    Parameters
    ----------
    mimg: iftMImage *
    radius: float
    stride: int

    """
    return _pyift.MMaxPooling(mimg, radius, stride)

def MMaxPoolingArray(mimgArray: "MImageArray", radius: "float", stride: "int") -> "iftMImageArray *":
    r"""
    MMaxPoolingArray(mimgArray, radius, stride) -> MImageArray

    Parameters
    ----------
    mimgArray: iftMImageArray *
    radius: float
    stride: int

    """
    return _pyift.MMaxPoolingArray(mimgArray, radius, stride)

def MMaxPoolingRoi(mimg: "MImage", roiArray: "iftRoiArray *", stride: "int") -> "iftMImage *":
    r"""
    MMaxPoolingRoi(mimg, roiArray, stride) -> MImage

    Parameters
    ----------
    mimg: iftMImage *
    roiArray: iftRoiArray *
    stride: int

    """
    return _pyift.MMaxPoolingRoi(mimg, roiArray, stride)

def MMaxPoolingRoiArray(mimgArray: "MImageArray", roiArray: "iftRoiArray *", stride: "int") -> "iftMImageArray *":
    r"""
    MMaxPoolingRoiArray(mimgArray, roiArray, stride) -> MImageArray

    Parameters
    ----------
    mimgArray: iftMImageArray *
    roiArray: iftRoiArray *
    stride: int

    """
    return _pyift.MMaxPoolingRoiArray(mimgArray, roiArray, stride)

def MMinPooling(mimg: "MImage", radius: "float", stride: "int") -> "iftMImage *":
    r"""
    MMinPooling(mimg, radius, stride) -> MImage

    Parameters
    ----------
    mimg: iftMImage *
    radius: float
    stride: int

    """
    return _pyift.MMinPooling(mimg, radius, stride)

def MMinPoolingArray(mimgArray: "MImageArray", radius: "float", stride: "int") -> "iftMImageArray *":
    r"""
    MMinPoolingArray(mimgArray, radius, stride) -> MImageArray

    Parameters
    ----------
    mimgArray: iftMImageArray *
    radius: float
    stride: int

    """
    return _pyift.MMinPoolingArray(mimgArray, radius, stride)

def MReLU(mimg: "MImage") -> "iftMImage *":
    r"""
    MReLU(mimg) -> MImage

    Parameters
    ----------
    mimg: iftMImage *

    """
    return _pyift.MReLU(mimg)

def MReLUArray(mimg: "MImageArray") -> "iftMImageArray *":
    r"""
    MReLUArray(mimg) -> MImageArray

    Parameters
    ----------
    mimg: iftMImageArray *

    """
    return _pyift.MReLUArray(mimg)

def CreateMaxTree(img: "Image") -> "iftCompTree *":
    r"""
    CreateMaxTree(img) -> iftCompTree *

    Parameters
    ----------
    img: iftImage const *

    """
    return _pyift.CreateMaxTree(img)

def CreateMinTree(img: "Image") -> "iftCompTree *":
    r"""
    CreateMinTree(img) -> iftCompTree *

    Parameters
    ----------
    img: iftImage const *

    """
    return _pyift.CreateMinTree(img)

def Dilate(img: "Image", A: "AdjRel", mask: "Image") -> "iftImage *":
    r"""
    Dilate(img, A, mask) -> Image

    Parameters
    ----------
    img: iftImage const *
    A: iftAdjRel const *
    mask: iftImage const *

    """
    return _pyift.Dilate(img, A, mask)

def Erode(img: "Image", A: "AdjRel", mask: "Image") -> "iftImage *":
    r"""
    Erode(img, A, mask) -> Image

    Parameters
    ----------
    img: iftImage const *
    A: iftAdjRel const *
    mask: iftImage const *

    """
    return _pyift.Erode(img, A, mask)

def Close(img: "Image", A: "AdjRel", mask: "Image") -> "iftImage *":
    r"""
    Close(img, A, mask) -> Image

    Parameters
    ----------
    img: iftImage const *
    A: iftAdjRel const *
    mask: iftImage const *

    """
    return _pyift.Close(img, A, mask)

def Open(img: "Image", A: "AdjRel", mask: "Image") -> "iftImage *":
    r"""
    Open(img, A, mask) -> Image

    Parameters
    ----------
    img: iftImage const *
    A: iftAdjRel const *
    mask: iftImage const *

    """
    return _pyift.Open(img, A, mask)

def AsfCO(img: "Image", A: "AdjRel", mask: "Image") -> "iftImage *":
    r"""
    AsfCO(img, A, mask) -> Image

    Parameters
    ----------
    img: iftImage const *
    A: iftAdjRel const *
    mask: iftImage const *

    """
    return _pyift.AsfCO(img, A, mask)

def AsfOC(img: "Image", A: "AdjRel", mask: "Image") -> "iftImage *":
    r"""
    AsfOC(img, A, mask) -> Image

    Parameters
    ----------
    img: iftImage const *
    A: iftAdjRel const *
    mask: iftImage const *

    """
    return _pyift.AsfOC(img, A, mask)

def DilateBin(bin: "Image", seed: "iftSet **", radius: "float") -> "iftSet **":
    r"""
    DilateBin(bin, seed, radius) -> Image

    Parameters
    ----------
    bin: iftImage const *
    seed: iftSet **
    radius: float

    """
    return _pyift.DilateBin(bin, seed, radius)

def ErodeBin(bin: "Image", seed: "iftSet **", radius: "float") -> "iftSet **":
    r"""
    ErodeBin(bin, seed, radius) -> Image

    Parameters
    ----------
    bin: iftImage const *
    seed: iftSet **
    radius: float

    """
    return _pyift.ErodeBin(bin, seed, radius)

def ErodeLabelImage(label_img: "Image", radius: "float") -> "iftImage *":
    r"""
    ErodeLabelImage(label_img, radius) -> Image

    Parameters
    ----------
    label_img: iftImage const *
    radius: float

    """
    return _pyift.ErodeLabelImage(label_img, radius)

def CloseBin(bin: "Image", radius: "float") -> "iftImage *":
    r"""
    CloseBin(bin, radius) -> Image

    Parameters
    ----------
    bin: iftImage const *
    radius: float

    """
    return _pyift.CloseBin(bin, radius)

def OpenBin(bin: "Image", radius: "float") -> "iftImage *":
    r"""
    OpenBin(bin, radius) -> Image

    Parameters
    ----------
    bin: iftImage const *
    radius: float

    """
    return _pyift.OpenBin(bin, radius)

def AsfCOBin(bin: "Image", radius: "float") -> "iftImage *":
    r"""
    AsfCOBin(bin, radius) -> Image

    Parameters
    ----------
    bin: iftImage const *
    radius: float

    """
    return _pyift.AsfCOBin(bin, radius)

def AsfOCBin(bin: "Image", radius: "float") -> "iftImage *":
    r"""
    AsfOCBin(bin, radius) -> Image

    Parameters
    ----------
    bin: iftImage const *
    radius: float

    """
    return _pyift.AsfOCBin(bin, radius)

def CloseRecBin(bin: "Image", radius: "float") -> "iftImage *":
    r"""
    CloseRecBin(bin, radius) -> Image

    Parameters
    ----------
    bin: iftImage const *
    radius: float

    """
    return _pyift.CloseRecBin(bin, radius)

def OpenRecBin(bin: "Image", radius: "float") -> "iftImage *":
    r"""
    OpenRecBin(bin, radius) -> Image

    Parameters
    ----------
    bin: iftImage const *
    radius: float

    """
    return _pyift.OpenRecBin(bin, radius)

def MorphGrad(img: "Image", A: "AdjRel") -> "iftImage *":
    r"""
    MorphGrad(img, A) -> Image

    Parameters
    ----------
    img: iftImage const *
    A: iftAdjRel const *

    """
    return _pyift.MorphGrad(img, A)

def SuperiorRec(img: "Image", marker: "Image", mask: "Image") -> "iftImage *":
    r"""
    SuperiorRec(img, marker, mask) -> Image

    Parameters
    ----------
    img: iftImage const *
    marker: iftImage const *
    mask: iftImage const *

    """
    return _pyift.SuperiorRec(img, marker, mask)

def InferiorRec(img: "Image", marker: "Image", mask: "Image") -> "iftImage *":
    r"""
    InferiorRec(img, marker, mask) -> Image

    Parameters
    ----------
    img: iftImage const *
    marker: iftImage const *
    mask: iftImage const *

    """
    return _pyift.InferiorRec(img, marker, mask)

def OpenRec(img: "Image", A: "AdjRel", mask: "Image") -> "iftImage *":
    r"""
    OpenRec(img, A, mask) -> Image

    Parameters
    ----------
    img: iftImage const *
    A: iftAdjRel const *
    mask: iftImage const *

    """
    return _pyift.OpenRec(img, A, mask)

def CloseRec(img: "Image", A: "AdjRel", mask: "Image") -> "iftImage *":
    r"""
    CloseRec(img, A, mask) -> Image

    Parameters
    ----------
    img: iftImage const *
    A: iftAdjRel const *
    mask: iftImage const *

    """
    return _pyift.CloseRec(img, A, mask)

def AsfCORec(img: "Image", A: "AdjRel", mask: "Image") -> "iftImage *":
    r"""
    AsfCORec(img, A, mask) -> Image

    Parameters
    ----------
    img: iftImage const *
    A: iftAdjRel const *
    mask: iftImage const *

    """
    return _pyift.AsfCORec(img, A, mask)

def AsfOCRec(img: "Image", A: "AdjRel", mask: "Image") -> "iftImage *":
    r"""
    AsfOCRec(img, A, mask) -> Image

    Parameters
    ----------
    img: iftImage const *
    A: iftAdjRel const *
    mask: iftImage const *

    """
    return _pyift.AsfOCRec(img, A, mask)

def CloseBasins(img: "Image", seed: "Set", mask: "Image") -> "iftImage *":
    r"""
    CloseBasins(img, seed, mask) -> Image

    Parameters
    ----------
    img: iftImage const *
    seed: iftSet *
    mask: iftImage const *

    """
    return _pyift.CloseBasins(img, seed, mask)

def OpenDomes(img: "Image", seed: "Set", mask: "Image") -> "iftImage *":
    r"""
    OpenDomes(img, seed, mask) -> Image

    Parameters
    ----------
    img: iftImage const *
    seed: iftSet *
    mask: iftImage const *

    """
    return _pyift.OpenDomes(img, seed, mask)

def HClose(img: "Image", H: "int", mask: "Image") -> "iftImage *":
    r"""
    HClose(img, H, mask) -> Image

    Parameters
    ----------
    img: iftImage const *
    H: int
    mask: iftImage const *

    """
    return _pyift.HClose(img, H, mask)

def HOpen(img: "Image", H: "int", mask: "Image") -> "iftImage *":
    r"""
    HOpen(img, H, mask) -> Image

    Parameters
    ----------
    img: iftImage const *
    H: int
    mask: iftImage const *

    """
    return _pyift.HOpen(img, H, mask)

def FastAreaClose(img: "Image", thres: "int") -> "iftImage *":
    r"""
    FastAreaClose(img, thres) -> Image

    Parameters
    ----------
    img: iftImage const *
    thres: int

    """
    return _pyift.FastAreaClose(img, thres)

def FastAreaOpen(img: "Image", thres: "int") -> "iftImage *":
    r"""
    FastAreaOpen(img, thres) -> Image

    Parameters
    ----------
    img: iftImage const *
    thres: int

    """
    return _pyift.FastAreaOpen(img, thres)

def AreaClose(img: "Image", area_thres: "int", ctree: "iftCompTree *") -> "iftImage *":
    r"""
    AreaClose(img, area_thres, ctree) -> Image

    Parameters
    ----------
    img: iftImage const *
    area_thres: int
    ctree: iftCompTree *

    """
    return _pyift.AreaClose(img, area_thres, ctree)

def VolumeClose(img: "Image", volume_thres: "int", ctree: "iftCompTree *") -> "iftImage *":
    r"""
    VolumeClose(img, volume_thres, ctree) -> Image

    Parameters
    ----------
    img: iftImage const *
    volume_thres: int
    ctree: iftCompTree *

    """
    return _pyift.VolumeClose(img, volume_thres, ctree)

def AreaOpen(img: "Image", area_thres: "int", ctree: "iftCompTree *") -> "iftImage *":
    r"""
    AreaOpen(img, area_thres, ctree) -> Image

    Parameters
    ----------
    img: iftImage const *
    area_thres: int
    ctree: iftCompTree *

    """
    return _pyift.AreaOpen(img, area_thres, ctree)

def VolumeOpen(img: "Image", volume_thres: "int", ctree: "iftCompTree *") -> "iftImage *":
    r"""
    VolumeOpen(img, volume_thres, ctree) -> Image

    Parameters
    ----------
    img: iftImage const *
    volume_thres: int
    ctree: iftCompTree *

    """
    return _pyift.VolumeOpen(img, volume_thres, ctree)

def RelabelRegions(labelled: "Image", adj_rel: "AdjRel") -> "iftImage *":
    r"""
    RelabelRegions(labelled, adj_rel) -> Image

    Parameters
    ----------
    labelled: iftImage *
    adj_rel: iftAdjRel *

    """
    return _pyift.RelabelRegions(labelled, adj_rel)

def GeodesicCenters(label_image: "Image") -> "iftLabeledSet *":
    r"""
    GeodesicCenters(label_image) -> LabeledSet

    Parameters
    ----------
    label_image: iftImage const *

    """
    return _pyift.GeodesicCenters(label_image)

def JoinProbabilityRegions(prob: "MImage", label: "Image", norm_val: "int", decrement: "bool") -> "iftImage *":
    r"""
    JoinProbabilityRegions(prob, label, norm_val, decrement) -> Image

    Parameters
    ----------
    prob: iftMImage *
    label: iftImage *
    norm_val: int
    decrement: bool

    """
    return _pyift.JoinProbabilityRegions(prob, label, norm_val, decrement)

def ExtractRemovalMarkers(s: "iftLabeledSet **") -> "iftSet *":
    r"""
    ExtractRemovalMarkers(s) -> Set

    Parameters
    ----------
    s: iftLabeledSet **

    """
    return _pyift.ExtractRemovalMarkers(s)

def LabelObjBorderSet(bin: "Image", A: "AdjRel") -> "iftLabeledSet *":
    r"""
    LabelObjBorderSet(bin, A) -> LabeledSet

    Parameters
    ----------
    bin: iftImage *
    A: iftAdjRel *

    """
    return _pyift.LabelObjBorderSet(bin, A)

def ImageBorderLabeledSet(img: "Image") -> "iftLabeledSet *":
    r"""
    ImageBorderLabeledSet(img) -> LabeledSet

    Parameters
    ----------
    img: iftImage *

    """
    return _pyift.ImageBorderLabeledSet(img)

def LabelCompSet(bin: "Image", A: "AdjRel") -> "iftLabeledSet *":
    r"""
    LabelCompSet(bin, A) -> LabeledSet

    Parameters
    ----------
    bin: iftImage *
    A: iftAdjRel *

    """
    return _pyift.LabelCompSet(bin, A)

def FuzzyModelToLabeledSet(model: "Image") -> "iftLabeledSet *":
    r"""
    FuzzyModelToLabeledSet(model) -> LabeledSet

    Parameters
    ----------
    model: iftImage *

    """
    return _pyift.FuzzyModelToLabeledSet(model)

def MAdjustSeedCoordinates(S: "LabeledSet", input: "MImage", output: "MImage") -> "iftLabeledSet *":
    r"""
    MAdjustSeedCoordinates(S, input, output) -> LabeledSet

    Parameters
    ----------
    S: iftLabeledSet *
    input: iftMImage *
    output: iftMImage *

    """
    return _pyift.MAdjustSeedCoordinates(S, input, output)

def AdjustSeedCoordinates(Sin: "LabeledSet", orig: "Image", output: "MImage") -> "iftLabeledSet *":
    r"""
    AdjustSeedCoordinates(Sin, orig, output) -> LabeledSet

    Parameters
    ----------
    Sin: iftLabeledSet *
    orig: iftImage *
    output: iftMImage *

    """
    return _pyift.AdjustSeedCoordinates(Sin, orig, output)

def ImageBorderSet(img: "Image") -> "iftSet *":
    r"""
    ImageBorderSet(img) -> Set

    Parameters
    ----------
    img: iftImage const *

    """
    return _pyift.ImageBorderSet(img)

def MultiObjectBorderLabeledSet(img: "Image", A: "AdjRel") -> "iftLabeledSet *":
    r"""
    MultiObjectBorderLabeledSet(img, A) -> LabeledSet

    Parameters
    ----------
    img: iftImage *
    A: iftAdjRel *

    """
    return _pyift.MultiObjectBorderLabeledSet(img, A)

def ObjectToSet(label_img: "Image") -> "iftSet *":
    r"""
    ObjectToSet(label_img) -> Set

    Parameters
    ----------
    label_img: iftImage const *

    """
    return _pyift.ObjectToSet(label_img)

def ObjectToLabeledSet(label_img: "Image") -> "iftLabeledSet *":
    r"""
    ObjectToLabeledSet(label_img) -> LabeledSet

    Parameters
    ----------
    label_img: iftImage const *

    """
    return _pyift.ObjectToLabeledSet(label_img)

def ObjectsToList(label_img: "Image") -> "iftList *":
    r"""
    ObjectsToList(label_img) -> iftList *

    Parameters
    ----------
    label_img: iftImage const *

    """
    return _pyift.ObjectsToList(label_img)

def ObjectBorderSet(label_img: "Image", Ain: "AdjRel") -> "iftSet *":
    r"""
    ObjectBorderSet(label_img, Ain) -> Set

    Parameters
    ----------
    label_img: iftImage const *
    Ain: iftAdjRel *

    """
    return _pyift.ObjectBorderSet(label_img, Ain)

def BackgroundBorderSet(label_img: "Image", Ain: "AdjRel") -> "iftSet *":
    r"""
    BackgroundBorderSet(label_img, Ain) -> Set

    Parameters
    ----------
    label_img: iftImage const *
    Ain: iftAdjRel *

    """
    return _pyift.BackgroundBorderSet(label_img, Ain)

def ObjectBorderBitMap(label: "Image", A: "AdjRel", n_border_spels: "int *") -> "iftBMap *":
    r"""
    ObjectBorderBitMap(label, A, n_border_spels) -> BMap

    Parameters
    ----------
    label: iftImage const *
    A: iftAdjRel const *
    n_border_spels: int *

    """
    return _pyift.ObjectBorderBitMap(label, A, n_border_spels)

def MaskImageToSet(mask: "Image", S: "iftSet **") -> "iftSet **":
    r"""
    MaskImageToSet(mask, S)

    Parameters
    ----------
    mask: iftImage const *
    S: iftSet **

    """
    return _pyift.MaskImageToSet(mask, S)

def MaskImageFromSet(S: "Set", xsize: "int", ysize: "int", zsize: "int") -> "iftImage *":
    r"""
    MaskImageFromSet(S, xsize, ysize, zsize) -> Image

    Parameters
    ----------
    S: iftSet *
    xsize: int
    ysize: int
    zsize: int

    """
    return _pyift.MaskImageFromSet(S, xsize, ysize, zsize)

def SetToImage(S: "Set", img: "Image", obj: "int") -> "void":
    r"""
    SetToImage(S, img, obj)

    Parameters
    ----------
    S: iftSet const *
    img: iftImage *
    obj: int

    """
    return _pyift.SetToImage(S, img, obj)

def ListToImage(L: "iftList const *", img: "Image", obj: "int") -> "void":
    r"""
    ListToImage(L, img, obj)

    Parameters
    ----------
    L: iftList const *
    img: iftImage *
    obj: int

    """
    return _pyift.ListToImage(L, img, obj)

def MaskToList(mask: "Image") -> "iftList *":
    r"""
    MaskToList(mask) -> iftList *

    Parameters
    ----------
    mask: iftImage const *

    """
    return _pyift.MaskToList(mask)

def LabeledSetToImage(S: "LabeledSet", img: "Image", increment_label: "bool") -> "void":
    r"""
    LabeledSetToImage(S, img, increment_label)

    Parameters
    ----------
    S: iftLabeledSet const *
    img: iftImage *
    increment_label: bool

    """
    return _pyift.LabeledSetToImage(S, img, increment_label)

def IntArrayToImage(iarr: "IntArray", img: "Image", obj: "int") -> "void":
    r"""
    IntArrayToImage(iarr, img, obj)

    Parameters
    ----------
    iarr: iftIntArray const *
    img: iftImage *
    obj: int

    """
    return _pyift.IntArrayToImage(iarr, img, obj)

def MaskToIntArray(mask: "Image") -> "iftIntArray *":
    r"""
    MaskToIntArray(mask) -> IntArray

    Parameters
    ----------
    mask: iftImage const *

    """
    return _pyift.MaskToIntArray(mask)

def RegionsToLabeledSet(label: "Image", decrement_label: "bool") -> "iftLabeledSet *":
    r"""
    RegionsToLabeledSet(label, decrement_label) -> LabeledSet

    Parameters
    ----------
    label: iftImage const *
    decrement_label: bool

    """
    return _pyift.RegionsToLabeledSet(label, decrement_label)

def EndPoints(skel: "Image", A: "AdjRel") -> "iftSet *":
    r"""
    EndPoints(skel, A) -> Set

    Parameters
    ----------
    skel: iftImage *
    A: iftAdjRel *

    """
    return _pyift.EndPoints(skel, A)

def FindPathOnSkeleton(skel: "Image", A: "AdjRel", src: "int", dst: "int") -> "iftSet *":
    r"""
    FindPathOnSkeleton(skel, A, src, dst) -> Set

    Parameters
    ----------
    skel: iftImage *
    A: iftAdjRel *
    src: int
    dst: int

    """
    return _pyift.FindPathOnSkeleton(skel, A, src, dst)

def SkeletonPoints(skel: "Image") -> "iftSet *":
    r"""
    SkeletonPoints(skel) -> Set

    Parameters
    ----------
    skel: iftImage *

    """
    return _pyift.SkeletonPoints(skel)

def ObjectBorders(label_img: "Image", Ain: "AdjRel", keep_border_labels: "bool", include_image_frame: "bool") -> "iftImage *":
    r"""
    ObjectBorders(label_img, Ain, keep_border_labels, include_image_frame) -> Image

    Parameters
    ----------
    label_img: iftImage const *
    Ain: iftAdjRel const *
    keep_border_labels: bool
    include_image_frame: bool

    """
    return _pyift.ObjectBorders(label_img, Ain, keep_border_labels, include_image_frame)

def FindAndLabelObjectBorders(label_img: "Image", Ain: "AdjRel") -> "iftImage *":
    r"""
    FindAndLabelObjectBorders(label_img, Ain) -> Image

    Parameters
    ----------
    label_img: iftImage const *
    Ain: iftAdjRel const *

    """
    return _pyift.FindAndLabelObjectBorders(label_img, Ain)

def EasyLabelComp(bin: "Image", A: "AdjRel") -> "iftImage *":
    r"""
    EasyLabelComp(bin, A) -> Image

    Parameters
    ----------
    bin: iftImage *
    A: iftAdjRel *

    """
    return _pyift.EasyLabelComp(bin, A)

def LabelComp(bin: "Image", A: "AdjRel") -> "iftImage *":
    r"""
    LabelComp(bin, A) -> Image

    Parameters
    ----------
    bin: iftImage *
    A: iftAdjRel *

    """
    return _pyift.LabelComp(bin, A)

def SelectLargestComp(bin: "Image", Ain: "AdjRel") -> "iftImage *":
    r"""
    SelectLargestComp(bin, Ain) -> Image

    Parameters
    ----------
    bin: iftImage const *
    Ain: iftAdjRel const *

    """
    return _pyift.SelectLargestComp(bin, Ain)

def SelectSmallestComp(bin: "Image", A: "AdjRel") -> "iftImage *":
    r"""
    SelectSmallestComp(bin, A) -> Image

    Parameters
    ----------
    bin: iftImage *
    A: iftAdjRel *

    """
    return _pyift.SelectSmallestComp(bin, A)

def SelectKLargestComp(bin: "Image", A: "AdjRel", K: "int") -> "iftImage *":
    r"""
    SelectKLargestComp(bin, A, K) -> Image

    Parameters
    ----------
    bin: iftImage *
    A: iftAdjRel *
    K: int

    """
    return _pyift.SelectKLargestComp(bin, A, K)

def SelectKSmallestComp(bin: "Image", A: "AdjRel", K: "int") -> "iftImage *":
    r"""
    SelectKSmallestComp(bin, A, K) -> Image

    Parameters
    ----------
    bin: iftImage *
    A: iftAdjRel *
    K: int

    """
    return _pyift.SelectKSmallestComp(bin, A, K)

def ComponentArea(bin: "Image", A: "AdjRel") -> "iftImage *":
    r"""
    ComponentArea(bin, A) -> Image

    Parameters
    ----------
    bin: iftImage *
    A: iftAdjRel *

    """
    return _pyift.ComponentArea(bin, A)

def SelectCompAboveArea(bin: "Image", A: "AdjRel", thres: "int") -> "iftImage *":
    r"""
    SelectCompAboveArea(bin, A, thres) -> Image

    Parameters
    ----------
    bin: iftImage *
    A: iftAdjRel *
    thres: int

    """
    return _pyift.SelectCompAboveArea(bin, A, thres)

def SelectCompBelowArea(bin: "Image", A: "AdjRel", thres: "int") -> "iftImage *":
    r"""
    SelectCompBelowArea(bin, A, thres) -> Image

    Parameters
    ----------
    bin: iftImage *
    A: iftAdjRel *
    thres: int

    """
    return _pyift.SelectCompBelowArea(bin, A, thres)

def SelectCompInAreaInterval(bin: "Image", A: "AdjRel", thres_min: "int", thres_max: "int") -> "iftImage *":
    r"""
    SelectCompInAreaInterval(bin, A, thres_min, thres_max) -> Image

    Parameters
    ----------
    bin: iftImage *
    A: iftAdjRel *
    thres_min: int
    thres_max: int

    """
    return _pyift.SelectCompInAreaInterval(bin, A, thres_min, thres_max)

def RegionalMaxima(img: "Image") -> "iftImage *":
    r"""
    RegionalMaxima(img) -> Image

    Parameters
    ----------
    img: iftImage *

    """
    return _pyift.RegionalMaxima(img)

def RegionalMinima(img: "Image") -> "iftImage *":
    r"""
    RegionalMinima(img) -> Image

    Parameters
    ----------
    img: iftImage *

    """
    return _pyift.RegionalMinima(img)

def RegionalMaximaInRegion(img: "Image", mask: "Image") -> "iftImage *":
    r"""
    RegionalMaximaInRegion(img, mask) -> Image

    Parameters
    ----------
    img: iftImage *
    mask: iftImage *

    """
    return _pyift.RegionalMaximaInRegion(img, mask)

def RegionalMinimaInRegion(img: "Image", mask: "Image") -> "iftImage *":
    r"""
    RegionalMinimaInRegion(img, mask) -> Image

    Parameters
    ----------
    img: iftImage *
    mask: iftImage *

    """
    return _pyift.RegionalMinimaInRegion(img, mask)

def RootVoxels(pred: "Image") -> "iftImage *":
    r"""
    RootVoxels(pred) -> Image

    Parameters
    ----------
    pred: iftImage *

    """
    return _pyift.RootVoxels(pred)

def LeafVoxels(pred: "Image", A: "AdjRel") -> "iftImage *":
    r"""
    LeafVoxels(pred, A) -> Image

    Parameters
    ----------
    pred: iftImage *
    A: iftAdjRel *

    """
    return _pyift.LeafVoxels(pred, A)

def LeafVoxelsOnMask(pred: "Image", A: "AdjRel", mask: "Image") -> "iftImage *":
    r"""
    LeafVoxelsOnMask(pred, A, mask) -> Image

    Parameters
    ----------
    pred: iftImage *
    A: iftAdjRel *
    mask: iftImage *

    """
    return _pyift.LeafVoxelsOnMask(pred, A, mask)

def RegionArea(label: "Image") -> "iftImage *":
    r"""
    RegionArea(label) -> Image

    Parameters
    ----------
    label: iftImage *

    """
    return _pyift.RegionArea(label)

def SelectLargestRegion(label_img: "Image") -> "iftImage *":
    r"""
    SelectLargestRegion(label_img) -> Image

    Parameters
    ----------
    label_img: iftImage const *

    """
    return _pyift.SelectLargestRegion(label_img)

def SelectSmallestRegion(label: "Image") -> "iftImage *":
    r"""
    SelectSmallestRegion(label) -> Image

    Parameters
    ----------
    label: iftImage *

    """
    return _pyift.SelectSmallestRegion(label)

def SelectKLargestRegions(label: "Image", K: "int") -> "iftImage *":
    r"""
    SelectKLargestRegions(label, K) -> Image

    Parameters
    ----------
    label: iftImage *
    K: int

    """
    return _pyift.SelectKLargestRegions(label, K)

def SelectKLargestRegionsAndPropagateTheirLabels(label: "Image", A: "AdjRel", K: "int") -> "iftImage *":
    r"""
    SelectKLargestRegionsAndPropagateTheirLabels(label, A, K) -> Image

    Parameters
    ----------
    label: iftImage *
    A: iftAdjRel *
    K: int

    """
    return _pyift.SelectKLargestRegionsAndPropagateTheirLabels(label, A, K)

def SelectKSmallestRegions(label: "Image", K: "int") -> "iftImage *":
    r"""
    SelectKSmallestRegions(label, K) -> Image

    Parameters
    ----------
    label: iftImage *
    K: int

    """
    return _pyift.SelectKSmallestRegions(label, K)

def SelectRegionsAboveArea(label: "Image", thres: "int") -> "iftImage *":
    r"""
    SelectRegionsAboveArea(label, thres) -> Image

    Parameters
    ----------
    label: iftImage *
    thres: int

    """
    return _pyift.SelectRegionsAboveArea(label, thres)

def SelectRegionsAboveAreaAndPropagateTheirLabels(label: "Image", thres: "int") -> "iftImage *":
    r"""
    SelectRegionsAboveAreaAndPropagateTheirLabels(label, thres) -> Image

    Parameters
    ----------
    label: iftImage *
    thres: int

    """
    return _pyift.SelectRegionsAboveAreaAndPropagateTheirLabels(label, thres)

def SelectRegionsBelowArea(label: "Image", thres: "int") -> "iftImage *":
    r"""
    SelectRegionsBelowArea(label, thres) -> Image

    Parameters
    ----------
    label: iftImage *
    thres: int

    """
    return _pyift.SelectRegionsBelowArea(label, thres)

def SelectRegionsInAreaInterval(label: "Image", min_area: "int", max_area: "int") -> "iftImage *":
    r"""
    SelectRegionsInAreaInterval(label, min_area, max_area) -> Image

    Parameters
    ----------
    label: iftImage *
    min_area: int
    max_area: int

    """
    return _pyift.SelectRegionsInAreaInterval(label, min_area, max_area)

def SelectRegionsInAreaIntervalInplace(label: "Image", min_area: "int", max_area: "int") -> "void":
    r"""
    SelectRegionsInAreaIntervalInplace(label, min_area, max_area)

    Parameters
    ----------
    label: iftImage *
    min_area: int
    max_area: int

    """
    return _pyift.SelectRegionsInAreaIntervalInplace(label, min_area, max_area)

def LabelContPixel(bin: "Image") -> "iftImage *":
    r"""
    LabelContPixel(bin) -> Image

    Parameters
    ----------
    bin: iftImage *

    """
    return _pyift.LabelContPixel(bin)

def ReadSeeds(*args) -> "iftLabeledSet *":
    r"""
    ReadSeeds(img, filename) -> LabeledSet

    Parameters
    ----------
    img: iftImage const *
    filename: char const *

    """
    return _pyift.ReadSeeds(*args)

def MReadSeeds(img: "MImage", filename: "char *") -> "iftLabeledSet *":
    r"""
    MReadSeeds(img, filename) -> LabeledSet

    Parameters
    ----------
    img: iftMImage *
    filename: char *

    """
    return _pyift.MReadSeeds(img, filename)

def MWriteSeeds(seed: "LabeledSet", image: "MImage", filename: "char *") -> "void":
    r"""
    MWriteSeeds(seed, image, filename)

    Parameters
    ----------
    seed: iftLabeledSet *
    image: iftMImage *
    filename: char *

    """
    return _pyift.MWriteSeeds(seed, image, filename)

def WriteSeeds(*args) -> "void":
    r"""
    WriteSeeds(seed, image, filename)

    Parameters
    ----------
    seed: iftLabeledSet *
    image: iftImage const *
    filename: char const *

    """
    return _pyift.WriteSeeds(*args)

def SeedImageFromLabeledSet(labeled_set: "LabeledSet", image: "Image") -> "iftImage *":
    r"""
    SeedImageFromLabeledSet(labeled_set, image) -> Image

    Parameters
    ----------
    labeled_set: iftLabeledSet *
    image: iftImage *

    """
    return _pyift.SeedImageFromLabeledSet(labeled_set, image)

def LabeledSetFromSeedImage(seed_image: "Image", decrement: "bool") -> "iftLabeledSet *":
    r"""
    LabeledSetFromSeedImage(seed_image, decrement) -> LabeledSet

    Parameters
    ----------
    seed_image: iftImage *
    decrement: bool

    """
    return _pyift.LabeledSetFromSeedImage(seed_image, decrement)

def LabeledSetFromSeedImageMarkersAndHandicap(seed_image: "Image", marker: "Image", handicap: "Image") -> "iftLabeledSet *":
    r"""
    LabeledSetFromSeedImageMarkersAndHandicap(seed_image, marker, handicap) -> LabeledSet

    Parameters
    ----------
    seed_image: iftImage *
    marker: iftImage *
    handicap: iftImage *

    """
    return _pyift.LabeledSetFromSeedImageMarkersAndHandicap(seed_image, marker, handicap)

def GetSeeds(S: "LabeledSet", nelem: "int", label: "int") -> "iftLabeledSet *":
    r"""
    GetSeeds(S, nelem, label) -> LabeledSet

    Parameters
    ----------
    S: iftLabeledSet *
    nelem: int
    label: int

    """
    return _pyift.GetSeeds(S, nelem, label)

def GetMisclassifiedSeeds(S: "LabeledSet", nelem: "int", label: "int", gt_image: "Image", cl_image: "Image") -> "iftLabeledSet *":
    r"""
    GetMisclassifiedSeeds(S, nelem, label, gt_image, cl_image) -> LabeledSet

    Parameters
    ----------
    S: iftLabeledSet *
    nelem: int
    label: int
    gt_image: iftImage *
    cl_image: iftImage *

    """
    return _pyift.GetMisclassifiedSeeds(S, nelem, label, gt_image, cl_image)

def FastLabelComp(bin: "Image", Ain: "AdjRel") -> "iftImage *":
    r"""
    FastLabelComp(bin, Ain) -> Image

    Parameters
    ----------
    bin: iftImage const *
    Ain: iftAdjRel const *

    """
    return _pyift.FastLabelComp(bin, Ain)

def BinaryMaskToSet(mask: "Image") -> "iftSet *":
    r"""
    BinaryMaskToSet(mask) -> Set

    Parameters
    ----------
    mask: iftImage *

    """
    return _pyift.BinaryMaskToSet(mask)

def HBasins(img: "Image", H: "int") -> "iftImage *":
    r"""
    HBasins(img, H) -> Image

    Parameters
    ----------
    img: iftImage *
    H: int

    """
    return _pyift.HBasins(img, H)

def HDomes(img: "Image", H: "int") -> "iftImage *":
    r"""
    HDomes(img, H) -> Image

    Parameters
    ----------
    img: iftImage *
    H: int

    """
    return _pyift.HDomes(img, H)

def GridSamplingOnMask(bin_mask: "Image", radius: "float", initial_obj_voxel_idx: "int", n_samples: "long") -> "iftIntArray *":
    r"""
    GridSamplingOnMask(bin_mask, radius, initial_obj_voxel_idx, n_samples) -> IntArray

    Parameters
    ----------
    bin_mask: iftImage const *
    radius: float
    initial_obj_voxel_idx: int
    n_samples: long

    """
    return _pyift.GridSamplingOnMask(bin_mask, radius, initial_obj_voxel_idx, n_samples)

def GridSamplingForPatchExtraction(img_dom: "ImageDomain", patch_xsize: "int", patch_ysize: "int", patch_zsize: "int", stride_x: "int", stride_y: "int", stride_z: "int") -> "iftIntArray *":
    r"""
    GridSamplingForPatchExtraction(img_dom, patch_xsize, patch_ysize, patch_zsize, stride_x, stride_y, stride_z) -> IntArray

    Parameters
    ----------
    img_dom: iftImageDomain
    patch_xsize: int
    patch_ysize: int
    patch_zsize: int
    stride_x: int
    stride_y: int
    stride_z: int

    """
    return _pyift.GridSamplingForPatchExtraction(img_dom, patch_xsize, patch_ysize, patch_zsize, stride_x, stride_y, stride_z)

def BoundingBoxesAroundVoxels(img: "Image", voxel_indices: "IntArray", size: "int") -> "iftBoundingBoxArray *":
    r"""
    BoundingBoxesAroundVoxels(img, voxel_indices, size) -> BoundingBoxArray

    Parameters
    ----------
    img: iftImage const *
    voxel_indices: iftIntArray const *
    size: int

    """
    return _pyift.BoundingBoxesAroundVoxels(img, voxel_indices, size)

def LabelComponentsBySeeds(comp: "Image", seeds: "LabeledSet", incr: "bool") -> "iftImage *":
    r"""
    LabelComponentsBySeeds(comp, seeds, incr) -> Image

    Parameters
    ----------
    comp: iftImage *
    seeds: iftLabeledSet *
    incr: bool

    """
    return _pyift.LabelComponentsBySeeds(comp, seeds, incr)

def DataSetToLabeledSeeds(Z: "DataSet", comp: "Image") -> "iftLabeledSet *":
    r"""
    DataSetToLabeledSeeds(Z, comp) -> LabeledSet

    Parameters
    ----------
    Z: iftDataSet *
    comp: iftImage *

    """
    return _pyift.DataSetToLabeledSeeds(Z, comp)

def ConnectObjectSeeds(img: "Image", seeds: "LabeledSet") -> "iftLabeledSet *":
    r"""
    ConnectObjectSeeds(img, seeds) -> LabeledSet

    Parameters
    ----------
    img: iftImage *
    seeds: iftLabeledSet *

    """
    return _pyift.ConnectObjectSeeds(img, seeds)

def PropagateSeedsToCluster(Z: "DataSet", truelabel: "int", purity: "float") -> "iftLabeledSet *":
    r"""
    PropagateSeedsToCluster(Z, truelabel, purity) -> LabeledSet

    Parameters
    ----------
    Z: iftDataSet const *
    truelabel: int
    purity: float

    """
    return _pyift.PropagateSeedsToCluster(Z, truelabel, purity)

def SelectSeedsForEnhancement(seeds: "LabeledSet", groups: "Image", label: "int", threshold: "float") -> "iftLabeledSet *":
    r"""
    SelectSeedsForEnhancement(seeds, groups, label, threshold) -> LabeledSet

    Parameters
    ----------
    seeds: iftLabeledSet *
    groups: iftImage *
    label: int
    threshold: float

    """
    return _pyift.SelectSeedsForEnhancement(seeds, groups, label, threshold)

def SeedsFeatures(seeds: "LabeledSet", mimg: "MImage", label: "int") -> "iftDoubleMatrix *":
    r"""
    SeedsFeatures(seeds, mimg, label) -> DoubleMatrix

    Parameters
    ----------
    seeds: iftLabeledSet *
    mimg: iftMImage const *
    label: int

    """
    return _pyift.SeedsFeatures(seeds, mimg, label)

def SeedsSuperpixelBins(seeds: "LabeledSet", mimg: "MImage", superpixel: "Image", data: "DoubleMatrix", label: "IntArray") -> "void":
    r"""
    SeedsSuperpixelBins(seeds, mimg, superpixel, data, label)

    Parameters
    ----------
    seeds: iftLabeledSet *
    mimg: iftMImage const *
    superpixel: iftImage const *
    data: iftDoubleMatrix *
    label: iftIntArray *

    """
    return _pyift.SeedsSuperpixelBins(seeds, mimg, superpixel, data, label)

def DrawDilatedSeeds(image: "Image", seeds: "LabeledSet", A: "AdjRel", ctb_rgb: "ColorTable") -> "iftImage *":
    r"""
    DrawDilatedSeeds(image, seeds, A, ctb_rgb) -> Image

    Parameters
    ----------
    image: iftImage const *
    seeds: iftLabeledSet const *
    A: iftAdjRel const *
    ctb_rgb: iftColorTable const *

    """
    return _pyift.DrawDilatedSeeds(image, seeds, A, ctb_rgb)

def RemoveFrameComp(bin: "Image") -> "iftImage *":
    r"""
    RemoveFrameComp(bin) -> Image

    Parameters
    ----------
    bin: iftImage *

    """
    return _pyift.RemoveFrameComp(bin)

def CohenKappaScore(Z: "DataSet") -> "float":
    r"""
    CohenKappaScore(Z) -> float

    Parameters
    ----------
    Z: iftDataSet *

    """
    return _pyift.CohenKappaScore(Z)

def DiceSimilarity(bin_source: "Image", bin_target: "Image") -> "double":
    r"""
    DiceSimilarity(bin_source, bin_target) -> double

    Parameters
    ----------
    bin_source: iftImage const *
    bin_target: iftImage const *

    """
    return _pyift.DiceSimilarity(bin_source, bin_target)

def ASSD(bin_source: "Image", bin_target: "Image") -> "double":
    r"""
    ASSD(bin_source, bin_target) -> double

    Parameters
    ----------
    bin_source: iftImage const *
    bin_target: iftImage const *

    """
    return _pyift.ASSD(bin_source, bin_target)

def GeneralBalancedCoeff(bin_source: "Image", bin_target: "Image") -> "double":
    r"""
    GeneralBalancedCoeff(bin_source, bin_target) -> double

    Parameters
    ----------
    bin_source: iftImage const *
    bin_target: iftImage const *

    """
    return _pyift.GeneralBalancedCoeff(bin_source, bin_target)

def ShannonEntropy(image: "Image") -> "double":
    r"""
    ShannonEntropy(image) -> double

    Parameters
    ----------
    image: iftImage const *

    """
    return _pyift.ShannonEntropy(image)
IFT_ISF_UNDEFINED_SAMPLING = _pyift.IFT_ISF_UNDEFINED_SAMPLING

IFT_ISF_GRID_SAMPLING = _pyift.IFT_ISF_GRID_SAMPLING

IFT_ISF_MIXED_SAMPLING = _pyift.IFT_ISF_MIXED_SAMPLING

IFT_ISF_RANDOM_SAMPLING = _pyift.IFT_ISF_RANDOM_SAMPLING

IFT_ISF_GEODESIC_SAMPLING = _pyift.IFT_ISF_GEODESIC_SAMPLING

IFT_ISF_LATTICE_SAMPLING = _pyift.IFT_ISF_LATTICE_SAMPLING

IFT_ISF_HEXGRID_SAMPLING = _pyift.IFT_ISF_HEXGRID_SAMPLING

IFT_ISF_UNDEFINED_PATHCOST = _pyift.IFT_ISF_UNDEFINED_PATHCOST

IFT_ISF_ADD_ROOT_PATHCOST = _pyift.IFT_ISF_ADD_ROOT_PATHCOST

IFT_ISF_ADD_MEAN_PATHCOST = _pyift.IFT_ISF_ADD_MEAN_PATHCOST

IFT_ISF_ADD_ARC_PATHCOST = _pyift.IFT_ISF_ADD_ARC_PATHCOST

IFT_ISF_MAX_MEAN_PATHCOST = _pyift.IFT_ISF_MAX_MEAN_PATHCOST

IFT_ISF_UNDEFINED_SEEDRECOMP = _pyift.IFT_ISF_UNDEFINED_SEEDRECOMP

IFT_ISF_MEDOID_SEEDRECOMP = _pyift.IFT_ISF_MEDOID_SEEDRECOMP

IFT_ISF_CENTROID_SEEDRECOMP = _pyift.IFT_ISF_CENTROID_SEEDRECOMP

class ISFOptions(object):
    r"""Proxy of C iftISFOptions struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nSuperpixels = property(_pyift.ISFOptions_nSuperpixels_get, _pyift.ISFOptions_nSuperpixels_set, doc=r"""nSuperpixels""")
    nIters = property(_pyift.ISFOptions_nIters_get, _pyift.ISFOptions_nIters_set, doc=r"""nIters""")
    nSmoothIters = property(_pyift.ISFOptions_nSmoothIters_get, _pyift.ISFOptions_nSmoothIters_set, doc=r"""nSmoothIters""")
    smallSpThreshold = property(_pyift.ISFOptions_smallSpThreshold_get, _pyift.ISFOptions_smallSpThreshold_set, doc=r"""smallSpThreshold""")
    sampling = property(_pyift.ISFOptions_sampling_get, _pyift.ISFOptions_sampling_set, doc=r"""sampling""")
    pathCost = property(_pyift.ISFOptions_pathCost_get, _pyift.ISFOptions_pathCost_set, doc=r"""pathCost""")
    seedRecomp = property(_pyift.ISFOptions_seedRecomp_get, _pyift.ISFOptions_seedRecomp_set, doc=r"""seedRecomp""")
    __swig_destroy__ = _pyift.delete_ISFOptions

    def __init__(self):
        r"""__init__(self) -> ISFOptions"""
        _pyift.ISFOptions_swiginit(self, _pyift.new_ISFOptions())

# Register ISFOptions in _pyift:
_pyift.ISFOptions_swigregister(ISFOptions)


def InitISFOptions(nSuperpixels: "int", nIters: "int", nSmoothIters: "int", smallSpThreshold: "float", sampling: "iftISFSampling", pathCost: "iftISFPathCost", seedRecomp: "iftISFSeedRecomp") -> "iftISFOptions *":
    r"""
    InitISFOptions(nSuperpixels, nIters, nSmoothIters, smallSpThreshold, sampling, pathCost, seedRecomp) -> ISFOptions

    Parameters
    ----------
    nSuperpixels: int
    nIters: int
    nSmoothIters: int
    smallSpThreshold: float
    sampling: enum iftISFSampling
    pathCost: enum iftISFPathCost
    seedRecomp: enum iftISFSeedRecomp

    """
    return _pyift.InitISFOptions(nSuperpixels, nIters, nSmoothIters, smallSpThreshold, sampling, pathCost, seedRecomp)
class SuperpixelIGraph(object):
    r"""Proxy of C iftSuperpixelIGraph struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nNodes = property(_pyift.SuperpixelIGraph_nNodes_get, _pyift.SuperpixelIGraph_nNodes_set, doc=r"""nNodes""")
    nodeAdj = property(_pyift.SuperpixelIGraph_nodeAdj_get, _pyift.SuperpixelIGraph_nodeAdj_set, doc=r"""nodeAdj""")
    feats = property(_pyift.SuperpixelIGraph_feats_get, _pyift.SuperpixelIGraph_feats_set, doc=r"""feats""")
    seedFeats = property(_pyift.SuperpixelIGraph_seedFeats_get, _pyift.SuperpixelIGraph_seedFeats_set, doc=r"""seedFeats""")
    distFun = property(_pyift.SuperpixelIGraph_distFun_get, _pyift.SuperpixelIGraph_distFun_set, doc=r"""distFun""")
    distAlpha = property(_pyift.SuperpixelIGraph_distAlpha_get, _pyift.SuperpixelIGraph_distAlpha_set, doc=r"""distAlpha""")
    pos = property(_pyift.SuperpixelIGraph_pos_get, _pyift.SuperpixelIGraph_pos_set, doc=r"""pos""")
    seedPos = property(_pyift.SuperpixelIGraph_seedPos_get, _pyift.SuperpixelIGraph_seedPos_set, doc=r"""seedPos""")
    alpha = property(_pyift.SuperpixelIGraph_alpha_get, _pyift.SuperpixelIGraph_alpha_set, doc=r"""alpha""")
    beta = property(_pyift.SuperpixelIGraph_beta_get, _pyift.SuperpixelIGraph_beta_set, doc=r"""beta""")
    refImg = property(_pyift.SuperpixelIGraph_refImg_get, _pyift.SuperpixelIGraph_refImg_set, doc=r"""refImg""")
    spSize = property(_pyift.SuperpixelIGraph_spSize_get, _pyift.SuperpixelIGraph_spSize_set, doc=r"""spSize""")
    ann = property(_pyift.SuperpixelIGraph_ann_get, _pyift.SuperpixelIGraph_ann_set, doc=r"""ann""")
    A = property(_pyift.SuperpixelIGraph_A_get, _pyift.SuperpixelIGraph_A_set, doc=r"""A""")
    type = property(_pyift.SuperpixelIGraph_type_get, _pyift.SuperpixelIGraph_type_set, doc=r"""type""")
    __swig_destroy__ = _pyift.delete_SuperpixelIGraph

    def __init__(self):
        r"""__init__(self) -> SuperpixelIGraph"""
        _pyift.SuperpixelIGraph_swiginit(self, _pyift.new_SuperpixelIGraph())

# Register SuperpixelIGraph in _pyift:
_pyift.SuperpixelIGraph_swigregister(SuperpixelIGraph)


def InitSuperpixelIGraph(refImg: "Image") -> "iftSuperpixelIGraph *":
    r"""
    InitSuperpixelIGraph(refImg) -> SuperpixelIGraph

    Parameters
    ----------
    refImg: iftImage const *

    """
    return _pyift.InitSuperpixelIGraph(refImg)

def SetSuperpixelIGraphImplicitAdjacency(igraph: "SuperpixelIGraph", A: "AdjRel") -> "void":
    r"""
    SetSuperpixelIGraphImplicitAdjacency(igraph, A)

    Parameters
    ----------
    igraph: iftSuperpixelIGraph *
    A: iftAdjRel *

    """
    return _pyift.SetSuperpixelIGraphImplicitAdjacency(igraph, A)

def SetSuperpixelIGraphExplicitRAG(igraph: "SuperpixelIGraph", A: "AdjRel") -> "void":
    r"""
    SetSuperpixelIGraphExplicitRAG(igraph, A)

    Parameters
    ----------
    igraph: iftSuperpixelIGraph *
    A: iftAdjRel const *

    """
    return _pyift.SetSuperpixelIGraphExplicitRAG(igraph, A)

def SetSuperpixelIGraphFeatures(igraph: "SuperpixelIGraph", superpixelFeatures: "Matrix", distFun: "iftArcWeightFun", alpha: "float", beta: "float") -> "void":
    r"""
    SetSuperpixelIGraphFeatures(igraph, superpixelFeatures, distFun, alpha, beta)

    Parameters
    ----------
    igraph: iftSuperpixelIGraph *
    superpixelFeatures: iftMatrix const *
    distFun: iftArcWeightFun
    alpha: float
    beta: float

    """
    return _pyift.SetSuperpixelIGraphFeatures(igraph, superpixelFeatures, distFun, alpha, beta)

def SuperpixelSegmentationByRISF(igraph: "SuperpixelIGraph", opt: "ISFOptions", img: "Image") -> "iftImage *":
    r"""
    SuperpixelSegmentationByRISF(igraph, opt, img) -> Image

    Parameters
    ----------
    igraph: iftSuperpixelIGraph *
    opt: iftISFOptions const *
    img: iftImage const *

    """
    return _pyift.SuperpixelSegmentationByRISF(igraph, opt, img)

def ComputeSuperpixelFeaturesByGeometricCenter(superpixelLabelMap: "Image") -> "iftMatrix *":
    r"""
    ComputeSuperpixelFeaturesByGeometricCenter(superpixelLabelMap) -> Matrix

    Parameters
    ----------
    superpixelLabelMap: iftImage const *

    """
    return _pyift.ComputeSuperpixelFeaturesByGeometricCenter(superpixelLabelMap)

def ComputeSuperpixelFeaturesByColorSpaceMean(superpixelLabelMap: "Image", img: "Image", colorSpace: "iftColorSpace") -> "iftMatrix *":
    r"""
    ComputeSuperpixelFeaturesByColorSpaceMean(superpixelLabelMap, img, colorSpace) -> Matrix

    Parameters
    ----------
    superpixelLabelMap: iftImage const *
    img: iftImage const *
    colorSpace: enum iftColorSpace

    """
    return _pyift.ComputeSuperpixelFeaturesByColorSpaceMean(superpixelLabelMap, img, colorSpace)

def ComputeSuperpixelFeaturesByMImageMean(mimg: "MImage", superpixelLabelMap: "Image") -> "iftMatrix *":
    r"""
    ComputeSuperpixelFeaturesByMImageMean(mimg, superpixelLabelMap) -> Matrix

    Parameters
    ----------
    mimg: iftMImage const *
    superpixelLabelMap: iftImage const *

    """
    return _pyift.ComputeSuperpixelFeaturesByMImageMean(mimg, superpixelLabelMap)

def GraphCut(gradient: "Image", seeds: "LabeledSet", beta: "int") -> "iftImage *":
    r"""
    GraphCut(gradient, seeds, beta) -> Image

    Parameters
    ----------
    gradient: iftImage const *
    seeds: iftLabeledSet *
    beta: int

    """
    return _pyift.GraphCut(gradient, seeds, beta)

def GraphCutFromMImage(mimg: "MImage", seeds: "LabeledSet", beta: "int") -> "iftImage *":
    r"""
    GraphCutFromMImage(mimg, seeds, beta) -> Image

    Parameters
    ----------
    mimg: iftMImage const *
    seeds: iftLabeledSet *
    beta: int

    """
    return _pyift.GraphCutFromMImage(mimg, seeds, beta)

def GraphCutWithObjmap(mimg: "MImage", objmap: "Image", seeds: "LabeledSet", alpha: "float", beta: "int") -> "iftImage *":
    r"""
    GraphCutWithObjmap(mimg, objmap, seeds, alpha, beta) -> Image

    Parameters
    ----------
    mimg: iftMImage const *
    objmap: iftImage const *
    seeds: iftLabeledSet *
    alpha: float
    beta: int

    """
    return _pyift.GraphCutWithObjmap(mimg, objmap, seeds, alpha, beta)

def OptimumPathGraphCut(gradient: "Image", seeds: "LabeledSet", beta: "int") -> "iftImage *":
    r"""
    OptimumPathGraphCut(gradient, seeds, beta) -> Image

    Parameters
    ----------
    gradient: iftImage const *
    seeds: iftLabeledSet *
    beta: int

    """
    return _pyift.OptimumPathGraphCut(gradient, seeds, beta)

def GraphCutBeta(mimg: "MImage") -> "double":
    r"""
    GraphCutBeta(mimg) -> double

    Parameters
    ----------
    mimg: iftMImage *

    """
    return _pyift.GraphCutBeta(mimg)
class MST(object):
    r"""Proxy of C iftMST struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    node = property(_pyift.MST_node_get, _pyift.MST_node_set, doc=r"""node""")
    nnodes = property(_pyift.MST_nnodes_get, _pyift.MST_nnodes_set, doc=r"""nnodes""")
    maxarcw = property(_pyift.MST_maxarcw_get, _pyift.MST_maxarcw_set, doc=r"""maxarcw""")
    minarcw = property(_pyift.MST_minarcw_get, _pyift.MST_minarcw_set, doc=r"""minarcw""")
    Z = property(_pyift.MST_Z_get, _pyift.MST_Z_set, doc=r"""Z""")
    __swig_destroy__ = _pyift.delete_MST

    def __init__(self):
        r"""__init__(self) -> MST"""
        _pyift.MST_swiginit(self, _pyift.new_MST())

# Register MST in _pyift:
_pyift.MST_swigregister(MST)


def CreateMST(Z: "DataSet") -> "iftMST *":
    r"""
    CreateMST(Z) -> MST

    Parameters
    ----------
    Z: iftDataSet *

    """
    return _pyift.CreateMST(Z)
class KnnGraph(object):
    r"""Proxy of C iftKnnGraph struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    node = property(_pyift.KnnGraph_node_get, _pyift.KnnGraph_node_set, doc=r"""node""")
    pathval = property(_pyift.KnnGraph_pathval_get, _pyift.KnnGraph_pathval_set, doc=r"""pathval""")
    ordered_nodes = property(_pyift.KnnGraph_ordered_nodes_get, _pyift.KnnGraph_ordered_nodes_set, doc=r"""ordered_nodes""")
    nnodes = property(_pyift.KnnGraph_nnodes_get, _pyift.KnnGraph_nnodes_set, doc=r"""nnodes""")
    maxarcw = property(_pyift.KnnGraph_maxarcw_get, _pyift.KnnGraph_maxarcw_set, doc=r"""maxarcw""")
    kmax = property(_pyift.KnnGraph_kmax_get, _pyift.KnnGraph_kmax_set, doc=r"""kmax""")
    k = property(_pyift.KnnGraph_k_get, _pyift.KnnGraph_k_set, doc=r"""k""")
    Q = property(_pyift.KnnGraph_Q_get, _pyift.KnnGraph_Q_set, doc=r"""Q""")
    Z = property(_pyift.KnnGraph_Z_get, _pyift.KnnGraph_Z_set, doc=r"""Z""")

    def AsDict(self) -> "PyObject *":
        r"""AsDict(self) -> PyObject *"""
        return _pyift.KnnGraph_AsDict(self)
    __swig_destroy__ = _pyift.delete_KnnGraph

    def __init__(self):
        r"""__init__(self) -> KnnGraph"""
        _pyift.KnnGraph_swiginit(self, _pyift.new_KnnGraph())

# Register KnnGraph in _pyift:
_pyift.KnnGraph_swigregister(KnnGraph)


def CreateKnnGraph(Z: "DataSet", kmax: "int") -> "iftKnnGraph *":
    r"""
    CreateKnnGraph(Z, kmax) -> KnnGraph

    Parameters
    ----------
    Z: iftDataSet *
    kmax: int

    """
    return _pyift.CreateKnnGraph(Z, kmax)

def ReadKnnGraph(*args) -> "iftKnnGraph *":
    r"""
    ReadKnnGraph(format) -> KnnGraph

    Parameters
    ----------
    format: char const *

    """
    return _pyift.ReadKnnGraph(*args)

def WriteKnnGraph(*args) -> "void":
    r"""
    WriteKnnGraph(graph, path)

    Parameters
    ----------
    graph: iftKnnGraph const *
    path: char const *

    """
    return _pyift.WriteKnnGraph(*args)

def UnsupTrain(graph: "KnnGraph", GraphCutFun: "iftKnnGraphCutFun") -> "int":
    r"""
    UnsupTrain(graph, GraphCutFun) -> int

    Parameters
    ----------
    graph: iftKnnGraph *
    iftGraphCutFun: iftKnnGraphCutFun

    """
    return _pyift.UnsupTrain(graph, GraphCutFun)

def NormalizedCut(graph: "KnnGraph") -> "float":
    r"""
    NormalizedCut(graph) -> float

    Parameters
    ----------
    graph: iftKnnGraph *

    """
    return _pyift.NormalizedCut(graph)

def ExtractCentroidsFromDataSetAsDataSet(Z: "DataSet", returnRealCent: "bool", usePrototypes: "bool") -> "iftDataSet *":
    r"""
    ExtractCentroidsFromDataSetAsDataSet(Z, returnRealCent, usePrototypes) -> DataSet

    Parameters
    ----------
    Z: iftDataSet *
    returnRealCent: bool
    usePrototypes: bool

    """
    return _pyift.ExtractCentroidsFromDataSetAsDataSet(Z, returnRealCent, usePrototypes)

def MSTtoKnnGraph(mst: "MST", number_neigh: "int") -> "iftKnnGraph *":
    r"""
    MSTtoKnnGraph(mst, number_neigh) -> KnnGraph

    Parameters
    ----------
    mst: iftMST *
    number_neigh: int

    """
    return _pyift.MSTtoKnnGraph(mst, number_neigh)

def NormalizedCutPtr() -> "float (*)(iftKnnGraph *)":
    r"""NormalizedCutPtr() -> float (*)(iftKnnGraph *)"""
    return _pyift.NormalizedCutPtr()
class CplGraph(object):
    r"""Proxy of C iftCplGraph struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    node = property(_pyift.CplGraph_node_get, _pyift.CplGraph_node_set, doc=r"""node""")
    pathval = property(_pyift.CplGraph_pathval_get, _pyift.CplGraph_pathval_set, doc=r"""pathval""")
    ordered_nodes = property(_pyift.CplGraph_ordered_nodes_get, _pyift.CplGraph_ordered_nodes_set, doc=r"""ordered_nodes""")
    nnodes = property(_pyift.CplGraph_nnodes_get, _pyift.CplGraph_nnodes_set, doc=r"""nnodes""")
    Q = property(_pyift.CplGraph_Q_get, _pyift.CplGraph_Q_set, doc=r"""Q""")
    Z = property(_pyift.CplGraph_Z_get, _pyift.CplGraph_Z_set, doc=r"""Z""")

    def AsDict(self) -> "PyObject *":
        r"""AsDict(self) -> PyObject *"""
        return _pyift.CplGraph_AsDict(self)
    __swig_destroy__ = _pyift.delete_CplGraph

    def __init__(self):
        r"""__init__(self) -> CplGraph"""
        _pyift.CplGraph_swiginit(self, _pyift.new_CplGraph())

# Register CplGraph in _pyift:
_pyift.CplGraph_swigregister(CplGraph)


def WriteCplGraph(graph: "CplGraph", pathname: "char const *") -> "void":
    r"""
    WriteCplGraph(graph, pathname)

    Parameters
    ----------
    graph: iftCplGraph const *
    pathname: char const *

    """
    return _pyift.WriteCplGraph(graph, pathname)

def ReadCplGraph(pathname: "char const *") -> "iftCplGraph *":
    r"""
    ReadCplGraph(pathname) -> CplGraph

    Parameters
    ----------
    pathname: char const *

    """
    return _pyift.ReadCplGraph(pathname)

def CreateCplGraph(Z: "DataSet") -> "iftCplGraph *":
    r"""
    CreateCplGraph(Z) -> CplGraph

    Parameters
    ----------
    Z: iftDataSet *

    """
    return _pyift.CreateCplGraph(Z)

def SupTrain(graph: "CplGraph") -> "void":
    r"""
    SupTrain(graph)

    Parameters
    ----------
    graph: iftCplGraph *

    """
    return _pyift.SupTrain(graph)

def Classify(graph: "CplGraph", Ztest: "DataSet") -> "int":
    r"""
    Classify(graph, Ztest) -> int

    Parameters
    ----------
    graph: iftCplGraph const *
    Ztest: iftDataSet *

    """
    return _pyift.Classify(graph, Ztest)

def ClassifyByOneClassOPF(Ztest: "DataSet", graph: "KnnGraph", quantile_of_k: "float") -> "void":
    r"""
    ClassifyByOneClassOPF(Ztest, graph, quantile_of_k)

    Parameters
    ----------
    Ztest: iftDataSet *
    graph: iftKnnGraph const *
    quantile_of_k: float

    """
    return _pyift.ClassifyByOneClassOPF(Ztest, graph, quantile_of_k)

def ClassifyWithCertaintyValues(graph: "CplGraph", Ztest: "DataSet") -> "int":
    r"""
    ClassifyWithCertaintyValues(graph, Ztest) -> int

    Parameters
    ----------
    graph: iftCplGraph const *
    Ztest: iftDataSet *

    """
    return _pyift.ClassifyWithCertaintyValues(graph, Ztest)

def SemiSupTrain(Ztrain: "DataSet") -> "iftCplGraph *":
    r"""
    SemiSupTrain(Ztrain) -> CplGraph

    Parameters
    ----------
    Ztrain: iftDataSet *

    """
    return _pyift.SemiSupTrain(Ztrain)
class ImageForest(object):
    r"""Proxy of C iftImageForest struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pathval = property(_pyift.ImageForest_pathval_get, _pyift.ImageForest_pathval_set, doc=r"""pathval""")
    label = property(_pyift.ImageForest_label_get, _pyift.ImageForest_label_set, doc=r"""label""")
    root = property(_pyift.ImageForest_root_get, _pyift.ImageForest_root_set, doc=r"""root""")
    pred = property(_pyift.ImageForest_pred_get, _pyift.ImageForest_pred_set, doc=r"""pred""")
    marker = property(_pyift.ImageForest_marker_get, _pyift.ImageForest_marker_set, doc=r"""marker""")
    processed = property(_pyift.ImageForest_processed_get, _pyift.ImageForest_processed_set, doc=r"""processed""")
    Q = property(_pyift.ImageForest_Q_get, _pyift.ImageForest_Q_set, doc=r"""Q""")
    img = property(_pyift.ImageForest_img_get, _pyift.ImageForest_img_set, doc=r"""img""")
    A = property(_pyift.ImageForest_A_get, _pyift.ImageForest_A_set, doc=r"""A""")
    __swig_destroy__ = _pyift.delete_ImageForest

    def SetPathval(self, _in: "Image") -> "void":
        r"""
        SetPathval(self, _in)

        Parameters
        ----------
        in: iftImage *

        """
        return _pyift.ImageForest_SetPathval(self, _in)

    def SetLabel(self, _in: "Image") -> "void":
        r"""
        SetLabel(self, _in)

        Parameters
        ----------
        in: iftImage *

        """
        return _pyift.ImageForest_SetLabel(self, _in)

    def SetRoot(self, _in: "Image") -> "void":
        r"""
        SetRoot(self, _in)

        Parameters
        ----------
        in: iftImage *

        """
        return _pyift.ImageForest_SetRoot(self, _in)

    def SetMarker(self, _in: "Image") -> "void":
        r"""
        SetMarker(self, _in)

        Parameters
        ----------
        in: iftImage *

        """
        return _pyift.ImageForest_SetMarker(self, _in)

    def SetPred(self, _in: "Image") -> "void":
        r"""
        SetPred(self, _in)

        Parameters
        ----------
        in: iftImage *

        """
        return _pyift.ImageForest_SetPred(self, _in)

    def SetImage(self, _in: "Image") -> "void":
        r"""
        SetImage(self, _in)

        Parameters
        ----------
        in: iftImage *

        """
        return _pyift.ImageForest_SetImage(self, _in)

    def GetPathval(self) -> "iftImage *":
        r"""GetPathval(self) -> Image"""
        return _pyift.ImageForest_GetPathval(self)

    def GetLabel(self) -> "iftImage *":
        r"""GetLabel(self) -> Image"""
        return _pyift.ImageForest_GetLabel(self)

    def GetRoot(self) -> "iftImage *":
        r"""GetRoot(self) -> Image"""
        return _pyift.ImageForest_GetRoot(self)

    def GetMarker(self) -> "iftImage *":
        r"""GetMarker(self) -> Image"""
        return _pyift.ImageForest_GetMarker(self)

    def GetPred(self) -> "iftImage *":
        r"""GetPred(self) -> Image"""
        return _pyift.ImageForest_GetPred(self)

    def GetImage(self) -> "iftImage *":
        r"""GetImage(self) -> Image"""
        return _pyift.ImageForest_GetImage(self)

    def __init__(self):
        r"""__init__(self) -> ImageForest"""
        _pyift.ImageForest_swiginit(self, _pyift.new_ImageForest())

# Register ImageForest in _pyift:
_pyift.ImageForest_swigregister(ImageForest)


def CreateImageForest(img: "Image", A: "AdjRel") -> "iftImageForest *":
    r"""
    CreateImageForest(img, A) -> ImageForest

    Parameters
    ----------
    img: iftImage *
    A: iftAdjRel *

    """
    return _pyift.CreateImageForest(img, A)

def ResetImageForest(fst: "ImageForest") -> "void":
    r"""
    ResetImageForest(fst)

    Parameters
    ----------
    fst: iftImageForest *

    """
    return _pyift.ResetImageForest(fst)

def ImageForestToDataSet(fst: "ImageForest", A: "AdjRel") -> "iftDataSet *":
    r"""
    ImageForestToDataSet(fst, A) -> DataSet

    Parameters
    ----------
    fst: iftImageForest *
    A: iftAdjRel *

    """
    return _pyift.ImageForestToDataSet(fst, A)

def GeodesicDistTrans(S: "Set", mask: "Image", A: "AdjRel") -> "iftFImage *":
    r"""
    GeodesicDistTrans(S, mask, A) -> FImage

    Parameters
    ----------
    S: iftSet const *
    mask: iftImage const *
    A: iftAdjRel const *

    """
    return _pyift.GeodesicDistTrans(S, mask, A)

def BorderDistTrans(label: "Image", A: "AdjRel") -> "iftImage *":
    r"""
    BorderDistTrans(label, A) -> Image

    Parameters
    ----------
    label: iftImage const *
    A: iftAdjRel *

    """
    return _pyift.BorderDistTrans(label, A)

def SetDistTrans(S: "Set", xsize: "int", ysize: "int", zsize: "int") -> "iftImage *":
    r"""
    SetDistTrans(S, xsize, ysize, zsize) -> Image

    Parameters
    ----------
    S: iftSet *
    xsize: int
    ysize: int
    zsize: int

    """
    return _pyift.SetDistTrans(S, xsize, ysize, zsize)

def MSSkel(bin: "Image") -> "iftFImage *":
    r"""
    MSSkel(bin) -> FImage

    Parameters
    ----------
    bin: iftImage *

    """
    return _pyift.MSSkel(bin)

def MSSkel2D(label_img: "Image", A: "AdjRel", side: "iftSide", dist_out: "iftImage **", relabel_img_out: "iftImage **") -> "iftImage **, iftImage **":
    r"""
    MSSkel2D(label_img, A, side, dist_out, relabel_img_out) -> FImage

    Parameters
    ----------
    label_img: iftImage *
    A: iftAdjRel *
    side: enum iftSide
    dist_out: iftImage **
    relabel_img_out: iftImage **

    """
    return _pyift.MSSkel2D(label_img, A, side, dist_out, relabel_img_out)

def EuclDistTrans(label_img: "Image", Ain: "AdjRel", side: "iftSide", root_out: "iftImage **", edt_label_out: "iftImage **", pred_out: "iftImage **") -> "iftImage **, iftImage **, iftImage **":
    r"""
    EuclDistTrans(label_img, Ain, side, root_out, edt_label_out, pred_out) -> Image

    Parameters
    ----------
    label_img: iftImage const *
    Ain: iftAdjRel const *
    side: enum iftSide
    root_out: iftImage **
    edt_label_out: iftImage **
    pred_out: iftImage **

    """
    return _pyift.EuclDistTrans(label_img, Ain, side, root_out, edt_label_out, pred_out)

def GeodesicDistTransFromSet(mask: "Image", set: "Set", root_out: "iftImage **") -> "iftImage **":
    r"""
    GeodesicDistTransFromSet(mask, set, root_out) -> Image

    Parameters
    ----------
    mask: iftImage const *
    set: iftSet const *
    root_out: iftImage **

    """
    return _pyift.GeodesicDistTransFromSet(mask, set, root_out)

def MedialAxisTrans2D(bin: "Image", scale_thres: "float", side: "iftSide") -> "iftImage *":
    r"""
    MedialAxisTrans2D(bin, scale_thres, side) -> Image

    Parameters
    ----------
    bin: iftImage *
    scale_thres: float
    side: enum iftSide

    """
    return _pyift.MedialAxisTrans2D(bin, scale_thres, side)

def ShapeReconstruction(medial_axis: "Image", value: "int") -> "iftImage *":
    r"""
    ShapeReconstruction(medial_axis, value) -> Image

    Parameters
    ----------
    medial_axis: iftImage *
    value: int

    """
    return _pyift.ShapeReconstruction(medial_axis, value)

def TerminalPoints2D(skel: "Image") -> "iftImage *":
    r"""
    TerminalPoints2D(skel) -> Image

    Parameters
    ----------
    skel: iftImage *

    """
    return _pyift.TerminalPoints2D(skel)

def BranchPoints2D(skel: "Image") -> "iftImage *":
    r"""
    BranchPoints2D(skel) -> Image

    Parameters
    ----------
    skel: iftImage *

    """
    return _pyift.BranchPoints2D(skel)

def TerminalPointSet2D(skel: "Image") -> "iftSet *":
    r"""
    TerminalPointSet2D(skel) -> Set

    Parameters
    ----------
    skel: iftImage *

    """
    return _pyift.TerminalPointSet2D(skel)

def ContourToArray(contour: "Image") -> "iftVoxelArray *":
    r"""
    ContourToArray(contour) -> VoxelArray

    Parameters
    ----------
    contour: iftImage const *

    """
    return _pyift.ContourToArray(contour)

def ApproxContour(contour: "Image", epsilon: "double") -> "iftVoxelArray *":
    r"""
    ApproxContour(contour, epsilon) -> VoxelArray

    Parameters
    ----------
    contour: iftImage const *
    epsilon: double

    """
    return _pyift.ApproxContour(contour, epsilon)

def ApproxVoxelArray(array: "VoxelArray", epsilon: "double") -> "iftVoxelArray *":
    r"""
    ApproxVoxelArray(array, epsilon) -> VoxelArray

    Parameters
    ----------
    array: iftVoxelArray const *
    epsilon: double

    """
    return _pyift.ApproxVoxelArray(array, epsilon)

def VoxelArrayToSet(image: "Image", array: "VoxelArray") -> "iftSet *":
    r"""
    VoxelArrayToSet(image, array) -> Set

    Parameters
    ----------
    image: iftImage const *
    array: iftVoxelArray const *

    """
    return _pyift.VoxelArrayToSet(image, array)

def NearestInContour(contour: "Image", set: "Set", mask: "Image") -> "iftSet *":
    r"""
    NearestInContour(contour, set, mask) -> Set

    Parameters
    ----------
    contour: iftImage const *
    set: iftSet const *
    mask: iftImage const *

    """
    return _pyift.NearestInContour(contour, set, mask)

def EnhanceEdges(img: "Image", A: "AdjRel", seed: "LabeledSet", alpha: "float") -> "iftImage *":
    r"""
    EnhanceEdges(img, A, seed, alpha) -> Image

    Parameters
    ----------
    img: iftImage *
    A: iftAdjRel *
    seed: iftLabeledSet *
    alpha: float

    """
    return _pyift.EnhanceEdges(img, A, seed, alpha)

def Watershed(basins: "Image", Ain: "AdjRel", seeds: "LabeledSet", forbidden: "Set") -> "iftImage *":
    r"""
    Watershed(basins, Ain, seeds, forbidden) -> Image

    Parameters
    ----------
    basins: iftImage const *
    Ain: iftAdjRel *
    seeds: iftLabeledSet *
    forbidden: iftSet *

    """
    return _pyift.Watershed(basins, Ain, seeds, forbidden)

def WaterCut(mimg: "MImage", Ain: "AdjRel", seeds: "LabeledSet", forbidden: "Set") -> "iftImage *":
    r"""
    WaterCut(mimg, Ain, seeds, forbidden) -> Image

    Parameters
    ----------
    mimg: iftMImage *
    Ain: iftAdjRel *
    seeds: iftLabeledSet *
    forbidden: iftSet *

    """
    return _pyift.WaterCut(mimg, Ain, seeds, forbidden)

def WaterGray(basins: "Image", marker: "Image", A: "AdjRel") -> "iftImage *":
    r"""
    WaterGray(basins, marker, A) -> Image

    Parameters
    ----------
    basins: iftImage *
    marker: iftImage *
    A: iftAdjRel *

    """
    return _pyift.WaterGray(basins, marker, A)

def WaterGrayForest(fst: "ImageForest", marker: "Image") -> "void":
    r"""
    WaterGrayForest(fst, marker)

    Parameters
    ----------
    fst: iftImageForest *
    marker: iftImage *

    """
    return _pyift.WaterGrayForest(fst, marker)

def OrientedWatershed(img: "Image", grad: "Image", Ain: "AdjRel", alpha: "FloatArray", seeds: "LabeledSet", forbidden: "Set") -> "iftImage *":
    r"""
    OrientedWatershed(img, grad, Ain, alpha, seeds, forbidden) -> Image

    Parameters
    ----------
    img: iftImage const *
    grad: iftImage const *
    Ain: iftAdjRel *
    alpha: iftFloatArray *
    seeds: iftLabeledSet *
    forbidden: iftSet *

    """
    return _pyift.OrientedWatershed(img, grad, Ain, alpha, seeds, forbidden)

def Otsu(img: "Image") -> "int":
    r"""
    Otsu(img) -> int

    Parameters
    ----------
    img: iftImage const *

    """
    return _pyift.Otsu(img)

def Threshold(img: "Image", lowest: "int", highest: "int", value: "int") -> "iftImage *":
    r"""
    Threshold(img, lowest, highest, value) -> Image

    Parameters
    ----------
    img: iftImage const *
    lowest: int
    highest: int
    value: int

    """
    return _pyift.Threshold(img, lowest, highest, value)

def AboveAdaptiveThreshold(img: "Image", mask: "Image", A: "AdjRel", perc: "float", niters: "int", value: "int") -> "iftImage *":
    r"""
    AboveAdaptiveThreshold(img, mask, A, perc, niters, value) -> Image

    Parameters
    ----------
    img: iftImage *
    mask: iftImage *
    A: iftAdjRel *
    perc: float
    niters: int
    value: int

    """
    return _pyift.AboveAdaptiveThreshold(img, mask, A, perc, niters, value)

def BelowAdaptiveThreshold(img: "Image", mask: "Image", A: "AdjRel", perc: "float", niters: "int", value: "int") -> "iftImage *":
    r"""
    BelowAdaptiveThreshold(img, mask, A, perc, niters, value) -> Image

    Parameters
    ----------
    img: iftImage *
    mask: iftImage *
    A: iftAdjRel *
    perc: float
    niters: int
    value: int

    """
    return _pyift.BelowAdaptiveThreshold(img, mask, A, perc, niters, value)

def BorderImage(label: "Image", get_margins: "bool") -> "iftImage *":
    r"""
    BorderImage(label, get_margins) -> Image

    Parameters
    ----------
    label: iftImage const *
    get_margins: bool

    """
    return _pyift.BorderImage(label, get_margins)

def SelectAndPropagateRegionsAboveAreaByColor(img: "Image", label: "Image", area: "int") -> "iftImage *":
    r"""
    SelectAndPropagateRegionsAboveAreaByColor(img, label, area) -> Image

    Parameters
    ----------
    img: iftImage *
    label: iftImage *
    area: int

    """
    return _pyift.SelectAndPropagateRegionsAboveAreaByColor(img, label, area)

def SmoothRegionsByDiffusion(label_img: "Image", orig_img: "Image", smooth_factor: "float", n_iters: "int") -> "iftImage *":
    r"""
    SmoothRegionsByDiffusion(label_img, orig_img, smooth_factor, n_iters) -> Image

    Parameters
    ----------
    label_img: iftImage const *
    orig_img: iftImage const *
    smooth_factor: float
    n_iters: int

    """
    return _pyift.SmoothRegionsByDiffusion(label_img, orig_img, smooth_factor, n_iters)

def OrientedWaterCut(img: "Image", Ain: "AdjRel", alpha: "FloatArray", seeds: "LabeledSet", forbidden: "Set") -> "iftImage *":
    r"""
    OrientedWaterCut(img, Ain, alpha, seeds, forbidden) -> Image

    Parameters
    ----------
    img: iftImage const *
    Ain: iftAdjRel *
    alpha: iftFloatArray *
    seeds: iftLabeledSet *
    forbidden: iftSet *

    """
    return _pyift.OrientedWaterCut(img, Ain, alpha, seeds, forbidden)

def OrientedColorWaterCut(mimg: "MImage", orient: "Image", Ain: "AdjRel", beta: "float", seeds: "LabeledSet") -> "iftImage *":
    r"""
    OrientedColorWaterCut(mimg, orient, Ain, beta, seeds) -> Image

    Parameters
    ----------
    mimg: iftMImage *
    orient: iftImage *
    Ain: iftAdjRel *
    beta: float
    seeds: iftLabeledSet *

    """
    return _pyift.OrientedColorWaterCut(mimg, orient, Ain, beta, seeds)

def EnhancedWaterCut(mimg: "MImage", objmap: "Image", Ain: "AdjRel", seeds: "LabeledSet", alpha: "float") -> "iftImage *":
    r"""
    EnhancedWaterCut(mimg, objmap, Ain, seeds, alpha) -> Image

    Parameters
    ----------
    mimg: iftMImage *
    objmap: iftImage *
    Ain: iftAdjRel *
    seeds: iftLabeledSet *
    alpha: float

    """
    return _pyift.EnhancedWaterCut(mimg, objmap, Ain, seeds, alpha)

def EnhancedWatershed(basins: "Image", objmap: "Image", Ain: "AdjRel", seeds: "LabeledSet", alpha: "float") -> "iftImage *":
    r"""
    EnhancedWatershed(basins, objmap, Ain, seeds, alpha) -> Image

    Parameters
    ----------
    basins: iftImage *
    objmap: iftImage *
    Ain: iftAdjRel *
    seeds: iftLabeledSet *
    alpha: float

    """
    return _pyift.EnhancedWatershed(basins, objmap, Ain, seeds, alpha)

def SuperPixelMajorityVote(comp: "Image", objmap: "Image", threshold: "float") -> "iftImage *":
    r"""
    SuperPixelMajorityVote(comp, objmap, threshold) -> Image

    Parameters
    ----------
    comp: iftImage *
    objmap: iftImage *
    threshold: float

    """
    return _pyift.SuperPixelMajorityVote(comp, objmap, threshold)

def BoundingBoxArrayToLabel(img: "Image", bb_ary: "BoundingBoxArray") -> "iftImage *":
    r"""
    BoundingBoxArrayToLabel(img, bb_ary) -> Image

    Parameters
    ----------
    img: iftImage const *
    bb_ary: iftBoundingBoxArray const *

    """
    return _pyift.BoundingBoxArrayToLabel(img, bb_ary)

def FindOptPath(mimg: "MImage", src: "int", dst: "int", sigma: "float", pathval: "FImage", pred: "Image") -> "iftSet *":
    r"""
    FindOptPath(mimg, src, dst, sigma, pathval, pred) -> Set

    Parameters
    ----------
    mimg: iftMImage const *
    src: int
    dst: int
    sigma: float
    pathval: iftFImage *
    pred: iftImage *

    """
    return _pyift.FindOptPath(mimg, src, dst, sigma, pathval, pred)

def FindOptPathWithProb(mimg: "MImage", obj: "FImage", bkg: "FImage", src: "int", dst: "int", sigma: "float", gamma: "float", pathval: "FImage", pred: "Image") -> "iftSet *":
    r"""
    FindOptPathWithProb(mimg, obj, bkg, src, dst, sigma, gamma, pathval, pred) -> Set

    Parameters
    ----------
    mimg: iftMImage const *
    obj: iftFImage const *
    bkg: iftFImage const *
    src: int
    dst: int
    sigma: float
    gamma: float
    pathval: iftFImage *
    pred: iftImage *

    """
    return _pyift.FindOptPathWithProb(mimg, obj, bkg, src, dst, sigma, gamma, pathval, pred)

def SinglePathContour(label: "Image") -> "iftImage *":
    r"""
    SinglePathContour(label) -> Image

    Parameters
    ----------
    label: iftImage const *

    """
    return _pyift.SinglePathContour(label)

def FillContour(contour: "Image") -> "iftImage *":
    r"""
    FillContour(contour) -> Image

    Parameters
    ----------
    contour: iftImage const *

    """
    return _pyift.FillContour(contour)

def DISF(mimg: "MImage", A: "AdjRel", num_init_seeds: "int", num_superpixels: "int", mask: "Image") -> "iftImage *":
    r"""
    DISF(mimg, A, num_init_seeds, num_superpixels, mask) -> Image

    Parameters
    ----------
    mimg: iftMImage *
    A: iftAdjRel *
    num_init_seeds: int
    num_superpixels: int
    mask: iftImage *

    """
    return _pyift.DISF(mimg, A, num_init_seeds, num_superpixels, mask)
IFT_NEAREST_NEIGHBOR_INTERPOLATION = _pyift.IFT_NEAREST_NEIGHBOR_INTERPOLATION

IFT_LINEAR_INTERPOLATION = _pyift.IFT_LINEAR_INTERPOLATION


def InterpByNearestNeighbor(img: "Image", sx: "float", sy: "float", sz: "float") -> "iftImage *":
    r"""
    InterpByNearestNeighbor(img, sx, sy, sz) -> Image

    Parameters
    ----------
    img: iftImage const *
    sx: float
    sy: float
    sz: float

    """
    return _pyift.InterpByNearestNeighbor(img, sx, sy, sz)

def Interp2DByNearestNeighbor(img: "Image", sx: "float", sy: "float") -> "iftImage *":
    r"""
    Interp2DByNearestNeighbor(img, sx, sy) -> Image

    Parameters
    ----------
    img: iftImage const *
    sx: float
    sy: float

    """
    return _pyift.Interp2DByNearestNeighbor(img, sx, sy)

def Interp(img: "Image", sx: "float", sy: "float", sz: "float") -> "iftImage *":
    r"""
    Interp(img, sx, sy, sz) -> Image

    Parameters
    ----------
    img: iftImage const *
    sx: float
    sy: float
    sz: float

    """
    return _pyift.Interp(img, sx, sy, sz)

def Interp2D(img: "Image", sx: "float", sy: "float") -> "iftImage *":
    r"""
    Interp2D(img, sx, sy) -> Image

    Parameters
    ----------
    img: iftImage const *
    sx: float
    sy: float

    """
    return _pyift.Interp2D(img, sx, sy)

def ResizeImage(img: "Image", xsize: "int", ysize: "int", zsize: "int") -> "iftImage *":
    r"""
    ResizeImage(img, xsize, ysize, zsize) -> Image

    Parameters
    ----------
    img: iftImage const *
    xsize: int
    ysize: int
    zsize: int

    """
    return _pyift.ResizeImage(img, xsize, ysize, zsize)

def DrawLabels(img: "Image", label_img: "Image", cmap: "ColorTable", A: "AdjRel", fill: "bool", alpha: "float") -> "void":
    r"""
    DrawLabels(img, label_img, cmap, A, fill, alpha)

    Parameters
    ----------
    img: iftImage *
    label_img: iftImage const *
    cmap: iftColorTable const *
    A: iftAdjRel const *
    fill: bool
    alpha: float

    """
    return _pyift.DrawLabels(img, label_img, cmap, A, fill, alpha)

def DrawObject(img: "Image", bin: "Image", YCbCr: "Color", B: "AdjRel") -> "void":
    r"""
    DrawObject(img, bin, YCbCr, B)

    Parameters
    ----------
    img: iftImage *
    bin: iftImage *
    YCbCr: iftColor
    B: iftAdjRel *

    """
    return _pyift.DrawObject(img, bin, YCbCr, B)

def Draw2DFeatureSpace(Z: "DataSet", opt: "iftFeatureLabel", status: "iftSampleStatus") -> "iftImage *":
    r"""
    Draw2DFeatureSpace(Z, opt, status) -> Image

    Parameters
    ----------
    Z: iftDataSet *
    opt: enum iftFeatureLabel
    status: enum iftSampleStatus

    """
    return _pyift.Draw2DFeatureSpace(Z, opt, status)

def ColorizeComp(label: "Image") -> "iftImage *":
    r"""
    ColorizeComp(label) -> Image

    Parameters
    ----------
    label: iftImage *

    """
    return _pyift.ColorizeComp(label)

def ColorizeImageByLabels(orig: "Image", label: "Image", ctb: "ColorTable") -> "iftImage *":
    r"""
    ColorizeImageByLabels(orig, label, ctb) -> Image

    Parameters
    ----------
    orig: iftImage *
    label: iftImage *
    ctb: iftColorTable *

    """
    return _pyift.ColorizeImageByLabels(orig, label, ctb)

def ColorizeCompOverImage(orig: "Image", label: "Image") -> "iftImage *":
    r"""
    ColorizeCompOverImage(orig, label) -> Image

    Parameters
    ----------
    orig: iftImage *
    label: iftImage *

    """
    return _pyift.ColorizeCompOverImage(orig, label)

def DrawBoundingBoxBordersInPlace(img: "Image", bb: "BoundingBox", YCbCr: "Color", A: "AdjRel", drawCentralPoint: "bool") -> "void":
    r"""
    DrawBoundingBoxBordersInPlace(img, bb, YCbCr, A, drawCentralPoint)

    Parameters
    ----------
    img: iftImage *
    bb: iftBoundingBox
    YCbCr: iftColor
    A: iftAdjRel *
    drawCentralPoint: bool

    """
    return _pyift.DrawBoundingBoxBordersInPlace(img, bb, YCbCr, A, drawCentralPoint)

def RotateImage2D(img: "Image", theta: "float") -> "iftImage *":
    r"""
    RotateImage2D(img, theta) -> Image

    Parameters
    ----------
    img: iftImage *
    theta: float

    """
    return _pyift.RotateImage2D(img, theta)

def AlignObject(bin: "Image") -> "iftImage *":
    r"""
    AlignObject(bin) -> Image

    Parameters
    ----------
    bin: iftImage *

    """
    return _pyift.AlignObject(bin)

def RotateImage(img: "Image", theta_x: "float", theta_y: "float") -> "iftImage *":
    r"""
    RotateImage(img, theta_x, theta_y) -> Image

    Parameters
    ----------
    img: iftImage const *
    theta_x: float
    theta_y: float

    """
    return _pyift.RotateImage(img, theta_x, theta_y)

def ScaleImage(img: "Image", sx: "float", sy: "float", sz: "float") -> "iftImage *":
    r"""
    ScaleImage(img, sx, sy, sz) -> Image

    Parameters
    ----------
    img: iftImage const *
    sx: float
    sy: float
    sz: float

    """
    return _pyift.ScaleImage(img, sx, sy, sz)

def FlipImage(img: "Image", axis: "iftAxis") -> "iftImage *":
    r"""
    FlipImage(img, axis) -> Image

    Parameters
    ----------
    img: iftImage const *
    axis: enum iftAxis

    """
    return _pyift.FlipImage(img, axis)
class IGraph(object):
    r"""Proxy of C iftIGraph struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    node = property(_pyift.IGraph_node_get, _pyift.IGraph_node_set, doc=r"""node""")
    nnodes = property(_pyift.IGraph_nnodes_get, _pyift.IGraph_nnodes_set, doc=r"""nnodes""")
    nfeats = property(_pyift.IGraph_nfeats_get, _pyift.IGraph_nfeats_set, doc=r"""nfeats""")
    index = property(_pyift.IGraph_index_get, _pyift.IGraph_index_set, doc=r"""index""")
    feat = property(_pyift.IGraph_feat_get, _pyift.IGraph_feat_set, doc=r"""feat""")
    label = property(_pyift.IGraph_label_get, _pyift.IGraph_label_set, doc=r"""label""")
    marker = property(_pyift.IGraph_marker_get, _pyift.IGraph_marker_set, doc=r"""marker""")
    root = property(_pyift.IGraph_root_get, _pyift.IGraph_root_set, doc=r"""root""")
    pred = property(_pyift.IGraph_pred_get, _pyift.IGraph_pred_set, doc=r"""pred""")
    pvalue = property(_pyift.IGraph_pvalue_get, _pyift.IGraph_pvalue_set, doc=r"""pvalue""")
    A = property(_pyift.IGraph_A_get, _pyift.IGraph_A_set, doc=r"""A""")
    type = property(_pyift.IGraph_type_get, _pyift.IGraph_type_set, doc=r"""type""")
    __swig_destroy__ = _pyift.delete_IGraph

    def __init__(self):
        r"""__init__(self) -> IGraph"""
        _pyift.IGraph_swiginit(self, _pyift.new_IGraph())

# Register IGraph in _pyift:
_pyift.IGraph_swigregister(IGraph)


def ImplicitIGraph(img: "MImage", mask: "Image", A: "AdjRel") -> "iftIGraph *":
    r"""
    ImplicitIGraph(img, mask, A) -> IGraph

    Parameters
    ----------
    img: iftMImage *
    mask: iftImage const *
    A: iftAdjRel *

    """
    return _pyift.ImplicitIGraph(img, mask, A)

def ExplicitIGraph(img: "MImage", mask: "Image", label: "Image", A: "AdjRel") -> "iftIGraph *":
    r"""
    ExplicitIGraph(img, mask, label, A) -> IGraph

    Parameters
    ----------
    img: iftMImage const *
    mask: iftImage const *
    label: iftImage const *
    A: iftAdjRel *

    """
    return _pyift.ExplicitIGraph(img, mask, label, A)

def SpatialKnnIGraph(img: "MImage", mask: "Image", A: "AdjRel", K: "int") -> "iftIGraph *":
    r"""
    SpatialKnnIGraph(img, mask, A, K) -> IGraph

    Parameters
    ----------
    img: iftMImage *
    mask: iftImage *
    A: iftAdjRel *
    K: int

    """
    return _pyift.SpatialKnnIGraph(img, mask, A, K)

def SpatialIGraph(img: "MImage", mask: "Image", A: "AdjRel", df: "float") -> "iftIGraph *":
    r"""
    SpatialIGraph(img, mask, A, df) -> IGraph

    Parameters
    ----------
    img: iftMImage *
    mask: iftImage *
    A: iftAdjRel *
    df: float

    """
    return _pyift.SpatialIGraph(img, mask, A, df)

def KnnIGraph(img: "MImage", mask: "Image", K: "int") -> "iftIGraph *":
    r"""
    KnnIGraph(img, mask, K) -> IGraph

    Parameters
    ----------
    img: iftMImage *
    mask: iftImage *
    K: int

    """
    return _pyift.KnnIGraph(img, mask, K)

def IGraphPathValue(igraph: "IGraph") -> "iftImage *":
    r"""
    IGraphPathValue(igraph) -> Image

    Parameters
    ----------
    igraph: iftIGraph *

    """
    return _pyift.IGraphPathValue(igraph)

def IGraphWeight(igraph: "IGraph") -> "iftFImage *":
    r"""
    IGraphWeight(igraph) -> FImage

    Parameters
    ----------
    igraph: iftIGraph *

    """
    return _pyift.IGraphWeight(igraph)

def IGraphLabel(igraph: "IGraph") -> "iftImage *":
    r"""
    IGraphLabel(igraph) -> Image

    Parameters
    ----------
    igraph: iftIGraph *

    """
    return _pyift.IGraphLabel(igraph)

def IGraphRoot(igraph: "IGraph") -> "iftImage *":
    r"""
    IGraphRoot(igraph) -> Image

    Parameters
    ----------
    igraph: iftIGraph *

    """
    return _pyift.IGraphRoot(igraph)

def IGraphISF_Mean(igraph: "IGraph", seeds: "Image", alpha: "double", beta0: "double", niters: "int") -> "int":
    r"""
    IGraphISF_Mean(igraph, seeds, alpha, beta0, niters) -> int

    Parameters
    ----------
    igraph: iftIGraph *
    seeds: iftImage *
    alpha: double
    beta0: double
    niters: int

    """
    return _pyift.IGraphISF_Mean(igraph, seeds, alpha, beta0, niters)

def IGraphISF_Root(igraph: "IGraph", seeds: "Image", alpha: "double", beta0: "double", niters: "int") -> "int":
    r"""
    IGraphISF_Root(igraph, seeds, alpha, beta0, niters) -> int

    Parameters
    ----------
    igraph: iftIGraph *
    seeds: iftImage *
    alpha: double
    beta0: double
    niters: int

    """
    return _pyift.IGraphISF_Root(igraph, seeds, alpha, beta0, niters)

def Extract_ISF_MIX_ROOT_Superpixels(img: "Image", nsuperpixels: "int", alpha: "float", beta: "float", niters: "int", smooth_niters: "int") -> "iftImage *":
    r"""
    Extract_ISF_MIX_ROOT_Superpixels(img, nsuperpixels, alpha, beta, niters, smooth_niters) -> Image

    Parameters
    ----------
    img: iftImage *
    nsuperpixels: int
    alpha: float
    beta: float
    niters: int
    smooth_niters: int

    """
    return _pyift.Extract_ISF_MIX_ROOT_Superpixels(img, nsuperpixels, alpha, beta, niters, smooth_niters)

def Extract_ISF_MIX_MEAN_Superpixels(img: "Image", nsuperpixels: "int", alpha: "float", beta: "float", niters: "int", smooth_niters: "int") -> "iftImage *":
    r"""
    Extract_ISF_MIX_MEAN_Superpixels(img, nsuperpixels, alpha, beta, niters, smooth_niters) -> Image

    Parameters
    ----------
    img: iftImage *
    nsuperpixels: int
    alpha: float
    beta: float
    niters: int
    smooth_niters: int

    """
    return _pyift.Extract_ISF_MIX_MEAN_Superpixels(img, nsuperpixels, alpha, beta, niters, smooth_niters)

def SuperpixelCenterSetFromIGraph(igraph: "IGraph") -> "iftSet *":
    r"""
    SuperpixelCenterSetFromIGraph(igraph) -> Set

    Parameters
    ----------
    igraph: iftIGraph *

    """
    return _pyift.SuperpixelCenterSetFromIGraph(igraph)

def DimReductionByTSNE(Z: "DataSet", ndim: "int", perplexity: "double", max_iter: "size_t") -> "iftDataSet *":
    r"""
    DimReductionByTSNE(Z, ndim, perplexity, max_iter) -> DataSet

    Parameters
    ----------
    Z: iftDataSet *
    ndim: int
    perplexity: double
    max_iter: size_t

    """
    return _pyift.DimReductionByTSNE(Z, ndim, perplexity, max_iter)
class Robot(object):
    r"""Proxy of C iftRobot struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    stop_iter = property(_pyift.Robot_stop_iter_get, _pyift.Robot_stop_iter_set, doc=r"""stop_iter""")
    cur_iter = property(_pyift.Robot_cur_iter_get, _pyift.Robot_cur_iter_set, doc=r"""cur_iter""")
    stop_acur = property(_pyift.Robot_stop_acur_get, _pyift.Robot_stop_acur_set, doc=r"""stop_acur""")
    cur_acur = property(_pyift.Robot_cur_acur_get, _pyift.Robot_cur_acur_set, doc=r"""cur_acur""")
    max_seed_per_iter = property(_pyift.Robot_max_seed_per_iter_get, _pyift.Robot_max_seed_per_iter_set, doc=r"""max_seed_per_iter""")
    converged = property(_pyift.Robot_converged_get, _pyift.Robot_converged_set, doc=r"""converged""")
    orig = property(_pyift.Robot_orig_get, _pyift.Robot_orig_set, doc=r"""orig""")
    gt_img = property(_pyift.Robot_gt_img_get, _pyift.Robot_gt_img_set, doc=r"""gt_img""")
    segm = property(_pyift.Robot_segm_get, _pyift.Robot_segm_set, doc=r"""segm""")
    error = property(_pyift.Robot_error_get, _pyift.Robot_error_set, doc=r"""error""")
    seeds = property(_pyift.Robot_seeds_get, _pyift.Robot_seeds_set, doc=r"""seeds""")
    mrk_radius = property(_pyift.Robot_mrk_radius_get, _pyift.Robot_mrk_radius_set, doc=r"""mrk_radius""")
    limit_mrk_rad = property(_pyift.Robot_limit_mrk_rad_get, _pyift.Robot_limit_mrk_rad_set, doc=r"""limit_mrk_rad""")

    def setOrig(self, image: "Image") -> "void":
        r"""
        setOrig(self, image)

        Parameters
        ----------
        image: iftImage const *

        """
        return _pyift.Robot_setOrig(self, image)

    def setGt(self, image: "Image") -> "void":
        r"""
        setGt(self, image)

        Parameters
        ----------
        image: iftImage const *

        """
        return _pyift.Robot_setGt(self, image)

    def setSegm(self, image: "Image") -> "void":
        r"""
        setSegm(self, image)

        Parameters
        ----------
        image: iftImage const *

        """
        return _pyift.Robot_setSegm(self, image)

    def setError(self, image: "Image") -> "void":
        r"""
        setError(self, image)

        Parameters
        ----------
        image: iftImage const *

        """
        return _pyift.Robot_setError(self, image)

    def setSeeds(self, seeds: "LabeledSet") -> "void *":
        r"""
        setSeeds(self, seeds) -> void *

        Parameters
        ----------
        seeds: iftLabeledSet *

        """
        return _pyift.Robot_setSeeds(self, seeds)

    def setMarkerRadius(self, A: "AdjRel") -> "void":
        r"""
        setMarkerRadius(self, A)

        Parameters
        ----------
        A: iftAdjRel const *

        """
        return _pyift.Robot_setMarkerRadius(self, A)

    def setMarkerMaxRadius(self, A: "AdjRel") -> "void":
        r"""
        setMarkerMaxRadius(self, A)

        Parameters
        ----------
        A: iftAdjRel const *

        """
        return _pyift.Robot_setMarkerMaxRadius(self, A)
    __swig_destroy__ = _pyift.delete_Robot

    def __init__(self):
        r"""__init__(self) -> Robot"""
        _pyift.Robot_swiginit(self, _pyift.new_Robot())

# Register Robot in _pyift:
_pyift.Robot_swigregister(Robot)


def CreateRobot(orig_path: "char const *", gt_path: "char const *", stop_iter: "int", stop_acur: "float") -> "iftRobot *":
    r"""
    CreateRobot(orig_path, gt_path, stop_iter, stop_acur) -> Robot

    Parameters
    ----------
    orig_path: char const *
    gt_path: char const *
    stop_iter: int
    stop_acur: float

    """
    return _pyift.CreateRobot(orig_path, gt_path, stop_iter, stop_acur)

def ResetRobotSegmentation(bot: "Robot") -> "void":
    r"""
    ResetRobotSegmentation(bot)

    Parameters
    ----------
    bot: iftRobot *

    """
    return _pyift.ResetRobotSegmentation(bot)

def RobotUpdateError(bot: "Robot") -> "void":
    r"""
    RobotUpdateError(bot)

    Parameters
    ----------
    bot: iftRobot *

    """
    return _pyift.RobotUpdateError(bot)

def RobotFindSeedsMSSkel(bot: "Robot") -> "void":
    r"""
    RobotFindSeedsMSSkel(bot)

    Parameters
    ----------
    bot: iftRobot *

    """
    return _pyift.RobotFindSeedsMSSkel(bot)

def RobotFindSeedsCenterOfMass(bot: "Robot") -> "void":
    r"""
    RobotFindSeedsCenterOfMass(bot)

    Parameters
    ----------
    bot: iftRobot *

    """
    return _pyift.RobotFindSeedsCenterOfMass(bot)

def RobotPrintInfo(bot: "Robot") -> "void":
    r"""
    RobotPrintInfo(bot)

    Parameters
    ----------
    bot: iftRobot *

    """
    return _pyift.RobotPrintInfo(bot)

def RobotContinue(bot: "Robot") -> "bool":
    r"""
    RobotContinue(bot) -> bool

    Parameters
    ----------
    bot: iftRobot *

    """
    return _pyift.RobotContinue(bot)

def LocalMaximum(weights: "Image", p: "int", disk: "AdjRel") -> "int":
    r"""
    LocalMaximum(weights, p, disk) -> int

    Parameters
    ----------
    weights: iftImage const *
    p: int
    disk: iftAdjRel const *

    """
    return _pyift.LocalMaximum(weights, p, disk)

def FurthestInError(source: "Image", target: "Image", mask: "Image", p: "int") -> "int":
    r"""
    FurthestInError(source, target, mask, p) -> int

    Parameters
    ----------
    source: iftImage const *
    target: iftImage const *
    mask: iftImage const *
    p: int

    """
    return _pyift.FurthestInError(source, target, mask, p)

def QueryForAnchorsPosition(gt_contour: "Image", source_mask: "Image", gt_mask: "Image", anchors: "Set") -> "iftSet *":
    r"""
    QueryForAnchorsPosition(gt_contour, source_mask, gt_mask, anchors) -> Set

    Parameters
    ----------
    gt_contour: iftImage const *
    source_mask: iftImage const *
    gt_mask: iftImage const *
    anchors: iftSet const *

    """
    return _pyift.QueryForAnchorsPosition(gt_contour, source_mask, gt_mask, anchors)

def FurtherThanThreshold(anchors: "VoxelArray", mask: "Image", threshold: "float") -> "iftSet *":
    r"""
    FurtherThanThreshold(anchors, mask, threshold) -> Set

    Parameters
    ----------
    anchors: iftVoxelArray const *
    mask: iftImage const *
    threshold: float

    """
    return _pyift.FurtherThanThreshold(anchors, mask, threshold)
class ITSELFParameters(object):
    r"""Proxy of C iftITSELFParameters struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    itself_iterations = property(_pyift.ITSELFParameters_itself_iterations_get, _pyift.ITSELFParameters_itself_iterations_set, doc=r"""itself_iterations""")
    number_superpixels = property(_pyift.ITSELFParameters_number_superpixels_get, _pyift.ITSELFParameters_number_superpixels_set, doc=r"""number_superpixels""")
    obj_seeds_number = property(_pyift.ITSELFParameters_obj_seeds_number_get, _pyift.ITSELFParameters_obj_seeds_number_set, doc=r"""obj_seeds_number""")
    oisf_gamma = property(_pyift.ITSELFParameters_oisf_gamma_get, _pyift.ITSELFParameters_oisf_gamma_set, doc=r"""oisf_gamma""")
    oisf_iterations = property(_pyift.ITSELFParameters_oisf_iterations_get, _pyift.ITSELFParameters_oisf_iterations_set, doc=r"""oisf_iterations""")
    oisf_beta = property(_pyift.ITSELFParameters_oisf_beta_get, _pyift.ITSELFParameters_oisf_beta_set, doc=r"""oisf_beta""")
    oisf_alpha = property(_pyift.ITSELFParameters_oisf_alpha_get, _pyift.ITSELFParameters_oisf_alpha_set, doc=r"""oisf_alpha""")
    oisf_dist_penalty = property(_pyift.ITSELFParameters_oisf_dist_penalty_get, _pyift.ITSELFParameters_oisf_dist_penalty_set, doc=r"""oisf_dist_penalty""")
    superpixel_increase_ratio = property(_pyift.ITSELFParameters_superpixel_increase_ratio_get, _pyift.ITSELFParameters_superpixel_increase_ratio_set, doc=r"""superpixel_increase_ratio""")
    query_importance = property(_pyift.ITSELFParameters_query_importance_get, _pyift.ITSELFParameters_query_importance_set, doc=r"""query_importance""")
    normalization_value = property(_pyift.ITSELFParameters_normalization_value_get, _pyift.ITSELFParameters_normalization_value_set, doc=r"""normalization_value""")
    integration_lambda = property(_pyift.ITSELFParameters_integration_lambda_get, _pyift.ITSELFParameters_integration_lambda_set, doc=r"""integration_lambda""")
    integration_iteration = property(_pyift.ITSELFParameters_integration_iteration_get, _pyift.ITSELFParameters_integration_iteration_set, doc=r"""integration_iteration""")
    enhancement_type = property(_pyift.ITSELFParameters_enhancement_type_get, _pyift.ITSELFParameters_enhancement_type_set, doc=r"""enhancement_type""")
    prior_params = property(_pyift.ITSELFParameters_prior_params_get, _pyift.ITSELFParameters_prior_params_set, doc=r"""prior_params""")
    __swig_destroy__ = _pyift.delete_ITSELFParameters

    def __init__(self):
        r"""__init__(self) -> ITSELFParameters"""
        _pyift.ITSELFParameters_swiginit(self, _pyift.new_ITSELFParameters())

# Register ITSELFParameters in _pyift:
_pyift.ITSELFParameters_swigregister(ITSELFParameters)


def InitializeITSELFParametersByDefaultU2Net() -> "iftITSELFParameters *":
    r"""InitializeITSELFParametersByDefaultU2Net() -> ITSELFParameters"""
    return _pyift.InitializeITSELFParametersByDefaultU2Net()

def InitializeITSELFParametersByDefaultScribbles() -> "iftITSELFParameters *":
    r"""InitializeITSELFParametersByDefaultScribbles() -> ITSELFParameters"""
    return _pyift.InitializeITSELFParametersByDefaultScribbles()

def ITSELFParametersSetParam(params: "ITSELFParameters", parameter_name: "char *", value: "float") -> "void":
    r"""
    ITSELFParametersSetParam(params, parameter_name, value)

    Parameters
    ----------
    params: iftITSELFParameters *
    parameter_name: char *
    value: float

    """
    return _pyift.ITSELFParametersSetParam(params, parameter_name, value)

def SESS(original_image: "Image", initial_saliency: "Image", params: "ITSELFParameters", features: "MImage") -> "iftImage *":
    r"""
    SESS(original_image, initial_saliency, params, features) -> Image

    Parameters
    ----------
    original_image: iftImage *
    initial_saliency: iftImage *
    params: iftITSELFParameters *
    features: iftMImage *

    """
    return _pyift.SESS(original_image, initial_saliency, params, features)

def ReadFLIMArch(filename: "char *") -> "iftFLIMArch *":
    r"""
    ReadFLIMArch(filename) -> iftFLIMArch *

    Parameters
    ----------
    filename: char *

    """
    return _pyift.ReadFLIMArch(filename)

def WriteFLIMArch(arch: "iftFLIMArch *", filename: "char *") -> "void":
    r"""
    WriteFLIMArch(arch, filename)

    Parameters
    ----------
    arch: iftFLIMArch *
    filename: char *

    """
    return _pyift.WriteFLIMArch(arch, filename)

def FLIMLearnModel(orig_dir: "char *", markers_dir: "char *", param_dir: "char *", arch: "iftFLIMArch *") -> "void":
    r"""
    FLIMLearnModel(orig_dir, markers_dir, param_dir, arch)

    Parameters
    ----------
    orig_dir: char *
    markers_dir: char *
    param_dir: char *
    arch: iftFLIMArch *

    """
    return _pyift.FLIMLearnModel(orig_dir, markers_dir, param_dir, arch)

def FLIMLearnLayer(activ_dir: "char *", markers_dir: "char *", param_dir: "char *", param_index: "int", arch: "iftFLIMArch *", output_dir: "char *") -> "void":
    r"""
    FLIMLearnLayer(activ_dir, markers_dir, param_dir, param_index, arch, output_dir)

    Parameters
    ----------
    activ_dir: char *
    markers_dir: char *
    param_dir: char *
    param_index: int
    arch: iftFLIMArch *
    output_dir: char *

    """
    return _pyift.FLIMLearnLayer(activ_dir, markers_dir, param_dir, param_index, arch, output_dir)

def FLIMExtractFeatures(orig_dir: "char *", image_list: "char *", arch: "iftFLIMArch *", param_dir: "char *", feat_dir: "char *", object_dir: "char *", device: "int") -> "void":
    r"""
    FLIMExtractFeatures(orig_dir, image_list, arch, param_dir, feat_dir, object_dir, device)

    Parameters
    ----------
    orig_dir: char *
    image_list: char *
    arch: iftFLIMArch *
    param_dir: char *
    feat_dir: char *
    object_dir: char *
    device: int

    """
    return _pyift.FLIMExtractFeatures(orig_dir, image_list, arch, param_dir, feat_dir, object_dir, device)

def FLIMExtractFeaturesFromLayer(orig_dir: "char *", image_list: "char *", arch: "iftFLIMArch *", param_dir: "char *", layer_index: "int", feat_dir: "char *", object_dir: "char *", device: "int") -> "void":
    r"""
    FLIMExtractFeaturesFromLayer(orig_dir, image_list, arch, param_dir, layer_index, feat_dir, object_dir, device)

    Parameters
    ----------
    orig_dir: char *
    image_list: char *
    arch: iftFLIMArch *
    param_dir: char *
    layer_index: int
    feat_dir: char *
    object_dir: char *
    device: int

    """
    return _pyift.FLIMExtractFeaturesFromLayer(orig_dir, image_list, arch, param_dir, layer_index, feat_dir, object_dir, device)

def FLIMAdjRelFromKernel(layer: "iftFLIMLayer", dim3D: "bool") -> "iftAdjRel *":
    r"""
    FLIMAdjRelFromKernel(layer, dim3D) -> AdjRel

    Parameters
    ----------
    layer: iftFLIMLayer
    dim3D: bool

    """
    return _pyift.FLIMAdjRelFromKernel(layer, dim3D)

def FLIMSelectKernelsManual(kernel_bank_path: "char *", selected_kernels_path: "char *") -> "iftMatrix *":
    r"""
    FLIMSelectKernelsManual(kernel_bank_path, selected_kernels_path) -> Matrix

    Parameters
    ----------
    kernel_bank_path: char *
    selected_kernels_path: char *

    """
    return _pyift.FLIMSelectKernelsManual(kernel_bank_path, selected_kernels_path)
KERNEL_LINEAR = _pyift.KERNEL_LINEAR

KERNEL_POLYNOMIAL = _pyift.KERNEL_POLYNOMIAL

KERNEL_GAUSSIAN = _pyift.KERNEL_GAUSSIAN

KERNEL_LAPLACIAN = _pyift.KERNEL_LAPLACIAN

KERNEL_SIGMOIDAL = _pyift.KERNEL_SIGMOIDAL

KERNEL_COSINE = _pyift.KERNEL_COSINE

KERNEL_WAVE = _pyift.KERNEL_WAVE

KERNEL_LOG = _pyift.KERNEL_LOG

KERNEL_TSTUDENT = _pyift.KERNEL_TSTUDENT

KERNEL_CHISQUARED = _pyift.KERNEL_CHISQUARED


def MetricLearnKernel(type: "iftMetricKernel") -> "iftKernelFunction *":
    r"""
    MetricLearnKernel(type) -> iftKernelFunction *

    Parameters
    ----------
    type: enum iftMetricKernel

    """
    return _pyift.MetricLearnKernel(type)

def GramMatrix(data: "DoubleMatrix", K: "iftKernelFunction *", param1: "double", param2: "double") -> "iftDoubleMatrix *":
    r"""
    GramMatrix(data, K, param1, param2) -> DoubleMatrix

    Parameters
    ----------
    data: iftDoubleMatrix const *
    K: iftKernelFunction *
    param1: double
    param2: double

    """
    return _pyift.GramMatrix(data, K, param1, param2)

def GramTransform(gram: "DoubleMatrix", omega: "DoubleMatrix") -> "iftDoubleMatrix *":
    r"""
    GramTransform(gram, omega) -> DoubleMatrix

    Parameters
    ----------
    gram: iftDoubleMatrix const *
    omega: iftDoubleMatrix const *

    """
    return _pyift.GramTransform(gram, omega)

def LMCompAnalysis(data: "double const *", label: "int const *", L_in: "double const *", n: "int", d: "int", d_out: "int", k_targets: "int", learn_rate: "double", iterations: "int", verbose: "bool") -> "double *":
    r"""
    LMCompAnalysis(data, label, L_in, n, d, d_out, k_targets, learn_rate, iterations, verbose) -> double *

    Parameters
    ----------
    data: double const *
    label: int const *
    L_in: double const *
    n: int
    d: int
    d_out: int
    k_targets: int
    learn_rate: double
    iterations: int
    verbose: bool

    """
    return _pyift.LMCompAnalysis(data, label, L_in, n, d, d_out, k_targets, learn_rate, iterations, verbose)

def KernelLMCA(gram: "double const *", label: "int const *", n: "int", dim_out: "int", k_targets: "int", c: "double", learn_rate: "double", iterations: "int", verbose: "bool") -> "double *":
    r"""
    KernelLMCA(gram, label, n, dim_out, k_targets, c, learn_rate, iterations, verbose) -> double *

    Parameters
    ----------
    gram: double const *
    label: int const *
    n: int
    dim_out: int
    k_targets: int
    c: double
    learn_rate: double
    iterations: int
    verbose: bool

    """
    return _pyift.KernelLMCA(gram, label, n, dim_out, k_targets, c, learn_rate, iterations, verbose)

def KLMCA(gram: "DoubleMatrix", label: "IntArray", dim_out: "int", k_targets: "int", c: "double", learn_rate: "double", iterations: "int", verbose: "bool") -> "iftDoubleMatrix *":
    r"""
    KLMCA(gram, label, dim_out, k_targets, c, learn_rate, iterations, verbose) -> DoubleMatrix

    Parameters
    ----------
    gram: iftDoubleMatrix const *
    label: iftIntArray const *
    dim_out: int
    k_targets: int
    c: double
    learn_rate: double
    iterations: int
    verbose: bool

    """
    return _pyift.KLMCA(gram, label, dim_out, k_targets, c, learn_rate, iterations, verbose)

def Filename(pathname: "char const *", suffix: "char const *") -> "char *":
    r"""
    Filename(pathname, suffix) -> char *

    Parameters
    ----------
    pathname: char const *
    suffix: char const *

    """
    return _pyift.Filename(pathname, suffix)

def Dirname(pathname: "char const *") -> "char *":
    r"""
    Dirname(pathname) -> char *

    Parameters
    ----------
    pathname: char const *

    """
    return _pyift.Dirname(pathname)

def FileExt(pathname: "char const *") -> "char const *":
    r"""
    FileExt(pathname) -> char const *

    Parameters
    ----------
    pathname: char const *

    """
    return _pyift.FileExt(pathname)

def Basename(pathname: "char const *") -> "char *":
    r"""
    Basename(pathname) -> char *

    Parameters
    ----------
    pathname: char const *

    """
    return _pyift.Basename(pathname)
class FileSet(object):
    r"""Proxy of C iftFileSet struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    n = property(_pyift.FileSet_n_get, _pyift.FileSet_n_set, doc=r"""n""")
    files = property(_pyift.FileSet_files_get, _pyift.FileSet_files_set, doc=r"""files""")
    __swig_destroy__ = _pyift.delete_FileSet

    def GetPaths(self) -> "PyObject *":
        r"""GetPaths(self) -> PyObject *"""
        return _pyift.FileSet_GetPaths(self)

    def __init__(self):
        r"""__init__(self) -> FileSet"""
        _pyift.FileSet_swiginit(self, _pyift.new_FileSet())

# Register FileSet in _pyift:
_pyift.FileSet_swigregister(FileSet)


def LoadFileSetFromDirBySuffix(dir_pathname: "char const *", ext: "char const *", depth: "int") -> "iftFileSet *":
    r"""
    LoadFileSetFromDirBySuffix(dir_pathname, ext, depth) -> FileSet

    Parameters
    ----------
    dir_pathname: char const *
    ext: char const *
    depth: int

    """
    return _pyift.LoadFileSetFromDirBySuffix(dir_pathname, ext, depth)

def LoadFileSetFromDirOrCSV(file_entry: "char const *", hier_levels: "long", sort_pathnames: "bool") -> "iftFileSet *":
    r"""
    LoadFileSetFromDirOrCSV(file_entry, hier_levels, sort_pathnames) -> FileSet

    Parameters
    ----------
    file_entry: char const *
    hier_levels: long
    sort_pathnames: bool

    """
    return _pyift.LoadFileSetFromDirOrCSV(file_entry, hier_levels, sort_pathnames)
class CSV(object):
    r"""Proxy of C iftCSV struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nrows = property(_pyift.CSV_nrows_get, _pyift.CSV_nrows_set, doc=r"""nrows""")
    ncols = property(_pyift.CSV_ncols_get, _pyift.CSV_ncols_set, doc=r"""ncols""")
    header = property(_pyift.CSV_header_get, _pyift.CSV_header_set, doc=r"""header""")
    data = property(_pyift.CSV_data_get, _pyift.CSV_data_set, doc=r"""data""")
    __swig_destroy__ = _pyift.delete_CSV

    def __init__(self):
        r"""__init__(self) -> CSV"""
        _pyift.CSV_swiginit(self, _pyift.new_CSV())

# Register CSV in _pyift:
_pyift.CSV_swigregister(CSV)


def CreateCSV(nrows: "long", ncols: "long") -> "iftCSV *":
    r"""
    CreateCSV(nrows, ncols) -> CSV

    Parameters
    ----------
    nrows: long
    ncols: long

    """
    return _pyift.CreateCSV(nrows, ncols)

def ReadCSV(csv_pathname: "char const *", separator: "char const") -> "iftCSV *":
    r"""
    ReadCSV(csv_pathname, separator) -> CSV

    Parameters
    ----------
    csv_pathname: char const *
    separator: char const

    """
    return _pyift.ReadCSV(csv_pathname, separator)

def WriteCSV(csv: "CSV", filename: "char const *", separator: "char const") -> "void":
    r"""
    WriteCSV(csv, filename, separator)

    Parameters
    ----------
    csv: iftCSV const *
    filename: char const *
    separator: char const

    """
    return _pyift.WriteCSV(csv, filename, separator)

def PrintCSV(csv: "CSV") -> "void":
    r"""
    PrintCSV(csv)

    Parameters
    ----------
    csv: iftCSV const *

    """
    return _pyift.PrintCSV(csv)

def MergeCSVs(csv1: "CSV", csv2: "CSV") -> "iftCSV *":
    r"""
    MergeCSVs(csv1, csv2) -> CSV

    Parameters
    ----------
    csv1: iftCSV const *
    csv2: iftCSV const *

    """
    return _pyift.MergeCSVs(csv1, csv2)

def CopyCSV(csv: "CSV") -> "iftCSV *":
    r"""
    CopyCSV(csv) -> CSV

    Parameters
    ----------
    csv: iftCSV const *

    """
    return _pyift.CopyCSV(csv)

def SetCSVHeader(csv: "CSV", header: "char const *") -> "void":
    r"""
    SetCSVHeader(csv, header)

    Parameters
    ----------
    csv: iftCSV *
    header: char const *

    """
    return _pyift.SetCSVHeader(csv, header)
class FloatArray(object):
    r"""Proxy of C iftFloatArray struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    n = property(_pyift.FloatArray_n_get, _pyift.FloatArray_n_set, doc=r"""n""")
    val = property(_pyift.FloatArray_val_get, _pyift.FloatArray_val_set, doc=r"""val""")

    def AsNumPy(self) -> "PyObject *":
        r"""AsNumPy(self) -> PyObject *"""
        return _pyift.FloatArray_AsNumPy(self)

    def FromNumPy(self, input: "PyObject *") -> "void":
        r"""
        FromNumPy(self, input)

        Parameters
        ----------
        input: PyObject *

        """
        return _pyift.FloatArray_FromNumPy(self, input)
    __swig_destroy__ = _pyift.delete_FloatArray

    def __init__(self):
        r"""__init__(self) -> FloatArray"""
        _pyift.FloatArray_swiginit(self, _pyift.new_FloatArray())

# Register FloatArray in _pyift:
_pyift.FloatArray_swigregister(FloatArray)


def FloatArrayAsString(farr: "FloatArray") -> "char *":
    r"""
    FloatArrayAsString(farr) -> char *

    Parameters
    ----------
    farr: iftFloatArray const *

    """
    return _pyift.FloatArrayAsString(farr)

def CreateFloatArrayFromNumPy(input: "PyObject *") -> "iftFloatArray *":
    r"""
    CreateFloatArrayFromNumPy(input) -> FloatArray

    Parameters
    ----------
    input: PyObject *

    """
    return _pyift.CreateFloatArrayFromNumPy(input)
class LabeledSet(object):
    r"""Proxy of C iftLabeledSet struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    elem = property(_pyift.LabeledSet_elem_get, _pyift.LabeledSet_elem_set, doc=r"""elem""")
    label = property(_pyift.LabeledSet_label_get, _pyift.LabeledSet_label_set, doc=r"""label""")
    marker = property(_pyift.LabeledSet_marker_get, _pyift.LabeledSet_marker_set, doc=r"""marker""")
    handicap = property(_pyift.LabeledSet_handicap_get, _pyift.LabeledSet_handicap_set, doc=r"""handicap""")
    next = property(_pyift.LabeledSet_next_get, _pyift.LabeledSet_next_set, doc=r"""next""")

    def __add__(self, lset: "LabeledSet") -> "iftLabeledSet *":
        r"""
        __add__(self, lset) -> LabeledSet

        Parameters
        ----------
        lset: iftLabeledSet *

        """
        return _pyift.LabeledSet___add__(self, lset)

    def __sub__(self, lset: "LabeledSet") -> "iftLabeledSet *":
        r"""
        __sub__(self, lset) -> LabeledSet

        Parameters
        ----------
        lset: iftLabeledSet *

        """
        return _pyift.LabeledSet___sub__(self, lset)

    def AsDict(self) -> "PyObject *":
        r"""AsDict(self) -> PyObject *"""
        return _pyift.LabeledSet_AsDict(self)

    def Print(self) -> "void":
        r"""Print(self)"""
        return _pyift.LabeledSet_Print(self)
    __swig_destroy__ = _pyift.delete_LabeledSet

    def __init__(self):
        r"""__init__(self) -> LabeledSet"""
        _pyift.LabeledSet_swiginit(self, _pyift.new_LabeledSet())

# Register LabeledSet in _pyift:
_pyift.LabeledSet_swigregister(LabeledSet)


def CreateLabeledSetFromCoord(_index: "PyObject *", _labels: "PyObject *") -> "iftLabeledSet *":
    r"""
    CreateLabeledSetFromCoord(_index, _labels) -> LabeledSet

    Parameters
    ----------
    _index: PyObject *
    _labels: PyObject *

    """
    return _pyift.CreateLabeledSetFromCoord(_index, _labels)
class Band(object):
    r"""Proxy of C iftBand struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    val = property(_pyift.Band_val_get, _pyift.Band_val_set, doc=r"""val""")

    def __init__(self):
        r"""__init__(self) -> Band"""
        _pyift.Band_swiginit(self, _pyift.new_Band())
    __swig_destroy__ = _pyift.delete_Band

# Register Band in _pyift:
_pyift.Band_swigregister(Band)

class Voxel(object):
    r"""Proxy of C iftVoxel struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_pyift.Voxel_x_get, _pyift.Voxel_x_set, doc=r"""x""")
    y = property(_pyift.Voxel_y_get, _pyift.Voxel_y_set, doc=r"""y""")
    z = property(_pyift.Voxel_z_get, _pyift.Voxel_z_set, doc=r"""z""")
    t = property(_pyift.Voxel_t_get, _pyift.Voxel_t_set, doc=r"""t""")

    def __init__(self):
        r"""__init__(self) -> Voxel"""
        _pyift.Voxel_swiginit(self, _pyift.new_Voxel())
    __swig_destroy__ = _pyift.delete_Voxel

# Register Voxel in _pyift:
_pyift.Voxel_swigregister(Voxel)

class ImageDomain(object):
    r"""Proxy of C iftImageDomain struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    xsize = property(_pyift.ImageDomain_xsize_get, _pyift.ImageDomain_xsize_set, doc=r"""xsize""")
    ysize = property(_pyift.ImageDomain_ysize_get, _pyift.ImageDomain_ysize_set, doc=r"""ysize""")
    zsize = property(_pyift.ImageDomain_zsize_get, _pyift.ImageDomain_zsize_set, doc=r"""zsize""")
    tsize = property(_pyift.ImageDomain_tsize_get, _pyift.ImageDomain_tsize_set, doc=r"""tsize""")

    def __init__(self):
        r"""__init__(self) -> ImageDomain"""
        _pyift.ImageDomain_swiginit(self, _pyift.new_ImageDomain())
    __swig_destroy__ = _pyift.delete_ImageDomain

# Register ImageDomain in _pyift:
_pyift.ImageDomain_swigregister(ImageDomain)

class IntMatrix(object):
    r"""Proxy of C iftIntMatrix struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    val = property(_pyift.IntMatrix_val_get, _pyift.IntMatrix_val_set, doc=r"""val""")
    ncols = property(_pyift.IntMatrix_ncols_get, _pyift.IntMatrix_ncols_set, doc=r"""ncols""")
    nrows = property(_pyift.IntMatrix_nrows_get, _pyift.IntMatrix_nrows_set, doc=r"""nrows""")
    tbrow = property(_pyift.IntMatrix_tbrow_get, _pyift.IntMatrix_tbrow_set, doc=r"""tbrow""")
    n = property(_pyift.IntMatrix_n_get, _pyift.IntMatrix_n_set, doc=r"""n""")

    def AsNumPy(self) -> "PyObject *":
        r"""AsNumPy(self) -> PyObject *"""
        return _pyift.IntMatrix_AsNumPy(self)

    def FromNumPy(self, input: "PyObject *") -> "void":
        r"""
        FromNumPy(self, input)

        Parameters
        ----------
        input: PyObject *

        """
        return _pyift.IntMatrix_FromNumPy(self, input)
    __swig_destroy__ = _pyift.delete_IntMatrix

    def __init__(self):
        r"""__init__(self) -> IntMatrix"""
        _pyift.IntMatrix_swiginit(self, _pyift.new_IntMatrix())

# Register IntMatrix in _pyift:
_pyift.IntMatrix_swigregister(IntMatrix)


def CreateIntMatrix(ncols: "int", nrows: "int") -> "iftIntMatrix *":
    r"""
    CreateIntMatrix(ncols, nrows) -> IntMatrix

    Parameters
    ----------
    ncols: int
    nrows: int

    """
    return _pyift.CreateIntMatrix(ncols, nrows)

def PrintIntMatrix(M: "IntMatrix") -> "void":
    r"""
    PrintIntMatrix(M)

    Parameters
    ----------
    M: iftIntMatrix const *

    """
    return _pyift.PrintIntMatrix(M)
class CharArray(object):
    r"""Proxy of C iftCharArray struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    n = property(_pyift.CharArray_n_get, _pyift.CharArray_n_set, doc=r"""n""")
    val = property(_pyift.CharArray_val_get, _pyift.CharArray_val_set, doc=r"""val""")
    __swig_destroy__ = _pyift.delete_CharArray

    def __init__(self):
        r"""__init__(self) -> CharArray"""
        _pyift.CharArray_swiginit(self, _pyift.new_CharArray())

# Register CharArray in _pyift:
_pyift.CharArray_swigregister(CharArray)

YCbCr_CSPACE = _pyift.YCbCr_CSPACE

YCbCrNorm_CSPACE = _pyift.YCbCrNorm_CSPACE

RGB_CSPACE = _pyift.RGB_CSPACE

RGBNorm_CSPACE = _pyift.RGBNorm_CSPACE

GRAY_CSPACE = _pyift.GRAY_CSPACE

GRAYNorm_CSPACE = _pyift.GRAYNorm_CSPACE

WEIGHTED_YCbCr_CSPACE = _pyift.WEIGHTED_YCbCr_CSPACE

LAB_CSPACE = _pyift.LAB_CSPACE

LABNorm_CSPACE = _pyift.LABNorm_CSPACE

LABNorm2_CSPACE = _pyift.LABNorm2_CSPACE

HSV_CSPACE = _pyift.HSV_CSPACE

UNDEFINED_CSPACE = _pyift.UNDEFINED_CSPACE

class Color(object):
    r"""Proxy of C iftColor struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    val = property(_pyift.Color_val_get, _pyift.Color_val_set, doc=r"""val""")
    alpha = property(_pyift.Color_alpha_get, _pyift.Color_alpha_set, doc=r"""alpha""")

    def __setitem__(self, i: "int", value: "int") -> "void":
        r"""
        __setitem__(self, i, value)

        Parameters
        ----------
        i: int
        value: int

        """
        return _pyift.Color___setitem__(self, i, value)

    def SetValues(self, tuple: "PyObject *") -> "void":
        r"""
        SetValues(self, tuple)

        Parameters
        ----------
        tuple: PyObject *

        """
        return _pyift.Color_SetValues(self, tuple)

    def GetValues(self) -> "PyObject *":
        r"""GetValues(self) -> PyObject *"""
        return _pyift.Color_GetValues(self)

    def __init__(self):
        r"""__init__(self) -> Color"""
        _pyift.Color_swiginit(self, _pyift.new_Color())
    __swig_destroy__ = _pyift.delete_Color

# Register Color in _pyift:
_pyift.Color_swigregister(Color)

class ColorTable(object):
    r"""Proxy of C iftColorTable struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    color = property(_pyift.ColorTable_color_get, _pyift.ColorTable_color_set, doc=r"""color""")
    ncolors = property(_pyift.ColorTable_ncolors_get, _pyift.ColorTable_ncolors_set, doc=r"""ncolors""")
    __swig_destroy__ = _pyift.delete_ColorTable

    def AsNumPy(self) -> "PyObject *":
        r"""AsNumPy(self) -> PyObject *"""
        return _pyift.ColorTable_AsNumPy(self)

    def __setitem__(self, idx: "int", hex: "char const *") -> "void":
        r"""
        __setitem__(self, idx, hex)

        Parameters
        ----------
        idx: int
        hex: char const *

        """
        return _pyift.ColorTable___setitem__(self, idx, hex)

    def __init__(self):
        r"""__init__(self) -> ColorTable"""
        _pyift.ColorTable_swiginit(self, _pyift.new_ColorTable())

# Register ColorTable in _pyift:
_pyift.ColorTable_swigregister(ColorTable)


def CreateColorTable(ncolors: "int") -> "iftColorTable *":
    r"""
    CreateColorTable(ncolors) -> ColorTable

    Parameters
    ----------
    ncolors: int

    """
    return _pyift.CreateColorTable(ncolors)

def CreateFColorMatrix(ncolors: "int") -> "iftFColorMatrix *":
    r"""
    CreateFColorMatrix(ncolors) -> iftFColorMatrix *

    Parameters
    ----------
    ncolors: int

    """
    return _pyift.CreateFColorMatrix(ncolors)

def ConvertRGBColorTableToYCbCrColorTable(colorTable_rgb: "ColorTable", normalization_value: "int") -> "void":
    r"""
    ConvertRGBColorTableToYCbCrColorTable(colorTable_rgb, normalization_value)

    Parameters
    ----------
    colorTable_rgb: iftColorTable *
    normalization_value: int

    """
    return _pyift.ConvertRGBColorTableToYCbCrColorTable(colorTable_rgb, normalization_value)

def ConvertYCbCrColorTableToRGBColorTable(ctb: "ColorTable", normalization_value: "int") -> "iftColorTable *":
    r"""
    ConvertYCbCrColorTableToRGBColorTable(ctb, normalization_value) -> ColorTable

    Parameters
    ----------
    ctb: iftColorTable const *
    normalization_value: int

    """
    return _pyift.ConvertYCbCrColorTableToRGBColorTable(ctb, normalization_value)

def BlueToRedColorTable(ncolors: "int") -> "iftColorTable *":
    r"""
    BlueToRedColorTable(ncolors) -> ColorTable

    Parameters
    ----------
    ncolors: int

    """
    return _pyift.BlueToRedColorTable(ncolors)

def CreateRandomColorTable(n_colors: "int") -> "iftColorTable *":
    r"""
    CreateRandomColorTable(n_colors) -> ColorTable

    Parameters
    ----------
    n_colors: int

    """
    return _pyift.CreateRandomColorTable(n_colors)

def RGBtoYCbCr(cin: "Color", normalization_value: "int") -> "iftColor":
    r"""
    RGBtoYCbCr(cin, normalization_value) -> Color

    Parameters
    ----------
    cin: iftColor
    normalization_value: int

    """
    return _pyift.RGBtoYCbCr(cin, normalization_value)

def YCbCrtoRGB(cin: "Color", normalization_value: "int") -> "iftColor":
    r"""
    YCbCrtoRGB(cin, normalization_value) -> Color

    Parameters
    ----------
    cin: iftColor
    normalization_value: int

    """
    return _pyift.YCbCrtoRGB(cin, normalization_value)

def HexaColorToRGB(hexa_color: "char const *") -> "iftColor":
    r"""
    HexaColorToRGB(hexa_color) -> Color

    Parameters
    ----------
    hexa_color: char const *

    """
    return _pyift.HexaColorToRGB(hexa_color)

def CreateGradientColorTable(hexa_colors: "iftStrArray const *", n_colors: "int") -> "iftColorTable *":
    r"""
    CreateGradientColorTable(hexa_colors, n_colors) -> ColorTable

    Parameters
    ----------
    hexa_colors: iftStrArray const *
    n_colors: int

    """
    return _pyift.CreateGradientColorTable(hexa_colors, n_colors)

def GrayColorTable(n_colors: "int") -> "iftColorTable *":
    r"""
    GrayColorTable(n_colors) -> ColorTable

    Parameters
    ----------
    n_colors: int

    """
    return _pyift.GrayColorTable(n_colors)

def IronColorTable(n_colors: "int") -> "iftColorTable *":
    r"""
    IronColorTable(n_colors) -> ColorTable

    Parameters
    ----------
    n_colors: int

    """
    return _pyift.IronColorTable(n_colors)

def HotColorTable(n_colors: "int") -> "iftColorTable *":
    r"""
    HotColorTable(n_colors) -> ColorTable

    Parameters
    ----------
    n_colors: int

    """
    return _pyift.HotColorTable(n_colors)

def RainbowColorTable(n_colors: "int") -> "iftColorTable *":
    r"""
    RainbowColorTable(n_colors) -> ColorTable

    Parameters
    ----------
    n_colors: int

    """
    return _pyift.RainbowColorTable(n_colors)

def CategoricalColorTable(n_colors: "int") -> "iftColorTable *":
    r"""
    CategoricalColorTable(n_colors) -> ColorTable

    Parameters
    ----------
    n_colors: int

    """
    return _pyift.CategoricalColorTable(n_colors)

def ReverseRainbowColorTable(n_colors: "int") -> "iftColorTable *":
    r"""
    ReverseRainbowColorTable(n_colors) -> ColorTable

    Parameters
    ----------
    n_colors: int

    """
    return _pyift.ReverseRainbowColorTable(n_colors)

def HeatMapColorTable(n_colors: "int") -> "iftColorTable *":
    r"""
    HeatMapColorTable(n_colors) -> ColorTable

    Parameters
    ----------
    n_colors: int

    """
    return _pyift.HeatMapColorTable(n_colors)

def RedHotColorTable(n_colors: "int") -> "iftColorTable *":
    r"""
    RedHotColorTable(n_colors) -> ColorTable

    Parameters
    ----------
    n_colors: int

    """
    return _pyift.RedHotColorTable(n_colors)

def GreenHotColorTable(n_colors: "int") -> "iftColorTable *":
    r"""
    GreenHotColorTable(n_colors) -> ColorTable

    Parameters
    ----------
    n_colors: int

    """
    return _pyift.GreenHotColorTable(n_colors)

def BlueHotColorTable(n_colors: "int") -> "iftColorTable *":
    r"""
    BlueHotColorTable(n_colors) -> ColorTable

    Parameters
    ----------
    n_colors: int

    """
    return _pyift.BlueHotColorTable(n_colors)

def RedYellowHotColorTable(n_colors: "int") -> "iftColorTable *":
    r"""
    RedYellowHotColorTable(n_colors) -> ColorTable

    Parameters
    ----------
    n_colors: int

    """
    return _pyift.RedYellowHotColorTable(n_colors)

def RedToBlueColorTable(n_colors: "int") -> "iftColorTable *":
    r"""
    RedToBlueColorTable(n_colors) -> ColorTable

    Parameters
    ----------
    n_colors: int

    """
    return _pyift.RedToBlueColorTable(n_colors)

def ViridisColorTable(n_colors: "int") -> "iftColorTable *":
    r"""
    ViridisColorTable(n_colors) -> ColorTable

    Parameters
    ----------
    n_colors: int

    """
    return _pyift.ViridisColorTable(n_colors)

def PlasmaColorTable(n_colors: "int") -> "iftColorTable *":
    r"""
    PlasmaColorTable(n_colors) -> ColorTable

    Parameters
    ----------
    n_colors: int

    """
    return _pyift.PlasmaColorTable(n_colors)

def Category21ColorTable(n_colors: "int") -> "iftColorTable *":
    r"""
    Category21ColorTable(n_colors) -> ColorTable

    Parameters
    ----------
    n_colors: int

    """
    return _pyift.Category21ColorTable(n_colors)

def Category10ColorTable(n_colors: "int") -> "iftColorTable *":
    r"""
    Category10ColorTable(n_colors) -> ColorTable

    Parameters
    ----------
    n_colors: int

    """
    return _pyift.Category10ColorTable(n_colors)

def CreateColorTableFromNumPy(input: "PyObject *") -> "iftColorTable *":
    r"""
    CreateColorTableFromNumPy(input) -> ColorTable

    Parameters
    ----------
    input: PyObject *

    """
    return _pyift.CreateColorTableFromNumPy(input)
class IntArray(object):
    r"""Proxy of C iftIntArray struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    n = property(_pyift.IntArray_n_get, _pyift.IntArray_n_set, doc=r"""n""")
    val = property(_pyift.IntArray_val_get, _pyift.IntArray_val_set, doc=r"""val""")

    def AsNumPy(self) -> "PyObject *":
        r"""AsNumPy(self) -> PyObject *"""
        return _pyift.IntArray_AsNumPy(self)

    def FromNumPy(self, input: "PyObject *") -> "void":
        r"""
        FromNumPy(self, input)

        Parameters
        ----------
        input: PyObject *

        """
        return _pyift.IntArray_FromNumPy(self, input)
    __swig_destroy__ = _pyift.delete_IntArray

    def __init__(self):
        r"""__init__(self) -> IntArray"""
        _pyift.IntArray_swiginit(self, _pyift.new_IntArray())

# Register IntArray in _pyift:
_pyift.IntArray_swigregister(IntArray)


def CreateIntArray(n: "long") -> "iftIntArray *":
    r"""
    CreateIntArray(n) -> IntArray

    Parameters
    ----------
    n: long

    """
    return _pyift.CreateIntArray(n)

def CreateIntArrayFromNumPy(input: "PyObject *") -> "iftIntArray *":
    r"""
    CreateIntArrayFromNumPy(input) -> IntArray

    Parameters
    ----------
    input: PyObject *

    """
    return _pyift.CreateIntArrayFromNumPy(input)
class DblArray(object):
    r"""Proxy of C iftDblArray struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    n = property(_pyift.DblArray_n_get, _pyift.DblArray_n_set, doc=r"""n""")
    val = property(_pyift.DblArray_val_get, _pyift.DblArray_val_set, doc=r"""val""")

    def AsNumPy(self) -> "PyObject *":
        r"""AsNumPy(self) -> PyObject *"""
        return _pyift.DblArray_AsNumPy(self)

    def FromNumPy(self, input: "PyObject *") -> "void":
        r"""
        FromNumPy(self, input)

        Parameters
        ----------
        input: PyObject *

        """
        return _pyift.DblArray_FromNumPy(self, input)
    __swig_destroy__ = _pyift.delete_DblArray

    def __init__(self):
        r"""__init__(self) -> DblArray"""
        _pyift.DblArray_swiginit(self, _pyift.new_DblArray())

# Register DblArray in _pyift:
_pyift.DblArray_swigregister(DblArray)


def CreateDblArrayFromNumPy(input: "PyObject *") -> "iftDblArray *":
    r"""
    CreateDblArrayFromNumPy(input) -> DblArray

    Parameters
    ----------
    input: PyObject *

    """
    return _pyift.CreateDblArrayFromNumPy(input)
class Matrix(object):
    r"""Proxy of C iftMatrix struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nrows = property(_pyift.Matrix_nrows_get, _pyift.Matrix_nrows_set, doc=r"""nrows""")
    ncols = property(_pyift.Matrix_ncols_get, _pyift.Matrix_ncols_set, doc=r"""ncols""")
    n = property(_pyift.Matrix_n_get, _pyift.Matrix_n_set, doc=r"""n""")
    val = property(_pyift.Matrix_val_get, _pyift.Matrix_val_set, doc=r"""val""")
    tbrow = property(_pyift.Matrix_tbrow_get, _pyift.Matrix_tbrow_set, doc=r"""tbrow""")
    allocated = property(_pyift.Matrix_allocated_get, _pyift.Matrix_allocated_set, doc=r"""allocated""")

    def __add__(self, m2: "Matrix") -> "iftMatrix *":
        r"""
        __add__(self, m2) -> Matrix

        Parameters
        ----------
        m2: iftMatrix *

        """
        return _pyift.Matrix___add__(self, m2)

    def __sub__(self, m2: "Matrix") -> "iftMatrix *":
        r"""
        __sub__(self, m2) -> Matrix

        Parameters
        ----------
        m2: iftMatrix *

        """
        return _pyift.Matrix___sub__(self, m2)

    def __mul__(self, m2: "Matrix") -> "iftMatrix *":
        r"""
        __mul__(self, m2) -> Matrix

        Parameters
        ----------
        m2: iftMatrix *

        """
        return _pyift.Matrix___mul__(self, m2)

    def AsNumPy(self) -> "PyObject *":
        r"""AsNumPy(self) -> PyObject *"""
        return _pyift.Matrix_AsNumPy(self)

    def FromNumPy(self, input: "PyObject *") -> "void":
        r"""
        FromNumPy(self, input)

        Parameters
        ----------
        input: PyObject *

        """
        return _pyift.Matrix_FromNumPy(self, input)
    __swig_destroy__ = _pyift.delete_Matrix

    def __init__(self):
        r"""__init__(self) -> Matrix"""
        _pyift.Matrix_swiginit(self, _pyift.new_Matrix())

# Register Matrix in _pyift:
_pyift.Matrix_swigregister(Matrix)


def CreateMatrix(ncols: "int", nrows: "int") -> "iftMatrix *":
    r"""
    CreateMatrix(ncols, nrows) -> Matrix

    Parameters
    ----------
    ncols: int
    nrows: int

    """
    return _pyift.CreateMatrix(ncols, nrows)

def PrintMatrix(M: "Matrix") -> "void":
    r"""
    PrintMatrix(M)

    Parameters
    ----------
    M: iftMatrix const *

    """
    return _pyift.PrintMatrix(M)
class Set(object):
    r"""Proxy of C iftSet struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    elem = property(_pyift.Set_elem_get, _pyift.Set_elem_set, doc=r"""elem""")
    next = property(_pyift.Set_next_get, _pyift.Set_next_set, doc=r"""next""")

    def InsideMask(self, mask: "Image") -> "iftSet *":
        r"""
        InsideMask(self, mask) -> Set

        Parameters
        ----------
        mask: iftImage *

        """
        return _pyift.Set_InsideMask(self, mask)

    def __add__(self, other: "Set") -> "iftSet *":
        r"""
        __add__(self, other) -> Set

        Parameters
        ----------
        other: iftSet *

        """
        return _pyift.Set___add__(self, other)

    def AsVoxelArray(self, image: "Image") -> "iftVoxelArray *":
        r"""
        AsVoxelArray(self, image) -> VoxelArray

        Parameters
        ----------
        image: iftImage *

        """
        return _pyift.Set_AsVoxelArray(self, image)

    def AsNumPy(self, *args) -> "PyObject *":
        r"""
        AsNumPy(self) -> PyObject
        AsNumPy(self, mimg) -> PyObject

        Parameters
        ----------
        mimg: iftMImage const *

        AsNumPy(self, img) -> PyObject

        Parameters
        ----------
        img: iftFImage const *

        AsNumPy(self, img) -> PyObject *

        Parameters
        ----------
        img: iftImage const *

        """
        return _pyift.Set_AsNumPy(self, *args)

    def CumulativeMean(self, mimg: "MImage") -> "PyObject *":
        r"""
        CumulativeMean(self, mimg) -> PyObject *

        Parameters
        ----------
        mimg: iftMImage const *

        """
        return _pyift.Set_CumulativeMean(self, mimg)
    __swig_destroy__ = _pyift.delete_Set

    def __init__(self):
        r"""__init__(self) -> Set"""
        _pyift.Set_swiginit(self, _pyift.new_Set())

# Register Set in _pyift:
_pyift.Set_swigregister(Set)


def RemoveSet(S: "iftSet **") -> "iftSet **":
    r"""
    RemoveSet(S) -> int

    Parameters
    ----------
    S: iftSet **

    """
    return _pyift.RemoveSet(S)

def SetConcat(S1: "Set", S2: "Set") -> "iftSet *":
    r"""
    SetConcat(S1, S2) -> Set

    Parameters
    ----------
    S1: iftSet *
    S2: iftSet *

    """
    return _pyift.SetConcat(S1, S2)

def SetToArray(S: "Set") -> "iftIntArray *":
    r"""
    SetToArray(S) -> IntArray

    Parameters
    ----------
    S: iftSet *

    """
    return _pyift.SetToArray(S)

def CreateSetFromList(input: "PyObject *") -> "iftSet *":
    r"""
    CreateSetFromList(input) -> Set

    Parameters
    ----------
    input: PyObject *

    """
    return _pyift.CreateSetFromList(input)
class BMap(object):
    r"""Proxy of C iftBMap struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    val = property(_pyift.BMap_val_get, _pyift.BMap_val_set, doc=r"""val""")
    nbytes = property(_pyift.BMap_nbytes_get, _pyift.BMap_nbytes_set, doc=r"""nbytes""")
    n = property(_pyift.BMap_n_get, _pyift.BMap_n_set, doc=r"""n""")
    __swig_destroy__ = _pyift.delete_BMap

    def __init__(self):
        r"""__init__(self) -> BMap"""
        _pyift.BMap_swiginit(self, _pyift.new_BMap())

# Register BMap in _pyift:
_pyift.BMap_swigregister(BMap)


def CreateBMap(n: "int") -> "iftBMap *":
    r"""
    CreateBMap(n) -> BMap

    Parameters
    ----------
    n: int

    """
    return _pyift.CreateBMap(n)

def ReadBMap(path: "char const *") -> "iftBMap *":
    r"""
    ReadBMap(path) -> BMap

    Parameters
    ----------
    path: char const *

    """
    return _pyift.ReadBMap(path)

def WriteBMap(bmap: "BMap", path: "char const *") -> "void":
    r"""
    WriteBMap(bmap, path)

    Parameters
    ----------
    bmap: iftBMap const *
    path: char const *

    """
    return _pyift.WriteBMap(bmap, path)

def FillBMap(bmap: "BMap", value: "int") -> "void":
    r"""
    FillBMap(bmap, value)

    Parameters
    ----------
    bmap: iftBMap *
    value: int

    """
    return _pyift.FillBMap(bmap, value)

def CopyBMap(src: "BMap") -> "iftBMap *":
    r"""
    CopyBMap(src) -> BMap

    Parameters
    ----------
    src: iftBMap const *

    """
    return _pyift.CopyBMap(src)

def BMapSet0(bmap: "BMap", b: "int") -> "void":
    r"""
    BMapSet0(bmap, b)

    Parameters
    ----------
    bmap: iftBMap *
    b: int

    """
    return _pyift.BMapSet0(bmap, b)

def BMapSet1(bmap: "BMap", b: "int") -> "void":
    r"""
    BMapSet1(bmap, b)

    Parameters
    ----------
    bmap: iftBMap *
    b: int

    """
    return _pyift.BMapSet1(bmap, b)

def BMapValue(bmap: "BMap", b: "int") -> "bool":
    r"""
    BMapValue(bmap, b) -> bool

    Parameters
    ----------
    bmap: iftBMap const *
    b: int

    """
    return _pyift.BMapValue(bmap, b)

def BMapToggle(bmap: "BMap", b: "int") -> "void":
    r"""
    BMapToggle(bmap, b)

    Parameters
    ----------
    bmap: iftBMap *
    b: int

    """
    return _pyift.BMapToggle(bmap, b)

def AlignBrainByMSP(img: "Image", msp_out: "iftPlane **") -> "iftImage *":
    r"""
    AlignBrainByMSP(img, msp_out) -> Image

    Parameters
    ----------
    img: iftImage const *
    msp_out: iftPlane **

    """
    return _pyift.AlignBrainByMSP(img, msp_out)

def RotateImageToMSP(img: "Image", msp: "iftPlane const *", interp_type: "iftInterpolationType") -> "iftImage *":
    r"""
    RotateImageToMSP(img, msp, interp_type) -> Image

    Parameters
    ----------
    img: iftImage const *
    msp: iftPlane const *
    interp_type: enum iftInterpolationType

    """
    return _pyift.RotateImageToMSP(img, msp, interp_type)

def MSPAsImage(msp: "iftPlane const *", ref_img: "Image") -> "iftImage *":
    r"""
    MSPAsImage(msp, ref_img) -> Image

    Parameters
    ----------
    msp: iftPlane const *
    ref_img: iftImage const *

    """
    return _pyift.MSPAsImage(msp, ref_img)
IFT_RIGHT_BRAIN_SIDE = _pyift.IFT_RIGHT_BRAIN_SIDE

IFT_LEFT_BRAIN_SIDE = _pyift.IFT_LEFT_BRAIN_SIDE


def BrainAsymMap(img: "Image", bias: "Image") -> "iftImage *":
    r"""
    BrainAsymMap(img, bias) -> Image

    Parameters
    ----------
    img: iftImage const *
    bias: iftImage const *

    """
    return _pyift.BrainAsymMap(img, bias)

def MeanBrainAsymMap(img_set: "FileSet", add_stdev_asymmetries: "bool") -> "iftImage *":
    r"""
    MeanBrainAsymMap(img_set, add_stdev_asymmetries) -> Image

    Parameters
    ----------
    img_set: iftFileSet const *
    add_stdev_asymmetries: bool

    """
    return _pyift.MeanBrainAsymMap(img_set, add_stdev_asymmetries)

def MeanBrainDiffMap(img_set: "FileSet", template_img: "Image", add_stdev_asymmetries: "bool") -> "iftImage *":
    r"""
    MeanBrainDiffMap(img_set, template_img, add_stdev_asymmetries) -> Image

    Parameters
    ----------
    img_set: iftFileSet const *
    template_img: iftImage const *
    add_stdev_asymmetries: bool

    """
    return _pyift.MeanBrainDiffMap(img_set, template_img, add_stdev_asymmetries)

def GridSamplingByBrainAsymmetries(asym_map: "Image", bin_mask: "Image", min_samples_on_symmetries: "int", thres_factor: "float") -> "iftIntArray *":
    r"""
    GridSamplingByBrainAsymmetries(asym_map, bin_mask, min_samples_on_symmetries, thres_factor) -> IntArray

    Parameters
    ----------
    asym_map: iftImage const *
    bin_mask: iftImage const *
    min_samples_on_symmetries: int
    thres_factor: float

    """
    return _pyift.GridSamplingByBrainAsymmetries(asym_map, bin_mask, min_samples_on_symmetries, thres_factor)

def BuildBrainHemisphereMImage(img: "Image") -> "iftMImage *":
    r"""
    BuildBrainHemisphereMImage(img) -> MImage

    Parameters
    ----------
    img: iftImage const *

    """
    return _pyift.BuildBrainHemisphereMImage(img)

def BuildBrainHemisphereMImageAsym(img: "Image", asym_map: "Image") -> "iftMImage *":
    r"""
    BuildBrainHemisphereMImageAsym(img, asym_map) -> MImage

    Parameters
    ----------
    img: iftImage const *
    asym_map: iftImage const *

    """
    return _pyift.BuildBrainHemisphereMImageAsym(img, asym_map)

def SymmISF(img: "Image", bin_mask: "Image", alpha: "float", beta: "float", thres_factor: "float", min_dist_to_border: "float", n_seeds_on_symmetric_regions: "int", normal_asymmap: "Image") -> "iftImage *":
    r"""
    SymmISF(img, bin_mask, alpha, beta, thres_factor, min_dist_to_border, n_seeds_on_symmetric_regions, normal_asymmap) -> Image

    Parameters
    ----------
    img: iftImage const *
    bin_mask: iftImage const *
    alpha: float
    beta: float
    thres_factor: float
    min_dist_to_border: float
    n_seeds_on_symmetric_regions: int
    normal_asymmap: iftImage const *

    """
    return _pyift.SymmISF(img, bin_mask, alpha, beta, thres_factor, min_dist_to_border, n_seeds_on_symmetric_regions, normal_asymmap)

def SymmOISF(img: "Image", bin_mask: "Image", n_supervoxels: "int", alpha: "float", beta: "float", gamma: "float", normal_asymmap: "Image", thres_factor: "float") -> "iftImage *":
    r"""
    SymmOISF(img, bin_mask, n_supervoxels, alpha, beta, gamma, normal_asymmap, thres_factor) -> Image

    Parameters
    ----------
    img: iftImage const *
    bin_mask: iftImage const *
    n_supervoxels: int
    alpha: float
    beta: float
    gamma: float
    normal_asymmap: iftImage const *
    thres_factor: float

    """
    return _pyift.SymmOISF(img, bin_mask, n_supervoxels, alpha, beta, gamma, normal_asymmap, thres_factor)

def ExtractBrainSide(img: "Image", side: "iftBrainSide") -> "iftImage *":
    r"""
    ExtractBrainSide(img, side) -> Image

    Parameters
    ----------
    img: iftImage const *
    side: enum iftBrainSide

    """
    return _pyift.ExtractBrainSide(img, side)

def ExtractSupervoxelHAAFeats(test_img: "Image", test_sym_svoxels: "Image", train_set: "FileSet", n_bins: "int", normal_asym_map: "Image", n_svoxels_out: "int *") -> "iftDataSet **":
    r"""
    ExtractSupervoxelHAAFeats(test_img, test_sym_svoxels, train_set, n_bins, normal_asym_map, n_svoxels_out) -> iftDataSet **

    Parameters
    ----------
    test_img: iftImage const *
    test_sym_svoxels: iftImage const *
    train_set: iftFileSet const *
    n_bins: int
    normal_asym_map: iftImage const *
    n_svoxels_out: int *

    """
    return _pyift.ExtractSupervoxelHAAFeats(test_img, test_sym_svoxels, train_set, n_bins, normal_asym_map, n_svoxels_out)

def ExtractSupervoxelBICAsymmFeats(test_img: "Image", test_sym_svoxels: "Image", train_set: "FileSet", n_bins_per_channel: "int", normal_asym_map: "Image", n_svoxels_out: "int *") -> "iftDataSet **":
    r"""
    ExtractSupervoxelBICAsymmFeats(test_img, test_sym_svoxels, train_set, n_bins_per_channel, normal_asym_map, n_svoxels_out) -> iftDataSet **

    Parameters
    ----------
    test_img: iftImage const *
    test_sym_svoxels: iftImage const *
    train_set: iftFileSet const *
    n_bins_per_channel: int
    normal_asym_map: iftImage const *
    n_svoxels_out: int *

    """
    return _pyift.ExtractSupervoxelBICAsymmFeats(test_img, test_sym_svoxels, train_set, n_bins_per_channel, normal_asym_map, n_svoxels_out)

def BuildRefDataSupervoxelDataSets(Zarr: "iftDataSet **", n_supervoxels: "int", test_img_path: "char const *", test_supervoxels_path: "char const *", train_set: "FileSet") -> "void":
    r"""
    BuildRefDataSupervoxelDataSets(Zarr, n_supervoxels, test_img_path, test_supervoxels_path, train_set)

    Parameters
    ----------
    Zarr: iftDataSet **
    n_supervoxels: int
    test_img_path: char const *
    test_supervoxels_path: char const *
    train_set: iftFileSet const *

    """
    return _pyift.BuildRefDataSupervoxelDataSets(Zarr, n_supervoxels, test_img_path, test_supervoxels_path, train_set)

def RegErrorMagnitude(img: "Image", template_img: "Image", bias: "Image") -> "iftImage *":
    r"""
    RegErrorMagnitude(img, template_img, bias) -> Image

    Parameters
    ----------
    img: iftImage const *
    template_img: iftImage const *
    bias: iftImage const *

    """
    return _pyift.RegErrorMagnitude(img, template_img, bias)

def MeanRegErrorMagnitude(img_set: "FileSet", template_img: "Image", add_stdev_error: "bool") -> "iftImage *":
    r"""
    MeanRegErrorMagnitude(img_set, template_img, add_stdev_error) -> Image

    Parameters
    ----------
    img_set: iftFileSet const *
    template_img: iftImage const *
    add_stdev_error: bool

    """
    return _pyift.MeanRegErrorMagnitude(img_set, template_img, add_stdev_error)

def ISFOnRegErrors(img: "Image", reg_error_mag: "Image", template_img: "Image", label_img: "Image", alphas: "DblArray", betas: "DblArray", thres_factors: "DblArray", min_dist_to_borders: "DblArray", n_seeds_on_correct_region: "IntArray") -> "iftImage *":
    r"""
    ISFOnRegErrors(img, reg_error_mag, template_img, label_img, alphas, betas, thres_factors, min_dist_to_borders, n_seeds_on_correct_region) -> Image

    Parameters
    ----------
    img: iftImage const *
    reg_error_mag: iftImage const *
    template_img: iftImage const *
    label_img: iftImage const *
    alphas: iftDblArray const *
    betas: iftDblArray const *
    thres_factors: iftDblArray const *
    min_dist_to_borders: iftDblArray const *
    n_seeds_on_correct_region: iftIntArray const *

    """
    return _pyift.ISFOnRegErrors(img, reg_error_mag, template_img, label_img, alphas, betas, thres_factors, min_dist_to_borders, n_seeds_on_correct_region)

def ISFOnRegErrorsFast(img: "Image", reg_error_mag: "Image", template_img: "Image", label_img: "Image", alphas: "DblArray", betas: "DblArray", thres_factors: "DblArray", min_dist_to_borders: "DblArray", n_seeds_on_correct_region: "IntArray") -> "iftImage *":
    r"""
    ISFOnRegErrorsFast(img, reg_error_mag, template_img, label_img, alphas, betas, thres_factors, min_dist_to_borders, n_seeds_on_correct_region) -> Image

    Parameters
    ----------
    img: iftImage const *
    reg_error_mag: iftImage const *
    template_img: iftImage const *
    label_img: iftImage const *
    alphas: iftDblArray const *
    betas: iftDblArray const *
    thres_factors: iftDblArray const *
    min_dist_to_borders: iftDblArray const *
    n_seeds_on_correct_region: iftIntArray const *

    """
    return _pyift.ISFOnRegErrorsFast(img, reg_error_mag, template_img, label_img, alphas, betas, thres_factors, min_dist_to_borders, n_seeds_on_correct_region)

def GridSamplingOnDomes(img: "Image", bin_mask: "Image", n_samples_on_flat_region: "int", thres_factor: "float", domes_out: "iftImage **") -> "iftImage **":
    r"""
    GridSamplingOnDomes(img, bin_mask, n_samples_on_flat_region, thres_factor, domes_out) -> IntArray

    Parameters
    ----------
    img: iftImage const *
    bin_mask: iftImage const *
    n_samples_on_flat_region: int
    thres_factor: float
    domes_out: iftImage **

    """
    return _pyift.GridSamplingOnDomes(img, bin_mask, n_samples_on_flat_region, thres_factor, domes_out)

def ExtractSupervoxelHistRegErrorsFeats(test_reg_error_mag: "Image", test_svoxels_img: "Image", train_set: "FileSet", n_bins: "int", n_svoxels_out: "int *") -> "iftDataSet **":
    r"""
    ExtractSupervoxelHistRegErrorsFeats(test_reg_error_mag, test_svoxels_img, train_set, n_bins, n_svoxels_out) -> iftDataSet **

    Parameters
    ----------
    test_reg_error_mag: iftImage const *
    test_svoxels_img: iftImage const *
    train_set: iftFileSet const *
    n_bins: int
    n_svoxels_out: int *

    """
    return _pyift.ExtractSupervoxelHistRegErrorsFeats(test_reg_error_mag, test_svoxels_img, train_set, n_bins, n_svoxels_out)

def ExtractSupervoxelHistRegErrorsFeatsDilation(test_img: "Image", test_svoxels_img: "Image", train_set: "FileSet", template_img: "Image", n_bins: "int", radius: "float", bias: "Image", n_svoxels_out: "int *") -> "iftDataSet **":
    r"""
    ExtractSupervoxelHistRegErrorsFeatsDilation(test_img, test_svoxels_img, train_set, template_img, n_bins, radius, bias, n_svoxels_out) -> iftDataSet **

    Parameters
    ----------
    test_img: iftImage const *
    test_svoxels_img: iftImage const *
    train_set: iftFileSet const *
    template_img: iftImage const *
    n_bins: int
    radius: float
    bias: iftImage const *
    n_svoxels_out: int *

    """
    return _pyift.ExtractSupervoxelHistRegErrorsFeatsDilation(test_img, test_svoxels_img, train_set, template_img, n_bins, radius, bias, n_svoxels_out)

def ExtractSupervoxelBandHistFeats(test_filt_img: "MImage", test_svoxels_img: "Image", train_set: "FileSet", n_bins: "int", n_svoxels_out: "int *") -> "iftDataSet **":
    r"""
    ExtractSupervoxelBandHistFeats(test_filt_img, test_svoxels_img, train_set, n_bins, n_svoxels_out) -> iftDataSet **

    Parameters
    ----------
    test_filt_img: iftMImage const *
    test_svoxels_img: iftImage const *
    train_set: iftFileSet const *
    n_bins: int
    n_svoxels_out: int *

    """
    return _pyift.ExtractSupervoxelBandHistFeats(test_filt_img, test_svoxels_img, train_set, n_bins, n_svoxels_out)

def WriteSupervoxelDataSets(Zarr: "iftDataSet const **", n_supervoxels: "int", out_dir: "char const *") -> "void":
    r"""
    WriteSupervoxelDataSets(Zarr, n_supervoxels, out_dir)

    Parameters
    ----------
    Zarr: iftDataSet const **
    n_supervoxels: int
    out_dir: char const *

    """
    return _pyift.WriteSupervoxelDataSets(Zarr, n_supervoxels, out_dir)

def ComputeLinearAttenuationWeightsByEDT(label_img: "Image", max_attenuation_factor: "float") -> "iftFImage *":
    r"""
    ComputeLinearAttenuationWeightsByEDT(label_img, max_attenuation_factor) -> FImage

    Parameters
    ----------
    label_img: iftImage const *
    max_attenuation_factor: float

    """
    return _pyift.ComputeLinearAttenuationWeightsByEDT(label_img, max_attenuation_factor)

def ComputeExponentialAttenuationWeightsByEDT(label_img: "Image", max_attenuation_factor: "float", exponent: "float") -> "iftFImage *":
    r"""
    ComputeExponentialAttenuationWeightsByEDT(label_img, max_attenuation_factor, exponent) -> FImage

    Parameters
    ----------
    label_img: iftImage const *
    max_attenuation_factor: float
    exponent: float

    """
    return _pyift.ComputeExponentialAttenuationWeightsByEDT(label_img, max_attenuation_factor, exponent)

def WeightedRegErrorMagnitude(img: "Image", template_img: "Image", weights: "FImage") -> "iftImage *":
    r"""
    WeightedRegErrorMagnitude(img, template_img, weights) -> Image

    Parameters
    ----------
    img: iftImage const *
    template_img: iftImage const *
    weights: iftFImage const *

    """
    return _pyift.WeightedRegErrorMagnitude(img, template_img, weights)

def RemoveSVoxelsByVolAndMeanRegError(svoxels_img: "Image", reg_error_mag: "Image", min_vol: "int", min_mean_reg_error_on_svoxel: "float") -> "iftImage *":
    r"""
    RemoveSVoxelsByVolAndMeanRegError(svoxels_img, reg_error_mag, min_vol, min_mean_reg_error_on_svoxel) -> Image

    Parameters
    ----------
    svoxels_img: iftImage const *
    reg_error_mag: iftImage const *
    min_vol: int
    min_mean_reg_error_on_svoxel: float

    """
    return _pyift.RemoveSVoxelsByVolAndMeanRegError(svoxels_img, reg_error_mag, min_vol, min_mean_reg_error_on_svoxel)

def ISFOnAttentionMap(img: "Image", attention_map: "Image", target_img: "Image", label_img: "Image", alphas: "DblArray", betas: "DblArray", thres_factors: "DblArray", min_dist_to_borders: "DblArray", n_seeds_on_correct_region: "IntArray") -> "iftImage *":
    r"""
    ISFOnAttentionMap(img, attention_map, target_img, label_img, alphas, betas, thres_factors, min_dist_to_borders, n_seeds_on_correct_region) -> Image

    Parameters
    ----------
    img: iftImage const *
    attention_map: iftImage const *
    target_img: iftImage const *
    label_img: iftImage const *
    alphas: iftDblArray const *
    betas: iftDblArray const *
    thres_factors: iftDblArray const *
    min_dist_to_borders: iftDblArray const *
    n_seeds_on_correct_region: iftIntArray const *

    """
    return _pyift.ISFOnAttentionMap(img, attention_map, target_img, label_img, alphas, betas, thres_factors, min_dist_to_borders, n_seeds_on_correct_region)

def ExtractSupervoxelBICFeats(test_img: "Image", test_svoxels_img: "Image", train_set: "FileSet", n_bins_per_channel: "int", n_svoxels_out: "int *") -> "iftDataSet **":
    r"""
    ExtractSupervoxelBICFeats(test_img, test_svoxels_img, train_set, n_bins_per_channel, n_svoxels_out) -> iftDataSet **

    Parameters
    ----------
    test_img: iftImage const *
    test_svoxels_img: iftImage const *
    train_set: iftFileSet const *
    n_bins_per_channel: int
    n_svoxels_out: int *

    """
    return _pyift.ExtractSupervoxelBICFeats(test_img, test_svoxels_img, train_set, n_bins_per_channel, n_svoxels_out)

def ExtractSupervoxelAttentionMapFeats(test_attention_map: "Image", test_svoxels_img: "Image", train_set: "FileSet", n_bins: "int", n_svoxels_out: "int *") -> "iftDataSet **":
    r"""
    ExtractSupervoxelAttentionMapFeats(test_attention_map, test_svoxels_img, train_set, n_bins, n_svoxels_out) -> iftDataSet **

    Parameters
    ----------
    test_attention_map: iftImage const *
    test_svoxels_img: iftImage const *
    train_set: iftFileSet const *
    n_bins: int
    n_svoxels_out: int *

    """
    return _pyift.ExtractSupervoxelAttentionMapFeats(test_attention_map, test_svoxels_img, train_set, n_bins, n_svoxels_out)

def ExtractSupervoxelLBPFeats(test_img: "Image", test_svoxels_img: "Image", train_set: "FileSet", n_bins: "int", n_svoxels_out: "int *") -> "iftDataSet **":
    r"""
    ExtractSupervoxelLBPFeats(test_img, test_svoxels_img, train_set, n_bins, n_svoxels_out) -> iftDataSet **

    Parameters
    ----------
    test_img: iftImage const *
    test_svoxels_img: iftImage const *
    train_set: iftFileSet const *
    n_bins: int
    n_svoxels_out: int *

    """
    return _pyift.ExtractSupervoxelLBPFeats(test_img, test_svoxels_img, train_set, n_bins, n_svoxels_out)

def ExtractSupervoxelVLBPFeats(test_img: "Image", test_svoxels_img: "Image", train_set: "FileSet", n_bins: "int", n_svoxels_out: "int *") -> "iftDataSet **":
    r"""
    ExtractSupervoxelVLBPFeats(test_img, test_svoxels_img, train_set, n_bins, n_svoxels_out) -> iftDataSet **

    Parameters
    ----------
    test_img: iftImage const *
    test_svoxels_img: iftImage const *
    train_set: iftFileSet const *
    n_bins: int
    n_svoxels_out: int *

    """
    return _pyift.ExtractSupervoxelVLBPFeats(test_img, test_svoxels_img, train_set, n_bins, n_svoxels_out)

def ExtractSupervoxelTextureFeats(test_img: "Image", test_attention_map: "Image", test_svoxels_img: "Image", train_set: "FileSet", train_attention_map_set: "FileSet", n_bins: "int", n_svoxels_out: "int *") -> "iftDataSet **":
    r"""
    ExtractSupervoxelTextureFeats(test_img, test_attention_map, test_svoxels_img, train_set, train_attention_map_set, n_bins, n_svoxels_out) -> iftDataSet **

    Parameters
    ----------
    test_img: iftImage const *
    test_attention_map: iftImage const *
    test_svoxels_img: iftImage const *
    train_set: iftFileSet const *
    train_attention_map_set: iftFileSet const *
    n_bins: int
    n_svoxels_out: int *

    """
    return _pyift.ExtractSupervoxelTextureFeats(test_img, test_attention_map, test_svoxels_img, train_set, train_attention_map_set, n_bins, n_svoxels_out)

def BrainMRIPreProcessing(mri: "Image", nbits: "int", msp_in: "iftPlane const *", mask: "Image", ref_mri: "Image", ref_mask: "Image", skip_n4: "bool", skip_median_filter: "bool", skip_msp_alignment: "bool", skip_hist_matching: "bool", msp_out: "iftPlane **") -> "iftImage *":
    r"""
    BrainMRIPreProcessing(mri, nbits, msp_in, mask, ref_mri, ref_mask, skip_n4, skip_median_filter, skip_msp_alignment, skip_hist_matching, msp_out) -> Image

    Parameters
    ----------
    mri: iftImage const *
    nbits: int
    msp_in: iftPlane const *
    mask: iftImage const *
    ref_mri: iftImage const *
    ref_mask: iftImage const *
    skip_n4: bool
    skip_median_filter: bool
    skip_msp_alignment: bool
    skip_hist_matching: bool
    msp_out: iftPlane **

    """
    return _pyift.BrainMRIPreProcessing(mri, nbits, msp_in, mask, ref_mri, ref_mask, skip_n4, skip_median_filter, skip_msp_alignment, skip_hist_matching, msp_out)
class Hist(object):
    r"""Proxy of C iftHist struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nbins = property(_pyift.Hist_nbins_get, _pyift.Hist_nbins_set, doc=r"""nbins""")
    val = property(_pyift.Hist_val_get, _pyift.Hist_val_set, doc=r"""val""")

    def AsList(self) -> "PyObject *":
        r"""AsList(self) -> PyObject *"""
        return _pyift.Hist_AsList(self)

    def FromList(self, list: "PyObject *") -> "void":
        r"""
        FromList(self, list)

        Parameters
        ----------
        list: PyObject *

        """
        return _pyift.Hist_FromList(self, list)

    def AsNumPy(self) -> "PyObject *":
        r"""AsNumPy(self) -> PyObject *"""
        return _pyift.Hist_AsNumPy(self)

    def FromNumPy(self, input: "PyObject *") -> "void":
        r"""
        FromNumPy(self, input)

        Parameters
        ----------
        input: PyObject *

        """
        return _pyift.Hist_FromNumPy(self, input)
    __swig_destroy__ = _pyift.delete_Hist

    def __init__(self):
        r"""__init__(self) -> Hist"""
        _pyift.Hist_swiginit(self, _pyift.new_Hist())

# Register Hist in _pyift:
_pyift.Hist_swigregister(Hist)


def CreateHist(nbins: "long") -> "iftHist *":
    r"""
    CreateHist(nbins) -> Hist

    Parameters
    ----------
    nbins: long

    """
    return _pyift.CreateHist(nbins)

def PrintHist(hist: "Hist") -> "void":
    r"""
    PrintHist(hist)

    Parameters
    ----------
    hist: iftHist const *

    """
    return _pyift.PrintHist(hist)

def CalcGrayImageHist(img: "Image", mask: "Image", nbins: "long", max_val: "int", normalize: "bool") -> "iftHist *":
    r"""
    CalcGrayImageHist(img, mask, nbins, max_val, normalize) -> Hist

    Parameters
    ----------
    img: iftImage const *
    mask: iftImage const *
    nbins: long
    max_val: int
    normalize: bool

    """
    return _pyift.CalcGrayImageHist(img, mask, nbins, max_val, normalize)

def CalcGrayImageHistForLabels(img: "Image", label_img: "Image", nbins: "int", max_val: "int", normalize: "bool", n_hists_out: "int *") -> "iftHist **":
    r"""
    CalcGrayImageHistForLabels(img, label_img, nbins, max_val, normalize, n_hists_out) -> iftHist **

    Parameters
    ----------
    img: iftImage const *
    label_img: iftImage const *
    nbins: int
    max_val: int
    normalize: bool
    n_hists_out: int *

    """
    return _pyift.CalcGrayImageHistForLabels(img, label_img, nbins, max_val, normalize, n_hists_out)

def CalcColorImageHist(img: "Image", mask: "Image", nbins: "int", normalize: "bool") -> "iftHist *":
    r"""
    CalcColorImageHist(img, mask, nbins, normalize) -> Hist

    Parameters
    ----------
    img: iftImage const *
    mask: iftImage const *
    nbins: int
    normalize: bool

    """
    return _pyift.CalcColorImageHist(img, mask, nbins, normalize)

def CalcAccHist(hist: "Hist") -> "iftHist *":
    r"""
    CalcAccHist(hist) -> Hist

    Parameters
    ----------
    hist: iftHist const *

    """
    return _pyift.CalcAccHist(hist)

def NormalizeHist(src: "Hist") -> "iftHist *":
    r"""
    NormalizeHist(src) -> Hist

    Parameters
    ----------
    src: iftHist const *

    """
    return _pyift.NormalizeHist(src)

def HistMode(hist: "Hist", exclude_zero: "bool") -> "int":
    r"""
    HistMode(hist, exclude_zero) -> int

    Parameters
    ----------
    hist: iftHist const *
    exclude_zero: bool

    """
    return _pyift.HistMode(hist, exclude_zero)

def HistMean(hist: "Hist", exclude_zero: "bool") -> "double":
    r"""
    HistMean(hist, exclude_zero) -> double

    Parameters
    ----------
    hist: iftHist const *
    exclude_zero: bool

    """
    return _pyift.HistMean(hist, exclude_zero)

def HistMedian(hist: "Hist", exclude_zero: "bool") -> "int":
    r"""
    HistMedian(hist, exclude_zero) -> int

    Parameters
    ----------
    hist: iftHist const *
    exclude_zero: bool

    """
    return _pyift.HistMedian(hist, exclude_zero)

def HistArgMin(hist: "Hist", exclude_zero: "bool") -> "int":
    r"""
    HistArgMin(hist, exclude_zero) -> int

    Parameters
    ----------
    hist: iftHist const *
    exclude_zero: bool

    """
    return _pyift.HistArgMin(hist, exclude_zero)

def HistArgMax(hist: "Hist", exclude_zero: "bool") -> "int":
    r"""
    HistArgMax(hist, exclude_zero) -> int

    Parameters
    ----------
    hist: iftHist const *
    exclude_zero: bool

    """
    return _pyift.HistArgMax(hist, exclude_zero)

def HistArgGreaterThan(hist: "Hist", thres: "float", exclude_zero: "bool") -> "int":
    r"""
    HistArgGreaterThan(hist, thres, exclude_zero) -> int

    Parameters
    ----------
    hist: iftHist const *
    thres: float
    exclude_zero: bool

    """
    return _pyift.HistArgGreaterThan(hist, thres, exclude_zero)

def AddHists(hist1: "Hist", hist2: "Hist") -> "iftHist *":
    r"""
    AddHists(hist1, hist2) -> Hist

    Parameters
    ----------
    hist1: iftHist const *
    hist2: iftHist const *

    """
    return _pyift.AddHists(hist1, hist2)

def AddHistsInPlace(src: "Hist", dst: "Hist") -> "void":
    r"""
    AddHistsInPlace(src, dst)

    Parameters
    ----------
    src: iftHist const *
    dst: iftHist *

    """
    return _pyift.AddHistsInPlace(src, dst)
class BoundingBox(object):
    r"""Proxy of C iftBoundingBox struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = property(_pyift.BoundingBox_begin_get, _pyift.BoundingBox_begin_set, doc=r"""begin""")
    end = property(_pyift.BoundingBox_end_get, _pyift.BoundingBox_end_set, doc=r"""end""")

    def __init__(self):
        r"""__init__(self) -> BoundingBox"""
        _pyift.BoundingBox_swiginit(self, _pyift.new_BoundingBox())
    __swig_destroy__ = _pyift.delete_BoundingBox

# Register BoundingBox in _pyift:
_pyift.BoundingBox_swigregister(BoundingBox)

class BoundingBoxArray(object):
    r"""Proxy of C iftBoundingBoxArray struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    val = property(_pyift.BoundingBoxArray_val_get, _pyift.BoundingBoxArray_val_set, doc=r"""val""")
    n = property(_pyift.BoundingBoxArray_n_get, _pyift.BoundingBoxArray_n_set, doc=r"""n""")
    __swig_destroy__ = _pyift.delete_BoundingBoxArray

    def __init__(self):
        r"""__init__(self) -> BoundingBoxArray"""
        _pyift.BoundingBoxArray_swiginit(self, _pyift.new_BoundingBoxArray())

# Register BoundingBoxArray in _pyift:
_pyift.BoundingBoxArray_swigregister(BoundingBoxArray)


def BoundingBoxBoxVolume(bb: "BoundingBox") -> "long":
    r"""
    BoundingBoxBoxVolume(bb) -> long

    Parameters
    ----------
    bb: iftBoundingBox

    """
    return _pyift.BoundingBoxBoxVolume(bb)

def PrintBoundingBox(bb: "BoundingBox") -> "void":
    r"""
    PrintBoundingBox(bb)

    Parameters
    ----------
    bb: iftBoundingBox

    """
    return _pyift.PrintBoundingBox(bb)

def CentralizeBoundingBox(bb: "BoundingBox", new_center: "Voxel") -> "iftBoundingBox":
    r"""
    CentralizeBoundingBox(bb, new_center) -> BoundingBox

    Parameters
    ----------
    bb: iftBoundingBox
    new_center: iftVoxel

    """
    return _pyift.CentralizeBoundingBox(bb, new_center)
class VoxelArray(object):
    r"""Proxy of C iftVoxelArray struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    n = property(_pyift.VoxelArray_n_get, _pyift.VoxelArray_n_set, doc=r"""n""")
    val = property(_pyift.VoxelArray_val_get, _pyift.VoxelArray_val_set, doc=r"""val""")
    __swig_destroy__ = _pyift.delete_VoxelArray

    def AsList(self) -> "PyObject *":
        r"""AsList(self) -> PyObject *"""
        return _pyift.VoxelArray_AsList(self)

    def __add__(self, other: "VoxelArray") -> "iftVoxelArray *":
        r"""
        __add__(self, other) -> VoxelArray

        Parameters
        ----------
        other: iftVoxelArray *

        """
        return _pyift.VoxelArray___add__(self, other)

    def __getitem__(self, index: "int") -> "PyObject *":
        r"""
        __getitem__(self, index) -> PyObject *

        Parameters
        ----------
        index: int

        """
        return _pyift.VoxelArray___getitem__(self, index)

    def __setitem__(self, index: "int", list: "PyObject *") -> "iftVoxelArray *":
        r"""
        __setitem__(self, index, list) -> VoxelArray

        Parameters
        ----------
        index: int
        list: PyObject *

        """
        return _pyift.VoxelArray___setitem__(self, index, list)

    def __len__(self) -> "PyObject *":
        r"""__len__(self) -> PyObject *"""
        return _pyift.VoxelArray___len__(self)

    def Insert(self, index: "int", list: "PyObject *") -> "iftVoxelArray *":
        r"""
        Insert(self, index, list) -> VoxelArray

        Parameters
        ----------
        index: int
        list: PyObject *

        """
        return _pyift.VoxelArray_Insert(self, index, list)

    def Remove(self, index: "int") -> "iftVoxelArray *":
        r"""
        Remove(self, index) -> VoxelArray

        Parameters
        ----------
        index: int

        """
        return _pyift.VoxelArray_Remove(self, index)

    def AsNumPy(self, mimg: "MImage", A: "AdjRel") -> "PyObject *":
        r"""
        AsNumPy(self, mimg, A) -> PyObject *

        Parameters
        ----------
        mimg: iftMImage const *
        A: iftAdjRel const *

        """
        return _pyift.VoxelArray_AsNumPy(self, mimg, A)

    def AsSet(self, image: "Image") -> "iftSet *":
        r"""
        AsSet(self, image) -> Set

        Parameters
        ----------
        image: iftImage const *

        """
        return _pyift.VoxelArray_AsSet(self, image)

    def __init__(self):
        r"""__init__(self) -> VoxelArray"""
        _pyift.VoxelArray_swiginit(self, _pyift.new_VoxelArray())

# Register VoxelArray in _pyift:
_pyift.VoxelArray_swigregister(VoxelArray)


def VoxelArrayFurthestPair(a: "VoxelArray", b: "VoxelArray") -> "int":
    r"""
    VoxelArrayFurthestPair(a, b) -> int

    Parameters
    ----------
    a: iftVoxelArray const *
    b: iftVoxelArray const *

    """
    return _pyift.VoxelArrayFurthestPair(a, b)

def CreateVoxelArrayFromNumPy(input: "PyObject *") -> "iftVoxelArray *":
    r"""
    CreateVoxelArrayFromNumPy(input) -> VoxelArray

    Parameters
    ----------
    input: PyObject *

    """
    return _pyift.CreateVoxelArrayFromNumPy(input)

def _get_direction(obj: "Image", A: "AdjRel", src: "int") -> "int":
    r"""
    _get_direction(obj, A, src) -> int

    Parameters
    ----------
    obj: iftImage const *
    A: iftAdjRel const *
    src: int

    """
    return _pyift._get_direction(obj, A, src)

def GetPaths(voxel_array: "VoxelArray", contour: "Image", obj: "Image") -> "PyObject *":
    r"""
    GetPaths(voxel_array, contour, obj) -> PyObject *

    Parameters
    ----------
    voxel_array: iftVoxelArray const *
    contour: iftImage const *
    obj: iftImage const *

    """
    return _pyift.GetPaths(voxel_array, contour, obj)

def AnchorIndex(paths: "PyObject *", pixel_index: "int") -> "int":
    r"""
    AnchorIndex(paths, pixel_index) -> int

    Parameters
    ----------
    paths: PyObject *
    pixel_index: int

    """
    return _pyift.AnchorIndex(paths, pixel_index)

def InsertAnchorAndSplitPaths(anchors: "VoxelArray", paths: "PyObject *", ref: "Image", x: "int", y: "int") -> "int":
    r"""
    InsertAnchorAndSplitPaths(anchors, paths, ref, x, y) -> int

    Parameters
    ----------
    anchors: iftVoxelArray *
    paths: PyObject *
    ref: iftImage const *
    x: int
    y: int

    """
    return _pyift.InsertAnchorAndSplitPaths(anchors, paths, ref, x, y)

def JoinPaths(paths: "PyObject *", ref: "Image") -> "iftVoxelArray *":
    r"""
    JoinPaths(paths, ref) -> VoxelArray

    Parameters
    ----------
    paths: PyObject *
    ref: iftImage const *

    """
    return _pyift.JoinPaths(paths, ref)

def FindAnchorInPaths(paths: "PyObject *", index: "int", split_path: "bool") -> "int":
    r"""
    FindAnchorInPaths(paths, index, split_path) -> int

    Parameters
    ----------
    paths: PyObject *
    index: int
    split_path: bool

    """
    return _pyift.FindAnchorInPaths(paths, index, split_path)

def FindAnchorSuggestionByArea(paths: "PyObject *", gradient: "Image", source: "Image", target: "Image", forbidden: "Image", window: "float") -> "int":
    r"""
    FindAnchorSuggestionByArea(paths, gradient, source, target, forbidden, window) -> int

    Parameters
    ----------
    paths: PyObject *
    gradient: iftImage const *
    source: iftImage const *
    target: iftImage const *
    forbidden: iftImage const *
    window: float

    """
    return _pyift.FindAnchorSuggestionByArea(paths, gradient, source, target, forbidden, window)

def SelectAnchorByLargestError(paths: "PyObject *", source: "Image", target: "Image", src_anchors: "VoxelArray", tgt_anchors: "VoxelArray") -> "int":
    r"""
    SelectAnchorByLargestError(paths, source, target, src_anchors, tgt_anchors) -> int

    Parameters
    ----------
    paths: PyObject *
    source: iftImage const *
    target: iftImage const *
    src_anchors: iftVoxelArray const *
    tgt_anchors: iftVoxelArray const *

    """
    return _pyift.SelectAnchorByLargestError(paths, source, target, src_anchors, tgt_anchors)

def PathsImage(paths: "PyObject *", ref: "Image") -> "iftImage *":
    r"""
    PathsImage(paths, ref) -> Image

    Parameters
    ----------
    paths: PyObject *
    ref: iftImage const *

    """
    return _pyift.PathsImage(paths, ref)

def ImageFillPath(image: "Image", paths: "PyObject *", value: "int") -> "void":
    r"""
    ImageFillPath(image, paths, value)

    Parameters
    ----------
    image: iftImage *
    paths: PyObject *
    value: int

    """
    return _pyift.ImageFillPath(image, paths, value)

def ImageFillVoxelArray(image: "Image", arr: "VoxelArray", value: "int") -> "void":
    r"""
    ImageFillVoxelArray(image, arr, value)

    Parameters
    ----------
    image: iftImage *
    arr: iftVoxelArray *
    value: int

    """
    return _pyift.ImageFillVoxelArray(image, arr, value)

def FImageFillVoxelArray(image: "FImage", arr: "VoxelArray", value: "float") -> "void":
    r"""
    FImageFillVoxelArray(image, arr, value)

    Parameters
    ----------
    image: iftFImage *
    arr: iftVoxelArray *
    value: float

    """
    return _pyift.FImageFillVoxelArray(image, arr, value)

def AddSecurityAnchors(source: "Image", target: "Image", src_contour: "Image", tgt_contour: "Image", index: "int", src_paths: "PyObject *", tgt_paths: "PyObject *", src_anchors: "VoxelArray", tgt_anchors: "VoxelArray") -> "bool":
    r"""
    AddSecurityAnchors(source, target, src_contour, tgt_contour, index, src_paths, tgt_paths, src_anchors, tgt_anchors) -> bool

    Parameters
    ----------
    source: iftImage const *
    target: iftImage const *
    src_contour: iftImage const *
    tgt_contour: iftImage const *
    index: int
    src_paths: PyObject *
    tgt_paths: PyObject *
    src_anchors: iftVoxelArray *
    tgt_anchors: iftVoxelArray *

    """
    return _pyift.AddSecurityAnchors(source, target, src_contour, tgt_contour, index, src_paths, tgt_paths, src_anchors, tgt_anchors)

def InsideOutSideNeighbour(object: "Image", index: "int") -> "PyObject *":
    r"""
    InsideOutSideNeighbour(object, index) -> PyObject *

    Parameters
    ----------
    object: iftImage const *
    index: int

    """
    return _pyift.InsideOutSideNeighbour(object, index)

def UncertMapToLabel(map: "Image") -> "iftImage *":
    r"""
    UncertMapToLabel(map) -> Image

    Parameters
    ----------
    map: iftImage const *

    """
    return _pyift.UncertMapToLabel(map)

def LabelToUncertMap(label: "Image", A: "AdjRel") -> "iftImage *":
    r"""
    LabelToUncertMap(label, A) -> Image

    Parameters
    ----------
    label: iftImage const *
    A: iftAdjRel const *

    """
    return _pyift.LabelToUncertMap(label, A)

def MaybeForeground(label: "Image") -> "iftImage *":
    r"""
    MaybeForeground(label) -> Image

    Parameters
    ----------
    label: iftImage const *

    """
    return _pyift.MaybeForeground(label)

def GrabCut(mimg: "MImage", regions: "Image", beta: "double", n_iters: "int") -> "iftImage *":
    r"""
    GrabCut(mimg, regions, beta, n_iters) -> Image

    Parameters
    ----------
    mimg: iftMImage const *
    regions: iftImage const *
    beta: double
    n_iters: int

    """
    return _pyift.GrabCut(mimg, regions, beta, n_iters)

def GMMDataSetDist(train: "DataSet", mimg: "MImage", n_comps: "int") -> "iftFImage *":
    r"""
    GMMDataSetDist(train, mimg, n_comps) -> FImage

    Parameters
    ----------
    train: iftDataSet *
    mimg: iftMImage const *
    n_comps: int

    """
    return _pyift.GMMDataSetDist(train, mimg, n_comps)

def DynamicTreesObject(features: "MImage", seeds: "LabeledSet", A: "AdjRel") -> "iftImage *":
    r"""
    DynamicTreesObject(features, seeds, A) -> Image

    Parameters
    ----------
    features: iftMImage *
    seeds: iftLabeledSet *
    A: iftAdjRel *

    """
    return _pyift.DynamicTreesObject(features, seeds, A)

def DynamicTreesRoot(features: "MImage", seeds: "LabeledSet", A: "AdjRel") -> "iftImage *":
    r"""
    DynamicTreesRoot(features, seeds, A) -> Image

    Parameters
    ----------
    features: iftMImage *
    seeds: iftLabeledSet *
    A: iftAdjRel *

    """
    return _pyift.DynamicTreesRoot(features, seeds, A)
class DynamicSet(object):
    r"""Proxy of C iftDynamicSet struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mean = property(_pyift.DynamicSet_mean_get, _pyift.DynamicSet_mean_set, doc=r"""mean""")
    begin = property(_pyift.DynamicSet_begin_get, _pyift.DynamicSet_begin_set, doc=r"""begin""")
    end = property(_pyift.DynamicSet_end_get, _pyift.DynamicSet_end_set, doc=r"""end""")
    dim = property(_pyift.DynamicSet_dim_get, _pyift.DynamicSet_dim_set, doc=r"""dim""")
    size = property(_pyift.DynamicSet_size_get, _pyift.DynamicSet_size_set, doc=r"""size""")

    def getSet(self) -> "iftSet *":
        r"""getSet(self) -> Set"""
        return _pyift.DynamicSet_getSet(self)
    __swig_destroy__ = _pyift.delete_DynamicSet

    def __init__(self):
        r"""__init__(self) -> DynamicSet"""
        _pyift.DynamicSet_swiginit(self, _pyift.new_DynamicSet())

# Register DynamicSet in _pyift:
_pyift.DynamicSet_swigregister(DynamicSet)

class DTForest(object):
    r"""Proxy of C iftDTForest struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    label = property(_pyift.DTForest_label_get, _pyift.DTForest_label_set, doc=r"""label""")
    cost = property(_pyift.DTForest_cost_get, _pyift.DTForest_cost_set, doc=r"""cost""")
    root = property(_pyift.DTForest_root_get, _pyift.DTForest_root_set, doc=r"""root""")
    pred = property(_pyift.DTForest_pred_get, _pyift.DTForest_pred_set, doc=r"""pred""")
    order = property(_pyift.DTForest_order_get, _pyift.DTForest_order_set, doc=r"""order""")
    delay = property(_pyift.DTForest_delay_get, _pyift.DTForest_delay_set, doc=r"""delay""")
    dyn_trees = property(_pyift.DTForest_dyn_trees_get, _pyift.DTForest_dyn_trees_set, doc=r"""dyn_trees""")

    def GetLabel(self) -> "iftImage *":
        r"""GetLabel(self) -> Image"""
        return _pyift.DTForest_GetLabel(self)

    def GetRoot(self) -> "iftImage *":
        r"""GetRoot(self) -> Image"""
        return _pyift.DTForest_GetRoot(self)

    def GetPred(self) -> "iftImage *":
        r"""GetPred(self) -> Image"""
        return _pyift.DTForest_GetPred(self)

    def GetOrder(self) -> "iftImage *":
        r"""GetOrder(self) -> Image"""
        return _pyift.DTForest_GetOrder(self)

    def GetDelay(self) -> "iftImage *":
        r"""GetDelay(self) -> Image"""
        return _pyift.DTForest_GetDelay(self)

    def GetCost(self, sqrt: "bool"=False) -> "iftFImage *":
        r"""
        GetCost(self, sqrt=False) -> FImage

        Parameters
        ----------
        sqrt: bool

        """
        return _pyift.DTForest_GetCost(self, sqrt)

    def GetSets(self) -> "PyObject *":
        r"""GetSets(self) -> PyObject *"""
        return _pyift.DTForest_GetSets(self)
    __swig_destroy__ = _pyift.delete_DTForest

    def __init__(self):
        r"""__init__(self) -> DTForest"""
        _pyift.DTForest_swiginit(self, _pyift.new_DTForest())

# Register DTForest in _pyift:
_pyift.DTForest_swigregister(DTForest)


def CreateDTForest(mimg: "MImage", A: "AdjRel", seeds: "LabeledSet", delta: "float", gamma: "float") -> "iftDTForest *":
    r"""
    CreateDTForest(mimg, A, seeds, delta, gamma) -> DTForest

    Parameters
    ----------
    mimg: iftMImage const *
    A: iftAdjRel const *
    seeds: iftLabeledSet const *
    delta: float
    gamma: float

    """
    return _pyift.CreateDTForest(mimg, A, seeds, delta, gamma)

def DynamicSetObjectPolicy(mimg: "MImage", A: "AdjRel", seeds: "LabeledSet", use_dist: "bool") -> "iftImage *":
    r"""
    DynamicSetObjectPolicy(mimg, A, seeds, use_dist) -> Image

    Parameters
    ----------
    mimg: iftMImage *
    A: iftAdjRel *
    seeds: iftLabeledSet *
    use_dist: bool

    """
    return _pyift.DynamicSetObjectPolicy(mimg, A, seeds, use_dist)

def DynamicSetRootPolicy(mimg: "MImage", A: "AdjRel", seeds: "LabeledSet", h: "int", use_dist: "bool") -> "iftImage *":
    r"""
    DynamicSetRootPolicy(mimg, A, seeds, h, use_dist) -> Image

    Parameters
    ----------
    mimg: iftMImage *
    A: iftAdjRel *
    seeds: iftLabeledSet *
    h: int
    use_dist: bool

    """
    return _pyift.DynamicSetRootPolicy(mimg, A, seeds, h, use_dist)

def DynamicSetRootPolicyInMask(mimg: "MImage", A: "AdjRel", seeds: "LabeledSet", mask: "Image") -> "iftImage *":
    r"""
    DynamicSetRootPolicyInMask(mimg, A, seeds, mask) -> Image

    Parameters
    ----------
    mimg: iftMImage *
    A: iftAdjRel *
    seeds: iftLabeledSet *
    mask: iftImage *

    """
    return _pyift.DynamicSetRootPolicyInMask(mimg, A, seeds, mask)

def DynamicSetMinRootPolicy(mimg: "MImage", A: "AdjRel", seeds: "LabeledSet", h: "int", use_dist: "bool") -> "iftImage *":
    r"""
    DynamicSetMinRootPolicy(mimg, A, seeds, h, use_dist) -> Image

    Parameters
    ----------
    mimg: iftMImage *
    A: iftAdjRel *
    seeds: iftLabeledSet *
    h: int
    use_dist: bool

    """
    return _pyift.DynamicSetMinRootPolicy(mimg, A, seeds, h, use_dist)

def DynamicSetWithCluster(mimg: "MImage", cluster: "Image", A: "AdjRel", seeds: "LabeledSet", h: "int", use_dist: "bool") -> "iftImage *":
    r"""
    DynamicSetWithCluster(mimg, cluster, A, seeds, h, use_dist) -> Image

    Parameters
    ----------
    mimg: iftMImage *
    cluster: iftImage *
    A: iftAdjRel *
    seeds: iftLabeledSet *
    h: int
    use_dist: bool

    """
    return _pyift.DynamicSetWithCluster(mimg, cluster, A, seeds, h, use_dist)

def DynamicSetRootEnhanced(mimg: "MImage", objmap: "Image", A: "AdjRel", seeds: "LabeledSet", h: "int", alpha: "float", use_dist: "bool") -> "iftImage *":
    r"""
    DynamicSetRootEnhanced(mimg, objmap, A, seeds, h, alpha, use_dist) -> Image

    Parameters
    ----------
    mimg: iftMImage *
    objmap: iftImage *
    A: iftAdjRel *
    seeds: iftLabeledSet *
    h: int
    alpha: float
    use_dist: bool

    """
    return _pyift.DynamicSetRootEnhanced(mimg, objmap, A, seeds, h, alpha, use_dist)

def DynamicSetMinRootEnhanced(mimg: "MImage", objmap: "Image", A: "AdjRel", seeds: "LabeledSet", h: "int", alpha: "float", use_dist: "bool") -> "iftImage *":
    r"""
    DynamicSetMinRootEnhanced(mimg, objmap, A, seeds, h, alpha, use_dist) -> Image

    Parameters
    ----------
    mimg: iftMImage *
    objmap: iftImage *
    A: iftAdjRel *
    seeds: iftLabeledSet *
    h: int
    alpha: float
    use_dist: bool

    """
    return _pyift.DynamicSetMinRootEnhanced(mimg, objmap, A, seeds, h, alpha, use_dist)

def DynTreeRoot(mimg: "MImage", A: "AdjRel", seeds: "LabeledSet", delta: "int", gamma: "float", objmap: "Image", alpha: "float") -> "iftImage *":
    r"""
    DynTreeRoot(mimg, A, seeds, delta, gamma, objmap, alpha) -> Image

    Parameters
    ----------
    mimg: iftMImage *
    A: iftAdjRel *
    seeds: iftLabeledSet *
    delta: int
    gamma: float
    objmap: iftImage *
    alpha: float

    """
    return _pyift.DynTreeRoot(mimg, A, seeds, delta, gamma, objmap, alpha)

def DynTreeClosestRoot(mimg: "MImage", A: "AdjRel", seeds: "LabeledSet", delta: "int", gamma: "float", objmap: "Image", alpha: "float") -> "iftImage *":
    r"""
    DynTreeClosestRoot(mimg, A, seeds, delta, gamma, objmap, alpha) -> Image

    Parameters
    ----------
    mimg: iftMImage *
    A: iftAdjRel *
    seeds: iftLabeledSet *
    delta: int
    gamma: float
    objmap: iftImage *
    alpha: float

    """
    return _pyift.DynTreeClosestRoot(mimg, A, seeds, delta, gamma, objmap, alpha)

def DTRootWeightsMap(mimg: "MImage", A: "AdjRel", seeds: "LabeledSet", h: "int", use_dist: "bool") -> "iftMImage *":
    r"""
    DTRootWeightsMap(mimg, A, seeds, h, use_dist) -> MImage

    Parameters
    ----------
    mimg: iftMImage *
    A: iftAdjRel *
    seeds: iftLabeledSet *
    h: int
    use_dist: bool

    """
    return _pyift.DTRootWeightsMap(mimg, A, seeds, h, use_dist)


